<?xml version="1.0"?>

<document>

    <properties>
        <author email="jboner at codehaus dot org">jonas bon&#233;r</author>
        <title>Startup and runtime issues</title>
    </properties>

    <body>
        <section name="Table of Contents">
            <p>
                <ol>
                    <li>
                        <a href="#Startup and transformation issues">Startup and transformation issues</a>
                    </li>
                    <li>
                        <a href="#Loading the definition">Loading the definition</a>
                    </li>
                    <li>
                        <a href="#Validate definition">Validate definition</a>
                    </li>
                    <li>
                        <a href="#Hot deployment and reconfiguration">Hot deployment and reconfiguration</a>
                    </li>
                    <li>
                        <a href="#Remote Proxy Server - RPC mechanism">Remote Proxy Server - RPC mechanism</a>
                    </li>
                    <li>
                        <a href="#Thread safety">Thread safety</a>
                    </li>
<!--                    <li>-->
<!--                        <a href="#Meta data for the target objects">Meta data for the target objects</a>-->
<!--                    </li>-->
<!--                    <li>-->
<!--                        <a href="#UUID for the target objects">UUID for the target objects</a>-->
<!--                    </li>-->
<!--                    <li>-->
<!--                        <a href="#Multiple weave models in one JVM">Multiple weave models in one JVM</a>-->
<!--                    </li>-->
                    <li>
                        <a href="#Pluggable container implementation">Pluggable container implementation</a>
                    </li>
                </ol>
            </p>

        </section>

        <section name="Startup and transformation issues">
            <p>
                <code>AspectWerkz</code> support three different ways of
                transforming your code. All of these are managed using the
                command line tool <code>aspectwerkz</code> which resides in
                the <code>ASPECTWERKZ_HOME/bin</code> directory.
            </p>
            <subsection name="The aspectwerkz command line tool">
                <p>
                    When you start up your application using the <code>aspectwerkz</code>
                    command line tool instead of using the <code>java</code>
                    command, <code>AspectWerkz</code> will intercept the normal
                    class loading mechanism and be able to transform classes
                    loaded by <b>any</b> class loader except the bootstrap class
                    loader.<br/>
                    The command line tool is one of the several ways to enable on the fly weaving.
                    For a complete description read the <a href="online.html">online architecture</a> section.<br/>
                    The command line tool also allows for offline post-processing of classes.
                </p>
                <p>
                    The <code>aspectwerkz</code> program assumes that both the
                    <code>ASPECTWERKZ_HOME</code> and <code>JAVA_HOME</code>
                    enviromental variables are set.
                </p>
                <p>
                    The options are:
                    <ul>
                        <li>
                            Starting up an application:<br/>
                            <code>aspectwerkz [-options] &lt;main class&gt; [args...]</code>
                        </li><br/>
                        <li>
                            Starting up an application using an executable jar file:<br/>
                            <code>aspectwerkz [-options] -jar &lt;jar file&gt; [args...]</code>
                        </li><br/>
                        <li>
                            Post-process all class files in a specific directory
                            (recursively), jar or zip file:<br/>
                            <code>aspectwerkz -offline &lt;definition file&gt; [-verbose] [-verify] [-haltOnError] [-cp &lt;classpath&gt;]* &lt;target classes to transform&gt;+</code>
                            <p/>
                            The 'definition file' option is the path to the
                            definition file.
                            <p/>
                            Turns on <code>-verbose</code> to follow each step of the processing.
                            <p/>
                            Turns on <code>-verify</code> to verify all weaved class according to the Java Class Format specification. Note that this can slow down the processing.
                            <p/>
                            When an error occurs, all classes of the current target are restored to their initilal state and
                            the processing goes on with the next target unless -haltOnError was set.
                            In this case the processing stops. Else a complete status about successfull and failed targets is printed at the end of all target processing.
                            <p/>
                            The 'classpath' option is the classpath needed for
                            compilation but not to be transformed (eg
                            <code>-cp myAspects.jar;servletAPI.jar</code>). It is possible to use several <code>-cp &lt;classpath&gt;</code> option instead of doing concatenation.
                            <p/>
                            The 'target classes to transform' option specifies the classes to transform.
                            It must the path to the root directory of the classes you want to transform, or a jar file or a zip file.
                            Several targets can be passed in one call (eg <code>toTransform.jar /classes otherToTransform.jar</code>).
                            <p/>
                            Note: when you then are running the application
                            (without using the <code>aspectwerkz</code> command)
                            you have to (apart from feeding it with the
                            definition) put the aspectwerkz jar along with all
                            the the dependency jars the
                            <code>ASPECTWERKZ_HOME/lib</code> directory in your
                            classpath.
                        </li><br/>
                    </ul>
                </p>
                <p>
                    Invoke the <code>aspectwerkz</code> command line tool without
                    any arguments to get a more detailed usage description.
                </p>
                <p>
                    In all three cases you have to feed the system with your
                    definition. See the
                    <a href="#Loading the definition">Loading the definition</a>
                    section for a detailed description on how to do this.
                </p>
            </subsection>

            <subsection name="Ant task for offline post-processing">
                <p>
                   For the <code>-offline</code> mode there is an
                   <a href="http://ant.apache.org/">Ant</a> task
                   that you can use for simplifying your build process.
                   (It might be useful to run the
                   <code>ASPECTWERKZ_HOME/bin/setEnv.{bat|sh}</code> script
                   first.)
                </p>
                <p>
                    Please not that this Ant task uses <code>exec</code>
                    and is using <code>bin/aspectwerkz</code>. It is provided in 0.8 for
                    backward compatibility with 0.7.x and will be refactored in the next release.
                    It is possible to use directly the <i>main class</i> <code>org.codehaus.aspectwerkz.compiler.AspectWerkzC</code>.
                </p>
                <p>
                    In order to use the Ant task you have to first define the
                    task and then create a target that invokes the task.
                </p>
                <p>
                    <b>Example:</b>
<source><![CDATA[
<target name="offline" depends="init">
    <offlineTransformation
        aspectWerkzHome="${basedir}"
        definitionFile="${basedir}/src/samples/samples.xml"
        classesToTransform="${basedir}/target/samples-classes"
        classPath="${basedir}/lib"/>
</target>

<taskdef name="offlineTransformation"
    classname="org.codehaus.aspectwerkz.task.OfflineTransformationTask"
    classpath="${aspectwerkz.classpath}"/>
]]></source>
                </p>
            </subsection>

        </section>

        <section name="Loading the definition">
            <p>
                The <code>AspectWerkz</code> system needs to know where it
                can find the aspect definition.
            </p>

            <p>
                You have two options depending on your needs and settings:
                <ul>
                    <li>
                        Feed the system with the XML definition using the: <br/>
                        <code>-Daspectwerkz.definition.file=&lt;path_to_definition_file&gt;</code>
                        command line option.
                    </li><br/>
                    <li>
                        Put the definition in a file called exactly
                        <code>aspectwerkz.xml</code> and put it on the
                        class path. Then the system will try to load the
                        definition as a resource.
                    </li><br/>
                </ul>
            </p>
            <p>
                You can validate the definition at runtime by defining the:
                <br/>
                <code>-Daspectwerkz.definition.validate=true</code> option.
            </p>
            <p>
                See the <a href="#Validate definition">Validate definition</a>
                section for details.
            </p>
        </section>

        <section name="Validate definition">
            <p>
                <code>AspectWerkz</code> has a build in definition validator that can help you
                catch errors in the XML definition as well as in the attributes at compile time.
            </p>
            <p>
                This feature is turned off by default and you can switch it on by defining the:
                <br/>
                <code>-Daspectwerkz.definition.validate=true</code> option.
            </p>
            <p>
                To be able to validate you have to have all the advices and introductions on
                the classpath. This is needed since the definition validator checks if the
                classes defined actually exists.
            </p>
            <p>
                Even if you don't compile a weave model before starting up the system you can
                use the definition validator which will then validate the XML definition at
                runtime before proceeding (but it will not abort on errors).
            </p>
        </section>

        <section name="Hot deployment and reconfiguration">
            <p>
                <code>AspectWerkz</code> supports hot deployment and reconfiguration
                of both <code>Advices</code> and <code>Introductions</code>.
                It can actually create, add, remove and rearrange <code>Advices</code>
                as well as replace an introduced implementation at runtime.
                The target classes does not have to be reloaded or transformed
                again.
            </p>
            <p>
                The AspectWerkz system is retrieved by invoking the
                <code>AspectWerks.getSystem(uuid)</code>. The uuid is the same UUID
                as specfied when compiling the weave model. If an auto-generated has
                been used the generated UUID can be read in the file name of the
                weave model (weaveModel_&lt;UUID&gt;.ser). If no weave model has been
                compiled (only using the XML definition) then you can retrieve the system
                by invoking <code>AspectWerkz.getDefaultSystem()</code>.
            </p>

            <subsection name="Examples">
                <p>
                    <ul>
                        <li>
                            For replacing an <code>Introduction</code> implementation use:
<source><![CDATA[
SystemLoader.getSystem(uuid).getMixin("mixins/Mixin").
        ___AW_swapImplementation("mixins.NewMixinImpl");
]]></source>
                            (the new implementation has to implement the same interface as
                            the previous one)
                        </li><br/>
                        <li>
                            For creating a new <code>Advice</code> use:
<source><![CDATA[
// The parameters are:
// 1. the name of advice
// 2. the class name of advice
// 3. the deployment model
// 4. an optional user defined classloader (can be null)

((XmlDefSystem)SystemLoader.getSystem(uuid)).createAdvice(
        "advices/NewAdvice", "advices.NewAdvice", "perInstance", myClassLoader);
]]></source>
                        </li><br/>
                        <li>
                            For removing an <code>Advice</code> from a specific pointcut use:
<source><![CDATA[
List methodPointcuts = SystemLoader.getSystem(uuid).getAspectMetaData("MyAspect").
                getMethodPointcuts(className, methodMetaData);
for (Iterator it = methodPointcuts.iterator(); it.hasNext();) {
    MethodPointcut pointcut = (MethodPointcut)it.next();
    if (pointcut.hasAdvice("advices/NewAdvice")) {
        pointcut.removeAdvice("advices/NewAdvice");
    }
}
]]></source>
                        </li><br/>
                        <li>
                            For adding a new <code>Advice</code> to a specific pointcut use:
<source><![CDATA[
List methodPointcuts = SystemLoader.getSystem(uuid).getAspectMetaData("MyAspect").
                getMethodPointcuts(className, methodMetaData);
for (Iterator it = methodPointcuts.iterator(); it.hasNext();) {
    MethodPointcut pointcut = (MethodPointcut)it.next();
    if (pointcut.getExpression().equals(expression)) { // check that we are at the right pointcut
        pointcut.addAdvice("advices/NewAdvice");
    }
}
]]></source>
                        </li><br/>
                        <li>
                            For changing the order of the <code>Advices</code> at a specific pointcut use:
<source><![CDATA[
List methodPointcuts = SystemLoader.getSystem(uuid).getAspectMetaData("MyAspect").
        getMethodPointcuts(className, methodMetaData);
for (Iterator it = methodPointcuts.iterator(); it.hasNext();) {
    MethodPointcut pointcut = (MethodPointcut)it.next();
    List advices = pointcut.getAdviceIndexTuples();

    ... // change the order of the advices

    pointcut.setAdviceIndexTuples(advices);
}
]]></source>
                        </li><br/>
                    </ul>
                </p>
                <p>
                    All these operations are fully thread-safe.
                </p>
            </subsection>
        </section>

        <section name="Remote Proxy Server - RPC mechanism">
            <p>
                <code>AspectWerkz</code> provides an RPC mechanism that allows you to use the
                instrumented objects (advices and mixins) seamlessly on a remote client site.
            </p>

            <subsection name="Client side">
                <p>
                    You can use the remote proxy on the client side in two ways:
                    <ul>
                        <li>
                            create a client proxy that creates a matching instance on the server.
                            The client now has seamless access this new specific instance on the server.
                            <p>
                                <b>Example:</b>
<source><![CDATA[
...
// creates a new remote proxy for the MixinImpl class which
// maps to an instance of this class on the server
RemoteProxy remoteProxy = RemoteProxy.createClientProxy(
        new String[]{"examples.connectivity.Mixin"},
        "examples.connectivity.MixinImpl",
        "localhost",
        7777
);

// retrieves the proxy to the MixinImpl instance
Mixin mixin = (Mixin)remoteProxy.getInstance();

// invoke methods on the proxy (executed on the server)
System.out.println("Mixin says: " + mixin.test1());

// close the proxy (close() must always be called)
remoteProxy.close();
...
]]></source>
                            </p>
                        </li><br/>
                        <li>
                            create an instance of some class on the server-side, wrap it with a
                            <code>RemoteProxy</code> and send to the client over the wire.
                            The client then have access to this specific instance on the server.
                            <p>
                                <b>Server side:</b>
<source><![CDATA[
    ...
    // wrap an instance in a remote proxy on the server-side and send it to the client
    RemoteProxy remoteProxy = RemoteProxy.createServerProxy(anotherMixinInstance, "localhost", 7777);
    return remoteProxy;
}
]]></source>
                            </p>
                            <p>
                                <b>Client side:</b>
<source><![CDATA[
...
// retrieve the proxy to the specific instance created on the server
RemoteProxy remoteProxy = mixin.getMixin();

// retrieves the proxy to the instance on the server
AnotherMixin anotherMixin = (AnotherMixin)remoteProxy.getInstance();
...
]]></source>
                            </p>
                        </li>
                    </ul>
                </p>
                <p>
                    A sample have been provided and can be found in the <code>src/samples/examples/connectiviy</code>
                    directory. Start by taking a look at the <code>Client.java</code> class.
                    You can run the sample by executing <code>maven aspectwerkz:samples:remote:server</code>
                    to start up the server and then in another console execute
                    <code>maven aspectwerkz:samples:remote:client</code> to start the client.
                    (When you close down the server using <code>^C</code> then the server listener
                    threads are still hanging so you need to close down them manually.)
                </p>

            </subsection>

            <subsection name="Server side">
                <p>
                    The remote proxy server is a multi-threaded production-ready implementation that
                    is ready to serve any number of incoming requests. To configure the server settings
                    (number of listener threads, max/min/init size of the thread pool, backlog etc.)
                    you have to change the settings in the in the <code>aspectwerkz.properties</code>
                    resource bundle and put it on the classpath. If no bundle is found default
                    values are used.
                </p>
                <p>
                    The server resource bundle has the following format/options:
<source><![CDATA[
remote.server.hostname=localhost
remote.server.port=7777
remote.server.client.threads.timeout=60000
remote.server.listener.threads.nr=10
remote.server.listener.threads.backlog=200
remote.server.listener.threads.run.as.daemon=false
remote.server.thread.pool.type=bounded # possible types are bounded or dynamic
remote.server.thread.pool.max.size=100
remote.server.thread.pool.init.size=10
remote.server.thread.pool.min.size=10
remote.server.thread.pool.keep.alive.time=300000
remote.server.thread.pool.wait.when.blocked=true
remote.server.invoker.classname=
]]></source>
                </p>

                <p>
                    To enable support for RPC in the <code>AspectWerkz</code> system you have to feed
                    the JVM with the <code>-Daspectwerkz.remote.server.run=true</code> option.
                </p>

                <p>
                    If you have specific requirements. For example if you want to handle the user
                    context that you (optionally) can set on the client <code>RemoteProxy</code>
                    and have sent over or have other requirements on how you want to invoke you
                    objects then you can create your own implementation of the
                    <code>org.codehaus.aspectwerkz.connectivity.Inovoker</code> interface and
                    specify the implementation in the aspectwerkz.properties resource bundle using
                    the <code>remote.server.invoker.classname=..</code> option. For an example
                    implementation see the
                    <code>org.codehaus.aspectwerkz.AspectWerkz.getDefaultInvoker()</code> method.
                </p>
            </subsection>

        </section>

        <section name="Thread safety">
            <p>
                <code>AspectWerkz</code> is generally thread-safe.
            </p>
            <p>
                There is only one rare case where you have set it explicitly
                and that is when you are spawning a new thread inside an
                <code>Advice</code>. Then you have to call
                <code>joinPoint.proceedInNewThread()</code>
                instead of the normal call to <code>joinPoint.proceed()</code>.
            </p>

            <p>
                Here is an example taken from the
                <code>Asynchronous calls</code> example in the
                <a href="/examples.html#Asynchronous calls">Examples section</a>.
<source><![CDATA[
public Object execute(final JoinPoint joinPoint) throws Throwable {
    m_threadPool.execute(
            new Runnable() {
                public void run() {
                    try {
                        // this call is made in a new thread
                        joinPoint.proceedInNewThread(); // using proceedInNewThread

                    } catch (Throwable e) {
                        throw new WrappedRuntimeException(e);
                    }
                }
            }
    );
    return null;
}]]></source>
            </p>
        </section>

<!--        <section name="Meta data for the target objects">-->
<!--            <p>-->
<!--                Internally <code>AspectWerkz</code> makes use of instance and-->
<!--                class meta-data when handling different concerns. During the-->
<!--                transformation process it adds capabilities for storing-->
<!--                meta-data directly in the target objects. These possibilites-->
<!--                could of course also be used by the user of the framework.-->
<!--            </p>-->
<!--            <p>-->
<!--                To use the meta-data facilities you just have to cast the target-->
<!--                object to the <code>org.codehaus.aspectwerkz.MetaDataEnhanceable</code>-->
<!--                interface and invoke it's <code>___AW_addMetaData</code> and-->
<!--                <code>___AW_getMetaData</code> methods.-->
<!--            </p>-->
<!--            <p>-->
<!--                The meta-data can be any kind of object (not just strings).-->
<!--            </p>-->
<!--            <p>-->
<!--                <b>Example:</b><br/>-->
<!--<source><![CDATA[-->
<!--((MetaDataEnhanceable)targetObject).___AW_addMetaData(someKey, someValue);-->
<!---->
<!--Object someValue = ((MetaDataEnhanceable)targetObject).___AW_getMetaData(someKey);-->
<!--]]></source>-->
<!--            </p>-->
<!--        </section>-->
<!---->
<!--        <section name="UUID for the target objects">-->
<!--            <p>-->
<!--                In all <code>AspectWerkz</code> all target objects (meaning all objects-->
<!--                that are transformed) gets a UUID. This is done during the transformation process.-->
<!--            </p>-->
<!--            <p>-->
<!--                This UUID can be used for many purposes.-->
<!--            </p>-->
<!--            <p>-->
<!--                For example:-->
<!--                <ul>-->
<!--                    <li>-->
<!--                        It can be used as a reliable identifier to all the objects you are working with.-->
<!--                    </li><br/>-->
<!--                    <li>-->
<!--                        It can for example in combination with the-->
<!--                        <a href="#Pluggable container implementation">pluggable container</a>-->
<!--                        be used to implement a persistence mechanism for the advices and-->
<!--                        introductions. In which all advices and introduction get the UUID of-->
<!--                        the object to which it "belongs". This UUID will then work as a handle to-->
<!--                        the advices and introductions (see old implementation of this in the-->
<!--                        ./sandbox folder for an idea of how this could be done).-->
<!--                    </li><br/>-->
<!--                    <li>-->
<!--                        It can be used to implement lazy loading using a similar approach as-->
<!--                        the one outlined above.-->
<!--                    </li>-->
<!--                </ul>-->
<!--            </p>-->
<!--            <p>-->
<!--                The generated UUID is of course not available at-->
<!--                compile time but can be retrieved during runtime using the-->
<!--                <code>org.codehaus.aspectwerkz.Identifiable</code> interface which all target-->
<!--                objects are transformed to implement:-->
<!--            </p>-->
<!--            <p>-->
<!--<source><![CDATA[-->
<!--String uuid = ((Identifiable)targetObject).___AW_getUuid();-->
<!--]]></source>-->
<!--            </p>-->
<!--            <p>-->
<!--                For those who needs to access the UUID using reflection-->
<!--                (perhaps using some kind of mapping tool or similar), the UUID-->
<!--                is internally stored in a private member field with the signature-->
<!--                <code>private String ___AW_uuid</code>.-->
<!--            </p>-->
<!--            <p>-->
<!--                There is a possibility for you to explicitly add the UUID to-->
<!--                your target classes. The target class has to implement the-->
<!--                <code>org.codehaus.aspecwerkz.Identifiable</code> interface and implements-->
<!--                it's <code>___AW_getUuid()</code> method, then a new UUID will not be-->
<!--                generated but the user defined will be used. You just have to-->
<!--                make shure that the UUID is really unique throughout the system.-->
<!--                (The <code>org.codehaus.aspectwerkz.util.UuidGenerator</code> class might-->
<!--                come in handy here.)-->
<!--            </p>-->
<!--        </section>-->

<!--        <section name="Multiple weave models in one JVM">-->
<!--            <p>-->
<!--                <code>AspectWerkz</code> supports using multiple weave model which means-->
<!--                that you can have multiple <code>AspectWerkz</code> system instances-->
<!--                running concurrently within the same JVM. This can be very useful in-->
<!--                for example application server environments since each WAR or JAR file-->
<!--                in an application server can have its own definition and its own system-->
<!--                running.-->
<!--            </p>-->
<!--            <p>-->
<!--                This feature is based on the concept that each weave model has its own-->
<!--                UUID (Unique Universal Identifier), which is a string that must be unique-->
<!--                throughout the whole system (JVM or cluster).-->
<!--            </p>-->
<!--            <p>-->
<!--                When you are compiling the weave model you can choose to provide your-->
<!--                own UUID (see the <a href="#Weave model compilation">Weave model compilation</a>-->
<!--                section), otherwise a UUID will be generated for you. You can read the generated-->
<!--                UUID in the filename of the weave model: <code>weaveModel_&lt;theUUID&gt;.ser</code>.-->
<!--            </p>-->
<!--            <p>-->
<!--                The UUID (the generated or the custom) is needed when you need to get a reference-->
<!--                to the system, for example when doing hot deploy. Then you can retrieve the-->
<!--                system like this:-->
<!--                <br/><code>AspectWerkz system = AspectWerkz.getSystem(uuid);</code>-->
<!--            </p>-->
<!--            <p>-->
<!--                If you are not compiling a weave model but feeding the JVM with an XML definition-->
<!--                at startup, then a default UUID will be used (<code>AspectWerkz.DEFAULT_SYSTEM</code>)-->
<!--            </p>-->
<!--            <p>-->
<!--                Then you can retrieve a reference to the system using:-->
<!--                <br/><code>AspectWerkz system = AspectWerkz.getDefaultSystem();</code>-->
<!--                <br/>-->
<!--                The drawback is that you can only have one single default system running.-->
<!--            </p>-->
<!--            <p>-->
<!--                If you are using the offline transformation then it is sufficient to put the-->
<!--                pre-compiled weave model somewhere on the classpath (f.e. in the WAR/JAR).-->
<!--                But if you are using the online classloader interception mechanism then all-->
<!--                all the weave model used must be in one single directory and this directory-->
<!--                must be fed to the JVM using the <code>aspectwerkz.metadata.dir=...</code>-->
<!--                option.-->
<!--            </p>-->
<!--        </section>-->

        <section name="Pluggable container implementation">
            <p>
                You have the possibility of providing your own advice or introduction
                container implementation. This can be useful if you for example would like
                to make the advices and/or introductions persistent.
            </p>
            <p>
                To create a custom container you only need to implement the
                <code>org.codehaus.aspectwerkz.advice.AdviceContainer</code> or the
                <code>org.codehaus.aspectwerkz.introduction.IntroductionContainer</code>
                interface. The custom implementation then need to be fed to the system
                using the <code>-Daspectwerkz.introduction.container.impl=...</code> or the
                <code>-Daspectwerkz.advice.container.impl=...</code> option.
            </p>
            <p>
                If you don't provide a custom implementation the default one will be used.
            </p>
            <p>
                For an example on how to create a persistent container using <code>Prevayler</code>
                as the persistence engine see code in the <code>ASPECTWERKZ_HOME/sandbox</code> dir.
            </p>
        </section>
    </body>

</document>


<!--        <section name="Persistence">-->
<!--            <p>-->
<!--                <code>AspectWerkz</code> supports transparent persistence of both-->
<!--                <code>Advice</code>s and <code>Introduction</code>s. If an-->
<!--                <code>Advice</code> or <code>Introduction</code> is marked as-->
<!--                persistent, <code>AspectWerkz</code> will transparently persist-->
<!--                it when one of it's fields becomes "dirty". The persistence manager-->
<!--                implementation is pluggable, so it is possible to extend it with-->
<!--                a custom implementation (the default implementation uses-->
<!--                <a href="http://www.prevayler.com">Prevayler</a>).-->
<!--            </p>-->
<!---->
<!--            <subsection name="Definition">-->
<!--                <p>-->
<!--                    To make an <code>Introduction</code> and/or <code>Advice</code>-->
<!--                    persistable you have to mark it as persistent when defining it.-->
<!--                    This is done by adding the <code>peristent</code> attribute and-->
<!--                    setting the value to <code>true</code>.-->
<!--                </p>-->
<!---->
<!--                <p>-->
<!--                    <b>XML definition</b><br/>-->
<!--<source><![CDATA[-->
<!--<introduction ... persistent="true"/>-->
<!---->
<!--<advice ... persistent="true"/>-->
<!--]]></source>-->
<!--            </p>-->
<!--            </subsection>-->
<!---->
<!--            <subsection name="UUID">-->
<!--                <p>-->
<!--                    To be able to retrieve the correct <code>Advice</code>s and-->
<!--                    <code>Introduction</code>s for a specific instance/class the-->
<!--                    system needs a unique handle to the specific instance/class.-->
<!--                    <code>AspectWerkz</code> solves this by adding a UUID-->
<!--                    (Universal Unique Identifier) to all the target objects.-->
<!--                    This is done during the transformation process.-->
<!--                </p>-->
<!--                <p>-->
<!--                    The only thing that you have to do is to ensure that this UUID-->
<!--                    is being persisted along with the target instance/class and is-->
<!--                    read back into the instance/class (after a restart or a crash)-->
<!--                    before use. The generated UUID is of course not available at-->
<!--                    compile time but can be retrieved during runtime using the-->
<!--                    <code>aspectwerkz.Identifiable</code> interface which all target-->
<!--                    objects are transformed to implement:-->
<!--                </p>-->
<!--                <p>-->
<!--<source><![CDATA[-->
<!--String uuid = ((Identifiable)targetObject).___AW_getUuid();-->
<!--]]></source>-->
<!--                </p>-->
<!--                <p>-->
<!--                    For those who needs to   access the UUID using reflection-->
<!--                    (perhaps using some kind of mapping tool or similar), the UUID-->
<!--                    is internally stored in a private member field with the signature-->
<!--                    <code>private String ___uuid</code>.-->
<!--                </p>-->
<!--                <p>-->
<!--                    There is a possibility for you to explicitly add the UUID to-->
<!--                    your target classes. The target class has to implement the-->
<!--                    <code>aspecwerkz.Identifiable</code> interface and implements-->
<!--                    it's <code>getUuid()</code> method, then a new UUID will not be-->
<!--                    generated but the user defined will be used. You just have to-->
<!--                    make shure that the UUID is really unique throughout the system.-->
<!--                    (The <code>org.codehaus.aspectwerkz.util.UuidGenerator</code> class might-->
<!--                    come in handy here.)-->
<!--                </p>-->
<!--            </subsection>-->
<!---->
<!--            <subsection name="Prevayler">-->
<!--                <p>-->
<!--                    The default implemententation of the <code>PersistenceManager</code>-->
<!--                    uses <a href="http://www.prevayler.org">Prevayler</a> as backend.-->
<!--                </p>-->
<!--                <p>-->
<!--                    <b>Log directory</b>-->
<!--                </p>-->
<!--                <p>-->
<!--                    The default transaction log directory is-->
<!--                    <code>./txLogs</code>. To choose another one-->
<!--                    you have to specify the-->
<!--                    <code>-Daspectwerkz.persistence.txLogDir=&lt;my_log_dir&gt;</code>-->
<!--                    option when starting up the system.-->
<!--                </p>-->
<!--                <p>-->
<!--                    <b>ClockActor daemon</b>-->
<!--                </p>-->
<!--                <p>-->
<!--                    A prevalent system is totally dependent on that the "time"-->
<!--                    is in synch throughout the system. (For more information about-->
<!--                    this see the <a href="http://www.prevayler.org">Prevayler</a>-->
<!--                    home page.) To ensure that the system starts up a ClockActor-->
<!--                    daemon thread. This thread takes care of advancing the time-->
<!--                    in the system.-->
<!--                    <br/>-->
<!--                    This thread is by default turned off but if you want to run-->
<!--                    it you have to specify the-->
<!--                    <code>-Daspectwerkz.persistence.clockactor.thread=true</code>-->
<!--                    option when starting up the system.-->
<!--               </p>-->
<!--                <p>-->
<!--                    <b>Snapshot settings</b>-->
<!--                </p>-->
<!--                <p>-->
<!--                    The <code>PersistenceManager</code> starts up a thread that-->
<!--                    takes snapshots of the whole system at regular intervals.-->
<!--                    The default settings are one snapshot every night at 03:00.-->
<!--                </p>-->
<!--                <p>-->
<!--                    If you prefer not running the snapshot scheduler daemon you-->
<!--                    can specify the-->
<!--                    <code>-Daspectwerkz.persistence.snapshot.thread=false</code>-->
<!--                    option when starting up the system.-->
<!--                </p>-->
<!--            </subsection>-->
<!--        </section>-->

