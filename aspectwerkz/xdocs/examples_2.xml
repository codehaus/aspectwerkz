<?xml version="1.0"?>
<document>

    <properties>
        <title>Model 2 - Self defined Aspects examples</title>
        <author email="alex at gnilux dot com">alexandre vasseur</author>
    </properties>

    <body>

        <section name="Table of Contents">
            <p>
                <ol>
                    <li>
                        <a href="#Introduction">Introduction</a>
                    </li>
                    <li>
                        <a href="#Caching">Caching</a>
                    </li>
                    <li>
                        <a href="#Logging">Logging</a>
                    </li>
                    <li>
                        <a href="#Introductions and Mixins">Introductions and Mixins</a>
                    </li>
                    <li>
                        <a href="#Control flow (cflow) pointcuts">Control flow (cflow) pointcuts</a>
                    </li>
                    <li>
                        <a href="#Exception throwing pointcuts">Exception throwing pointcuts</a>
                    </li>
                    <li>
                        <a href="#XML definition file for the examples">XML definition file for the examples</a>
                    </li>
                </ol>
            </p>
        </section>

        <section name="Introduction">
            <p>
                Here are some simple examples to get you going with the Model 2 - Self defined Aspects approach.
                All examples together with ready to execute tests are to be found in the
                source distribution under <code>src/samples/examples/attribdef</code>. They are
                all defined using the same definition file
                <code>samples-attribdef.xml</code>
            </p>
        </section>

        <section name="Caching">
            <p>
                This aspect implements a simple caching service. It caches
                the results from the method invocations that are picked out
                by the pointcuts mapped to the advice.
            </p>
            <p>
                To run the example type: <code>maven aspectwerkz:attribdef:samples:caching</code>
            </p>
<source><![CDATA[

}]]></source>
        </section>

        <section name="Logging">
            <p>
                This aspect implements a simple logging service.
                It logs the entry and exit of the methods that are picked
                out by the pointcuts mapped to the advice. In this simple
                example we are only using a small subset of all the metadata
                available from the join point.
            </p>
            <p>
                To run the example type:
                <code>maven aspectwerkz:attribdef:samples:logging</code>
            </p>
<source><![CDATA[
}]]></source>
        </section>

        <section name="Introductions and Mixins">
            <p>
                This example shows both how an Mixin/Introduction is
                implemented.
            </p>
            <p>
                To run the example type:
                <code>maven aspectwerkz:attribdef:samples:introduction</code><br/>
            </p>
            <p>
                Note: if you add more than one <code>Introduction</code> to a class
                then <b>you</b> have to make shure that the names of the methods
                do not collide.
<source><![CDATA[
}]]></source>
                As you can see neither the interface nor the implementation class
                needs to implement a certain interface or extend a certain class.
            </p>
             <p>
                Now you will be able to invoke your <code>Introduction</code>
                like this:
<source><![CDATA[
public class Target {
    ...
    System.out.println("The mixin says: " + ((Mixin)this).sayHello());
    ...
}]]></source>
            </p>
        </section>

        <section name="Control flow (cflow) pointcuts">
            <p>
                This example shows how control flow (cflow) pointcuts are implemented.
            </p>
            <p>
                To run the example type:
                <code>maven aspectwerkz:attribdef:samples:cflow</code><br/>
            </p>
            <p>
                In this example we have two methods <code>step1</code> and <code>step2</code>
                in which <code>step1</code> calls <code>step2</code>.
            </p>
            <p>
                First we define a <code>cflow</code> attribute on the <code>step1</code>
                method. Which means that we have defined a <code>cflow</code> pointcut for this
                method, we have also given it a name so that we can reference it in other parts
                of the definition.
            </p>
            <p>
                Second we define a normal method advice for the <code>step2</code> method (the
                advice is defined with the name "my_advice" and we are applying it here using its
                name). Then we define a <code>cflow</code> for this method pointcut. This means
                that the advices at this pointcut will only be triggered if we are in the
                control flow of the <code>cflow</code> pointcut called cflowtest, e.g. the
                method <code>step1</code>. Otherwise the advices should be skipped.
            </p>
            <p>
<source><![CDATA[
}]]></source>
            </p>
        </section>

        <section name="Exception throwing pointcuts">
            <p>

            </p>
        </section>

        <section name="XML definition file for the examples">
            <p>
                Here is the XML definition file for the aspect examples above:
            </p>
<source><![CDATA[
]]></source>
        </section>
    </body>

</document>

