<?xml version="1.0"?>
<document>

    <properties>
        <title>Model 2 - Self defined Aspects examples</title>
        <author email="alex at gnilux dot com">alexandre vasseur</author>
    </properties>

    <body>

        <section name="Table of Contents">
            <p>
                <ol>
                    <li>
                        <a href="#Introduction">Introduction</a>
                    </li>
                    <li>
                        <a href="#Caching">Caching</a>
                    </li>
                    <li>
                        <a href="#Logging">Logging</a>
                    </li>
                    <li>
                        <a href="#Introductions and Mixins">Introductions and Mixins</a>
                    </li>
                    <li>
                        <a href="#Control flow (cflow) pointcuts">Control flow (cflow) pointcuts</a>
                    </li>
                    <li>
                        <a href="#Exception throwing pointcuts">Exception throwing pointcuts</a>
                    </li>
                    <li>
                        <a href="#XML definition file for the examples">XML definition file for the examples</a>
                    </li>
                </ol>
            </p>
        </section>

        <section name="Introduction">
            <p>
                Here are some simple examples to get you going with the Model 2 - Self defined Aspects approach.
                All examples together with ready to execute tests are to be found in the
                source distribution under <code>src/samples/examples/attribdef</code>. They are
                all defined using the same definition file
                <code>samples-attribdef.xml</code>
            </p>
        </section>

        <section name="Caching">
            <p>
                This aspect implements a simple caching service. It caches
                the results from the method invocations that are picked out
                by the pointcuts mapped to the advice.
            </p>
            <p>
                To run the example type: <code>maven aspectwerkz:attribdef:samples:caching</code>
            </p>
<source><![CDATA[
/**
 * @Aspect perInstance
 */
public class CachingAspect extends Aspect {

    // ============ Pointcuts ============

    /**
     * @Call examples.attribdef.caching.*->int examples.attribdef.caching.Pi.getPiDecimal(int)
     */
    Pointcut invocationCount;

    /**
     * @Execution int examples.attribdef.caching.Pi.getPiDecimal(int)
     */
    Pointcut methodsToCache;

    // ============ Advices ============

    /**
     * @Before invocationCount
     */
    public void invocationCounter(final JoinPoint joinPoint) throws Throwable {
        CallerSideJoinPoint jp = (CallerSideJoinPoint)joinPoint;
        CacheStatistics.addMethodInvocation(
                jp.getCalleeMethodName(),
                jp.getCalleeMethodParameterTypes());
        joinPoint.proceed();
    }

    /**
     * @Around methodsToCache
     */
    public Object cache(final JoinPoint joinPoint) throws Throwable {
        MethodJoinPoint jp = (MethodJoinPoint)joinPoint;

        final Long hash = new Long(calculateHash(jp));
        final Object cachedResult = m_cache.get(hash);

        if (cachedResult != null) {
            System.out.println("using cache");
            CacheStatistics.addCacheInvocation(jp.getMethodName(), jp.getParameterTypes());
            System.out.println("parameter: timeout = " + ___AW_getParameter("timeout"));
            return cachedResult;
        }
        final Object result = joinPoint.proceed();

        m_cache.put(hash, result);
        return result;
    }

    // ============ Utility methods ============

    ...

    protected Map m_cache = new HashMap();
}
]]></source>
        </section>

        <section name="Logging">
            <p>
                This aspect implements a simple logging service.
                It logs the entry and exit of the methods that are picked
                out by the pointcuts mapped to the advice. In this simple
                example we are only using a small subset of all the metadata
                available from the join point.
            </p>
            <p>
                To run the example type:
                <code>maven aspectwerkz:attribdef:samples:logging</code>
            </p>
            <p>
                An abstract aspect is provided. By extending the abstract aspect we just need to define the pointcuts
                to refine the metadata that defines the pointcuts where logging concern has to be bounded.
                Note that no pointcut needs to be defined in the abstract aspect.
            </p>
<source><![CDATA[
/**
 * The abstract Aspect
 *
 * @Aspect
 */
public abstract class AbstractLoggingAspect extends Aspect {

    private int m_level = 0;

    /**
     * @Around methodsToLog1
     * @Around methodsToLog2
     * @Around methodsToLog3
     */
    public Object logMethod(final JoinPoint joinPoint) throws Throwable {
        MethodJoinPoint jp = (MethodJoinPoint)joinPoint;
        indent();
        System.out.println("--> " + jp.getTargetClass().getName() + "::" + jp.getMethodName());
        m_level++;
        final Object result = joinPoint.proceed();
        m_level--;
        indent();
        System.out.println("<-- " + jp.getTargetClass().getName() + "::" + jp.getMethodName());
        return result;
    }

    /**
     * @Before logSet
     * @Before logGet
     */
    public void logEntry(final JoinPoint joinPoint) throws Throwable {
        FieldJoinPoint jp = (FieldJoinPoint)joinPoint;
        System.out.println("ENTER: " + jp.getTargetClass().getName() + "::" + jp.getFieldName());
    }

    /**
     * @After logSet
     * @After logGet
     */
    public void logExit(final JoinPoint joinPoint) throws Throwable {
        FieldJoinPoint jp = (FieldJoinPoint)joinPoint;
        System.out.println("EXIT: " + jp.getTargetClass().getName() + "::" + jp.getFieldName());
    }
}



/**
 * The concrete Aspect just defines the pointcut following the naming convention
 * the absract Aspect has defined.
 *
 * @Aspect perJVM name=LoggingAspect
 */
public class LoggingAspect extends AbstractLoggingAspect {

    // ============ Pointcuts ============

    /**
     * @Execution * examples.attribdef.logging.Target.toLog1(..)
     */
    Pointcut methodsToLog1;

    /**
     * @Execution * examples.attribdef.logging.Target.toLog2(..)
     */
    Pointcut methodsToLog2;

    /**
     * @Execution * examples.attribdef.logging.Target.toLog3(..)
     */
    Pointcut methodsToLog3;

    /**
     * @Get int examples.attribdef.logging.Target.m_*
     */
    Pointcut logGet;

    /**
     * @Set int examples.attribdef.logging.Target.m_*
     */
    Pointcut logSet;
}
]]></source>
        </section>

        <section name="Introductions and Mixins">
            <p>
                This example shows both how an Mixin/Introduction is
                implemented.
            </p>
            <p>
                To run the example type:
                <code>maven aspectwerkz:attribdef:samples:introduction</code><br/>
                The example makes use of mixin inheritance within aspect
                inheritance. Moreover, the concrete aspect hides the introduced interface by using
                the <i>implicit</i> interface lookup (introduced interface are looked for in the mixin
                implementation hierarchy).<br/>
                You can also note the deployment models. The mixin is perInstance whereas the aspect is perClass,
                thus you have to call the right methods to retrieve the target instance (since there is none attached to the aspect).
            </p>
            <p>
                Note: if you add more than one <code>Introduction</code> to a class
                then <b>you</b> have to make sure that the names of the methods
                do not collide.
<source><![CDATA[
/**
 * @Aspect perClass
 */
public class IntroductionAspect extends AbstractIntroductionAspect {

    /**
     * Here we have an anonymous pointcut instead of using [AT]Class metadata at Pointcut fields level.
     *
     * @Introduce examples.attribdef.introduction.Target deploymentModel=perInstance
     */
    public class MyConcreteImpl extends MyImpl {
        public String sayHello2() {
            System.out.println("aspect target class: " + ___AW_getTargetClass());
            System.out.println("aspect target instance: " + ___AW_getTargetInstance());
            System.out.println("mixin target class: " + ___AW_getMixinTargetClass(this.getClass().getName(), this));
            System.out.println("mixin target instance: " + ___AW_getMixinTargetInstance(this.getClass().getName(), this));
            return "Hello World! Hello World!";
        }
    }
}
}]]></source>
                As you can see neither the interface nor the implementation class
                needs to implement a certain interface or extend a certain class.
            </p>
             <p>
                Now you will be able to invoke your <code>Introduction</code>
                like this:
<source><![CDATA[
public class Target {
    ...
    System.out.println("The mixin says: " + ((Mixin)this).sayHello2());
    ...
}]]></source>
            </p>
        </section>

        <section name="Control flow (cflow) pointcuts">
            <p>
                This example shows how control flow (cflow) pointcuts are implemented.
            </p>
            <p>
                To run the example type:
                <code>maven aspectwerkz:attribdef:samples:cflow</code><br/>
            </p>
            <p>
                In this example we have two methods <code>step1</code> and <code>step2</code>
                in which <code>step1</code> calls <code>step2</code>.
            </p>
            <p>
                The advices at the step2 <code>@Execution</code> pointcut will only be triggered if we are in the
                control flow of the <code>@cflow</code> pointcut called cflowPointcut, e.g. the
                method <code>step1</code>. Otherwise the advice should be skipped.<br/>
                Note the <code>&amp;&amp;</code> expression to express the cflow algebraic.
            </p>
            <p>
<source><![CDATA[
/**
 * @Aspect
 */
public class CFlowAspect extends Aspect {

    /**
     * @CFlow void examples.attribdef.cflow.Target.step1()
     */
    Pointcut cflowPointcut;

    /**
     * @Execution void examples.attribdef.cflow.Target.step2()
     */
    Pointcut methodsToLog;

    /**
     * @Around cflowPointcut && methodsToLog
     */
    public Object logMethod(final JoinPoint joinPoint) throws Throwable {
        Object result = joinPoint.proceed();
        System.out.println("  --> invoking advice triggered by step2");
        return result;
    }
}
}]]></source>
            </p>
        </section>

        <section name="Exception throwing pointcuts">
            <p>
                This example shows how exceptions throwned out of a method can be intercepted with
                <code>@Throws</code> pointcut.
            </p>
            <p>
                To run the example type:
                <code>maven aspectwerkz:attribdef:samples:exception</code><br/>
            </p>
            <p>
                <source><![CDATA[
/**
 * @Aspect
 */
public class CFlowAspect extends Aspect {

    /**
     * @CFlow void examples.attribdef.cflow.Target.step1()
     */
    Pointcut cflowPointcut;

    /**
     * @Execution void examples.attribdef.cflow.Target.step2()
     */
    Pointcut methodsToLog;

    /**
     * @Around methodsToLog IN cflowPointcut
     */
    public Object logMethod(final JoinPoint joinPoint) throws Throwable {
        Object result = joinPoint.proceed();
        System.out.println("  --> invoking advice triggered by step2");
        return result;
    }
}
                ]]></source>
            </p>
        </section>

        <section name="XML definition file for the examples">
            <p>
                Here is the XML definition file for the aspect examples above.
            </p>
<source><![CDATA[
<!DOCTYPE aspectwerkz PUBLIC
    "-//AspectWerkz//DTD//EN"
    "http://aspectwerkz.codehaus.org/dtd/aspectwerkz.dtd">

<aspectwerkz>
    <system id="samples-attribdef">
        <package name="examples.attribdef">
            <use-aspect class="caching.CachingAspect">
                <param name="timeout" value="10"/>
            </use-aspect>
            <use-aspect class="logging.LoggingAspect"/>
            <use-aspect class="introduction.IntroductionAspect"/>
            <use-aspect class="cflow.CFlowAspect"/>
            <use-aspect class="exception.ExceptionHandlingAspect"/>
        </package>
    </system>
</aspectwerkz>
]]></source>
        </section>
    </body>

</document>

