<?xml version="1.0"?>
<document>

    <properties>
        <author email="alex at gnilux dot com">Alexandre Vasseur</author>
        <title>Online mode architecture</title>
    </properties>

    <body>
        <section name="Table of Contents">
            <p>
                <ol>
                    <li>
                        <a href="#Introduction">Introduction</a>
                    </li>
                    <li>
                        <a href="#Note on previous releases">Note on previous releases</a>
                    </li>
                    <li>
                        <a href="#Overview">Overview</a>
                    </li>
                    <li>
                        <a href="#How to choose the right option">How to choose the right option</a>
                    </li>
                    <li>
                        <a href="#General rules">General rules</a>
                    </li>
                    <li>
                        <a href="#HotSwap">HotSwap</a>
                    </li>
                    <li>
                        <a href="#Transparent bootclasspath">Transparent bootclasspath</a>
                    </li>
                    <li>
                        <a href="#Native HotSwap">Native HotSwap</a>
                    </li>
                    <li>
                        <a href="#Remote HotSwap">Remote HotSwap</a>
                    </li>
                    <li>
                        <a href="#Prepared bootclasspath">Prepared bootclasspath</a>
                    </li>
                    <li>
                        <a href="#Released native HotSwap modules">Released native HotSwap modules</a>
                    </li>
                </ol>
            </p>
        </section>

        <section name="Introduction">
            <p>
                This document explains the different options provided to enable AspectWerkz online mode
                (on the fly weaving).<br/>
            </p>
            <p>
                The main concept is that the core java class loading architecture has to be enhanced to allow
                weaving (modification of the bytecode) just before a class is loaded in the JVM. This overhead is
                very light when no class at all have aspects bounded, and occurs only once per class per class loader
                hierarchy when aspects (pointcuts, introductions, advices) are bounded.<br/>
                AspectWerkz hooks in directly after the bootstrap class loader and can perform bytecode transformations
                on classes loaded by all the preceeding class loaders, making it compatible with J2EE environments with
                complex class loader hierarchy between system, ear, ejb-jar and war deployments.
            </p>
            <p>
                All options are described in term of architecture and impact, and a sample is given on how
                to startup an application with this option.<br/>
                Choosing the best option depends of your needs. Refer to the <a href="#How to choose the right option">comparison matrix</a> for a quick view.<br/>
                For a more schematic view about this architecture, refer to <a href="#">official slides</a>.<!--@todo add slides link-->
            </p>
        </section>

        <section name="Note on previous releases">
            <p>
                The releases prior to 0.8 where using <a href="http://javalab.cs.uni-bonn.de/research/jmangler/">JMangler</a>
                to plug in the class loading hierarchy. JMangler is a very innovative solution, but starting with 0.8, AspectWerkz
                uses its own architecture, having full control over it.<br/>
                The core <i>theoretical concept</i> of hooking in the class loader hierarchy is inspired from the JMangler project.<br/>
            </p>
            <p>
                Having full control over this low level architecture was a crucial point to achieve for AspectWerkz.<br/>
                All the options described here are not part of JMangler and neither provided by JMangler. These are the fruits of the
                efforts the AspectWerkz team made to provide several lightweight, cross platform, efficient and tight to the needs options
                to integrate AspectWerkz online mode in the most seamless way.
            </p>
        </section>

        <section name="Overview">
            <p>
                This part describes the main concept of each option. For a detailled understanding, refer to the option section.<br/>
                Some options are suitable for java 1.4 only. Refer to the <a href="#How to choose the right option">comparison matrix</a> section.
            </p>
            <p>
                <ul>
                    <li><b>Command line tool</b><br/>
                        The command line tool <code>bin/aspectwerkz</code> is an unification of <a href="#HotSwap">HotSwap</a> and <a href="#Transparent bootclasspath">Transparent bootclasspath</a>.
                        It sets all classpath and path required and is thus the easiest way to start with, though it might not allow for advanced use.
                        The command line tool allows auto detection of java 1.3 and java 1.4.<br/>
                    </li>
                    <li>
                        <a href="#HotSwap"><b>HotSwap</b></a><br/>
                        A first JVM launchs your target application in a second JVM.
                        The first JVM hooks AspectWerkz in the second one just before the <i>main class</i> (and all dependencies) gets loaded,
                        and then connects to the stdout / stderr / stdin stream ot the
                        second JVM to make them appear as usual thru the first JVM.<br/>
                    </li>
                    <li>
                        <a href="#Transparent bootclasspath"><b>Transparent bootclasspath</b></a><br/>
                        For JVM or java version like 1.3 which don't support <i>class replacement at runtime (HotSwap)</i>, this option
                        allows for same mechanism by putting an enhanced class loader in the target
                        application VM bootclasspath.<br/>
                    </li>
                    <li>
                        <a href="#Native HotSwap"><b>Native HotSwap</b></a><br/>
                        A native C JVM extension running in the target application VM handles the replacement of the
                        class loader by the enhanced one.<br/>
                    </li>
                    <li>
                        <a href="#Remote HotSwap"><b>Remote HotSwap</b></a><br/>
                        The application VM is launched <i>suspended</i>. The replacement of the enhanced class loader is done
                        thru a separate manual process, which can easily be scripted.<br/>
                    </li>
                    <li>
                        <a href="#Prepared bootclasspath"><b>Prepared bootclasspath</b></a><br/>
                        The enhanced class loader is builded and packaged as a jar file in a first separate manual process, which can easily be scripted.
                        The application VM is launched with options to use this enhanced class loader.<br/>
                    </li>
                </ul>
            </p>
        </section>

        <section name="How to choose the right option">
            <subsection name="Comparison matrix">
                <p>
                    <table>
                        <tr>
                            <th>Option</th>
                            <th>Java version<br/>supported</th>
                            <th>Number of JVM<br/>running</th>
                            <th>Notes</th>
                        </tr>
                        <tr>
                            <td><a href="#HotSwap">HotSwap</a></td>
                            <td>1.4 + HotSwap</td>
                            <td>2</td>
                            <td>bin/aspectwerkz or ProcessStarter<br/>Autodetection mechanism</td>
                        </tr>
                        <tr>
                            <td><a href="#Transparent bootclasspath">Transparent bootclasspath</a></td>
                            <td>1.3 and later</td>
                            <td>2</td>
                            <td>bin/aspectwerkz or ProcessStarter<br/>Autodetection mechanism<br/><code>-Daspectwerk.classloader.clbootclasspath=...</code> option in first VM</td>
                        </tr>
                        <tr>
                            <td><a href="#Native HotSwap">Native HotSwap</a></td>
                            <td>1.4 + HotSwap</td>
                            <td>1</td>
                            <td><code>-Xrunaspectwerkz</code> JVM native extension<br/><b>Recommanded for java 1.4 advanced usage</b></td>
                        </tr>
                        <tr>
                            <td><a href="#Remote HotSwap">Remote HotSwap</a></td>
                            <td>1.4 + HotSwap</td>
                            <td>1</td>
                            <td>Two step process</td>
                        </tr>
                        <tr>
                            <td><a href="#Prepared bootclasspath">Prepared bootclasspath</a></td>
                            <td>1.3 and later</td>
                            <td>1</td>
                            <td>Two step process for the first use</td>
                        </tr>
                    </table>
                </p>
            </subsection>
            <subsection name="Note on java 1.3 support">
                <p>
                    java 1.3 support is achieved thru two options:
                    <ul>
                        <li>
                            <a href="#Transparent bootclasspath">Transparent bootclasspath</a>
                        </li>
                        <li>
                            <a href="#Prepared bootclasspath">Prepared bootclasspath</a>
                        </li>
                    </ul>
                    Both options put the enhanced class loader in the <code>-Xbootclasspath/p:</code> option, whether
                    programmatically (2 JVM), whether manually (1 JVM, two step process). This means that a Sun provided
                    class of <code>rt.jar</code> is overriden by a custom one, which contravenes the <i>Java 2 Runtime Environment
                    binary code license</i> as stated in <a href="http://java.sun.com/j2se/1.3/docs/tooldocs/win32/java.html#nonstandard">Sun documentation</a>.<br/>
                    On the same topic, the following <a href="http://java.sun.com/products/jdk/1.2/docs/tooldocs/solaris/migration.html#bootcp">Sun statement</a> is contradictory.<br/>
                    Due to these legal issues, AspectWerkz does not shipped neither release the overriden class.<br/>
                    java 1.3 support is provided for educational purpose and you application using this option <i>should not be
                    deployed as doing so would contravene the Java 2 Runtime Environment binary code license.</i>
                    As a side note, you will note that overriding a class of <code>rt.jar</code> is possible thru HotSwap Sun technology with
                    java 1.4, or with <a href="http://java.sun.com/products/jdk/1.2/docs/guide/jvmpi/jvmpi.html#class_hook">JVMPI CLASS_LOAD_HOOK event</a> since java 1.2.
                </p>
            </subsection>
            <subsection name="Note on HotSwap support">
                <p>
                    HotSwap is available on Sun JVM since java 1.4. It requires the JVM with <code>-Xdebug</code> option, to allow
                    recording of method call dependancies, in order to reorganize them when a method is replaced at runtime thru
                    HotSwap.<br/>
                    With <code>-client</code> JVM option, the overhead of -Xdebug is almost null on java 1.4.<br/>
                    With <code>-server</code> JVM option, the overhead is stated to be from 5 to 10%, since HotSpot optimizations cannot be all set up.<br/>
                </p>
                <p>
                    A work is in progress to provide an enhanced native HotSwap module that will not require the JVM to run with -Xdebug. Note that the existing
                    native HotSwap module does not requires the JVM to run in <code>-Xdebug</code> mode under java 1.4.0, but requires it under java 1.4.1 or 1.4.2
                    due to JVMPI API changes.
                 </p>
            </subsection>
        </section>

        <section name="General rules">
            <p>
                No matter the option used to enable online mode, some general rules must be respected.
            </p>
            <subsection name="Released jar organization">
                <p>
                    <ul>
                        <li>aspectwerkz-core.jar and bcel.jar must always be in the bootclasspath of the JVM. Use <code>-Xbootclasspath/p:</code> JVM option.</li>
                        <li>when HotSwap (excepted native HotSwap) is used, JAVA_HOME/jre/bin must be in the PATH, and JAVA_HOME/lib/tools.jar must be in the bootclasspath of the JVM.</li>
                        <li>aspectwerkz.jar and all dependancies must be in regular classpath</li>
                    </ul>
                </p>
            </subsection>
            <subsection name="Weaver options">
                <p>
                    The online mode supports the following options:
                    <ul>
                        <li><code>-Daspectwerkz.definition.file=...</code> should point to a valid XML definition file. If not
                        specified, the first aspectwerkz.xml file found in the classpath will be used.</li>
                        <li><code>-Daspectwerkz.transform.verbose=true</code> (or =yes) turns on verbose mode</li>
                        <li><code>-Daspectwerkz.transform.dump=...</code> will dumps loaded class in <code>./_dump/</code> directory.
                        If the value is <code>*</code> it will dump all classes. If the value is <code>my.package.</code> it will dump only <code>my.package</code> classes and classes of subpackages.
                        If the value is postfixed by <code>,before</code> (<code>my.package.,before</code>), class bytecode will be dumped twice,
                        in <code>./dump/before/</code> for the original class and in <code>./dump/after/</code> for the weaved one.</li>
                    </ul>
                </p>
            </subsection>
            <subsection name="Command line tool">
                <p>
                    The command line tool <code>bin/aspectwerkz</code> allow for basic use of the options <a href="#HotSwap">HotSwap</a>
                    and <a href="#Transparent bootclasspath">Transparent bootclasspath</a> thru an autodetection mechanism.<br/>
                    It sets all classpath and path for you.<br/>
                    The command line tool also allow for offline mode compilation, though it can be achieve by direct java
                    invocation as described <a href="#">here</a>.<!--@todo add offline mode link -->
                </p>
            </subsection>
        </section>

        <section name="HotSwap">
            <subsection name="Description">
                <p>
                    <i>HotSwap</i> is a technology provided by Sun starting with java 1.4 which allows on the fly class replacement.
                    Not all JVM supports it, thought it is standardized by Sun in the <a href="http://java.sun.com/products/jpda/">JPDA architecture</a>.
                </p>
                <p>
                    A first tiny JVM launchs your target application in a second JVM. The second JVM is launched with <code>-Xdebug</code> and <code>-Xrunjdwp</code> options to allow HotSwap.
                    The first JVM hooks AspectWerkz in the second one just before the <i>main class</i> (and all dependencies) gets loaded,
                    and then connects to the stdout / stderr / stdin stream ot the
                    second JVM to make them appear as usual thru the first JVM.<br/>
                    Note: this dual JVM mechanism was the single option in previous JMangler based releases, but there is a key improvement.
                    This option now allows to further connect a JPDA based debugger to the
                    target application JVM (for example <a href="http://www.karmira.com/products/bugseeker2/">Kamirra Debugger</a>, or any IDE integrated one)
                </p>
            </subsection>
            <subsection name="Usage">
                <p>
                    This option can be used out of the box with the command line tool <code>bin/aspectwerkz</code>. Use <code>bin/aspectwerkz</code> as a replacement
                    of <code>JAVA_HOME/bin/java</code>.<br/>
<source>
set JAVA_HOME=...
set ASPECTWERKZ_HOME=...

# standard launched: java -cp myJar.jar my.App args

$ASPECTWERKZ_HOME/bin/aspectwerkz -cp myJar.jar -Daspectwerkz.definition.file=... my.App args

# Note: On windows, adapt with %ASPECTWERKZ_HOME%\bin\aspectwerkz
</source>
                </p>
                <p>
                    For more advanced usage and fine tuning, you should avoid using the <code>bin/aspectwerkz</code>. Use <code>org.codehaus.aspectwerkz.hook.ProcessStarter</code> instead.<br/>
                    Requirements:
                    <ul>
                        <li>have java 1.4</li>
                        <li>set JAVA_HOME</li>
                        <li>add JAVA_HOME/jre/bin to your PATH to enable HotSwap API</li>
                        <li>add aspectwerkz-core.jar and bcel.jar in the first VM classpath</li>
                        <li>add aspectwerkz-core.jar, bcel.jar and JAVA_HOME/lib/tools.jar in the second VM bootclasspath</li>
                        <li>add aspectwerkz.jar and dependencies in the second VM classpath</li>
                    </ul>
<source>
set JAVA_HOME=...
set PATH=$JAVA_HOME/jre/bin:$PATH

# set AspectWerkz version
# set AspectWerkz jar dependencies
set VERSION=0.8
set DEPS=...

set CLASSPATH_1=bcel.jar:aspectwerkz-core-$VERSION.jar:$CLASSPATH
set BOOT_PATH=bcel.jar:aspectwerkz-core-$VERSION.jar:$JAVA_HOME/lib/tools.jar

# set CLASSPATH as needed for your application
set CLASSPATH=...:$CLASSPATH
set CLASSPATH=aspectwerkz-$VERSION.jar:$DEPS:$CLASSPATH

# set OPTIONS as needed for your application VM
set OPTIONS=...
java -cp $CLASSPATH_1 org.codehaus.aspectwerkz.ProcessStarter ..
    .. $OPTIONS -Xbootclasspath/a:$BOOT_PATH_2 -cp $CLASSPATH_2 ..
    .. -Daspectwerkz.definition.file=... my.App args

# Note:On windows adapt with %CLASSPATH_1% , ";" as classpath separator and "\" as path separator
</source>
                </p>
                <p>
                    <code>ProcessStarter</code> is used as a replacement of a <code>JAVA_HOME/bin/java</code> and some
                    additional jars are added to the application VM classpath.<br/>
                    The script described above is basically <code>bin/aspectwerkz</code>, but you can now add more options.
                </p>
                <p>
                    The regular AspectWerkz weaver options <code>-Daspectwerkz.transform.verbose=true</code> and <code>-Daspectwerkz.transform.dump=...</code>can be used.
                    Simply place them <b>after ProcessStarter</b>.
<source>
java ... org.codehaus.aspectwerkz.ProcessStarter -Daspectwerkz.transform.verbose=yes ...
</source>
                </p>
                <p>
                    Both options can slow down the weaving process and should be used for debugging / educational purpose.<br/>
                </p>
                <p>
                    If you want to connect to your remote application, the default JDWP configuration is
                    <code>transport=dt_socket,address=9300</code>. You can override this defaults one with your
                    favorite one by specifying the <code>-Xrunjdwp:...</code> option in the target application VM section (after <code>ProcessStarter</code>).<br/>
                    For more information about JDWP option, read <a href="http://java.sun.com/j2se/1.4.2/docs/guide/jpda/conninv.html#Invocation">Sun JDWP documentation</a>.
                </p>
            </subsection>
            <subsection name="Key advantages">
                <p>
                    Using HotSwap thru <code>bin/aspectwerkz</code> or <code>ProcessStarter</code> is very convenient
                    since it can be used as <code>JAVA_HOME/bin/java</code> replacement.<br/>
                    A key advantage is that it autodetects HotSwap support (and thus java 1.3) and transparently
                    behaves as the <a href="#Transparent bootclasspath">transparent bootclasspath</a> option.
                </p>
            </subsection>
    </section>

    <section name="Transparent bootclasspath">
        <subsection name="Description">
            <p>
                For JVM or java version like 1.3 which don't support HotSwap, this option
                allows for same mechanism by putting an enhanced class loader in the target
                application VM bootclasspath.<br/>
                This option is part of an autodetection mechanism, which allow to use it
                the same way as the <a href="#HotSwap">previously described option</a>.
                For java 1.4 VM supporting HotSwap, it is possible to force this mode, which
                does not run the target application VM with -Xdebug option.
            </p>
        </subsection>
        <subsection name="Usage">
            <p>
                For java 1.3, use the <code>bin/aspectwerkz</code> script as described <a href="#HotSwap">here</a>.<br/>
                It will create a temporary <code>./_boot/</code> directory, which will be automatically added in the <code>-Xbootclasspath/p:</code>
                section of the target application VM.
            </p>>
            <p>
                To force the use of this option (especially with java 1.4), you must specify the temporary boot directory thru
                the <code>-Daspectwerkz.classloader.clbootclasspath=_boot</code> option. Specify as value a path
                which will be used (created if necessary) as temporary directory.<br/>
                This option must be set for the first VM (before <code>ProcessStarter</code>):
<source>
java -Daspectwerkz.classloader.clbootclasspath=/temp/_boot ... org.codehaus.aspectwerkz.ProcessStarter ...
</source>
            </p>
        </subsection>
        <subsection name="Key advantages">
            <p>
                Forcing the use of this options is not really necessary, unless specific needs, since it is
                used thru the autodetection mechanism of HotSwap support (and thus java 1.3) and thus transparently
                invocated when using <code>bin/aspectwerkz</code> or <code>ProcessStarter</code>.
            </p>
        </subsection>
    </section>

    <section name="Native HotSwap">
        <subsection name="Description">
            <p>
                Native HotSwap is available only for java 1.4 VM supporting HotSwap.<br/>
                Instead of using a lauching JVM that hotswaps the class laoder with an enhanced one,
                a native C JVM extension running in the target application VM handles it.<br/>

                This is the most seamless way to hook AspectWerkz in.
                For a list of ready to use prebuilded platform specific modules, refer to
                <a href="#Released native HotSwap modules">the module release list</a>.
            </p>
        </subsection>
        <subsection name="Usage">
            <p>
                Requirements:
                <ul>
                    <li>java 1.4 HotSwap supporting JVM</li>
                    <li>add in PATH the directory where native HotSwap module aspectwerkz.dll or libaspectwerkz.so resides</li>
                    <li>turn on <code>-Xdebug</code> option</li>
                    <li>turn on the AspectWerkz native HotSwap module thru <code>-Xrunaspectwerkz</code></li>
                    <li>add aspectwerkz-core.jar, bcel.jar and JAVA_HOME/lib/tools.jar in <code>-Xbootclasspath/a</code></li>
                    <li>add aspectwerkz.jar and dependancies in the regular classpath</li>
                </ul>
<source>
# set AspectWerkz version and libs dependancies
set VERSION=0.8
set DEPS=...

# add directory where native HotSwap libaspectwerkz.so (or aspectwerkz.dll) resides
set PATH=$ASPECTWERKZ_HOME/lib

set BOOT_PATH=bcel.jar:aspectwerkz-core-$VERSION.jar:$JAVA_HOME/lib/tools.jar

# standard usage with -Xrunaspectwerkz module
java -Xdebug -Xrunaspectwerkz -Xbootclasspath/a:$BOOT_PATH ..
    .. -cp aspectwwerkz-$VERSION.jar:$DEPS:... -Daspectwerkz.definition.file=... my.MyApp

# Note: for simplicity, classpath have been simplified
# Adapt according to where aspectwerk[-core].jar and dependancies are located.
# Adapt for windows usage
</source>
            </p>
            <p>
                The regular AspectWerkz weaver options <code>-Daspectwerkz.transform.verbose=true</code> and <code>-Daspectwerkz.transform.dump=...</code>can be used.
            </p>
        </subsection>
        <subsection name="Key advantages">
            <p>
                In this mode, a single JVM is running. It is the easiest option to set up with a java 1.4 VM
                supporting HotSwap.
            </p>
        </subsection>
    </section>

    <section name="Remote HotSwap">
        <subsection name="Description">
            <p>
                With this option, a single JVM is running. The hotswapping of the enhanced class loader is done
                thru a separate manual process, which can easily be scripted.<br/>
                This option can also be used to startup a JVM as usual and further decide to activate AspectWerkz in. Doing that
                will not allow you to apply pointcuts on standard java classes, but will still allow a limited usage in a
                J2EE environnement at deployment time of your applications.<br/>
            </p>
        </subsection>
        <subsection name="Usage - step 1: starting up">
            <p>
                You have to start your application VM with AspectWerkz jars and turning on a JDWP connection to allow
                further connection to the running JVM in order to hotswap the class loader.<br/>
                Requirements:
                <ul>
                    <li>java 1.4 HotSwap supporting JVM</li>
                    <li>turn on JDWP listening connection with <code>-Xrunjdwp:...</code></li>
                    <li>be sure to use <code>server=y</code> JDWP option</li>
                    <li>for JVM wide weaving, be sure to set <code>suspend=y</code> as a JDWP option</li>
                    <li>add JAVA_HOME/jre/bin to your PATH to allow jdwp</li>
                    <li>add aspectwerkz-core.jar, bcel.jar and JAVA_HOME/lib/tools.jar to the <code>-Xbootclasspath/a:</code></li>
                    <li>add aspectwerkz.jar and dependancies in regular classpath</li>
                </ul>
                For more information about JDWP option refer to <a href="http://java.sun.com/j2se/1.4.2/docs/guide/jpda/conninv.html#Invocation">Sun JDWP documentation</a>.
<source>
# set AspectWerkz version and libs dependancies
set VERSION=0.8
set DEPS=...

# enable JDWP
set PATH=$JAVA_HOME/jre/bin:$PATH

set BOOT_PATH=bcel.jar:aspectwerkz-core-$VERSION.jar:$JAVA_HOME/lib/tools.jar

# standard usage with -Xrunjdwp
# Note: VM will start and immediately hang until step 2 is completed due to suspend=y
# Refer to Sun JDWP documentation for transport and address options
java -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=y -Xbootclasspath/a:$BOOT_PATH ..
    .. -cp aspectwwerkz-$VERSION.jar:$DEPS:... -Daspectwerkz.defintion.file=... my.MyApp
</source>
            </p>
            <p>
                In the previous sample, the lauched JVM will hang, waiting for the enhanced class loader to
                be pushed it thru remote HotSwap.
            </p>
        </subsection>
        <subsection name="Usage - step 2: remote hotswap">
            <p>
                The <i>org.codehaus.aspectwerkz.hook.Plug</i>too is called to prepare the enhanced class loader and connect
                to the remote JVM just lauched. It installs the class loader thru HotSwap as specified with the <i>-hotswap</i> argument.
                It then resumes the JVM which goes on with AspectWerkz hooked in, and disconnects.<br/>
                Further connection thru JDWP with a suporting debugger is possible.<br/>
                Note that the JAVA_HOME used to call <i>Plug</i> must be the same as the one used to startup
                the application JVM to ensure correct construction of the enhanced class loader.

<source>
set CLASSPATH=aspectwerkz-core.jar:bcel.jar:JAVA_HOME/lib/tools.jar
java -cp $CLASSPATH org.codehaus.aspectwerkz.hook.Plug -hotswap transport=dt_socket,address=8000

# A Maven / Ant target is provided in the source distribution
# ant aspectwerkz:samples:plug
# maven aspectwerkz:samples:plug
</source>
            </p>
            <p>
                Some other <code>org.codehaus.aspectwerkz.hook.Plug</code> argument can be passed thru. Try the <code>-help</code> option to learn more.
            </p>
        </subsection>
        <subsection name="Key advantages">
            <p>
                This option is provided to allow HotSwap without <a href="#Native HotSwap">native code</a> and to
                have a single JVM running without the stream piping in background as with the <a href="#HotSwap">regular HotSwap</a> option.
            </p>
            <p>
                If there is a native HotSwap release available for your environment, you should use it instead.
            </p>
        </subsection>
    </section>

    <section name="Prepared bootclasspath">
        <subsection name="Description">
            <p>
                With this option, a single JVM is running. The enhanced class loader is builded and packaged
                as a jar file in a first separate manual process, which can easily be scripted.<br/>
                It can then be added in the <code>-Xbootclasspath/p:</code> option.<br/>
                This options does not uses HotSwap and is thus java 1.3 compatible.
            </p>
        </subsection>
        <subsection name="Usage - step 1: preparation">
            <p>
                Invoque <code>org.codehaus.aspectwerkz.hook.Plug -target</code> to generate the jar file
                containing the enhanced class loader.<br/>
                This step can be scripted, or done once for your java environment.
<source>
set CLASSPATH=aspectwerkz-core.jar:bcel.jar:JAVA_HOME/lib/tools.jar
java -cp $CLASSPATH org.codehaus.aspectwerkz.hook.Plug -target /path/to/enhanced.jar

# the file path/to/enhanced.jar will be created (eventually overriden)

# A Maven / Ant target is provided in the source distribution
# ant aspectwerkz:samples:plug
# maven aspectwerkz:samples:plug
</source>
            </p>
        </subsection>
        <subsection name="Usage - step 1: startup">
            <p>
                Start your application by adding the generated jar to the <code>-Xbootclasspath/p:</code>
                option. Note the <b>/p:</b> flag instead of the previously used <b>/a:</b> flag.<br/>
                Add all needed jar in the <code>-Xbootclasspath/p:</code> or regular classpath as usual.
<source>
# set AspectWerkz version and libs dependancies
set VERSION=0.8
set DEPS=...

set BOOT_PATH=bcel.jar:aspectwerkz-core-$VERSION.jar

# standard usage with -Xbootclasspath/p: pointing to step 1 generated jar
java -Xbootclasspath/p:/path/to/enhanced.jar -Xbootclasspath/a:$BOOT_PATH ..
    .. -cp aspectwwerkz-$VERSION.jar:$DEPS:... -Daspectwerkz.defintion.file=... my.MyApp
</source>
            </p>
        </subsection>
        <subsection name="Key advantages">
            <p>
                This options works both for java 1.3 and java 1.4. It starts a single JVM
                and runs it without <code>-Xdebug</code> option.<br/>
                For a complete discussion on when to use this option read the <a href="#How to choose the right option">next section</a>.
            </p>
        </subsection>
    </section>


    <section name="Released native HotSwap modules">
        <p>
        </p>
    </section>

</body>
</document>


