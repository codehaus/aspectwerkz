<?xml version="1.0" encoding="UTF-8"?>
<!--*****************************************************************************************************************************
	AspectWerkz DTD 0.8

This DTD is provided as is. Some elements might have been deprecated since 0.7.4  (see comments)

This DTD might be incomplete - drop a mail on the user / dev mailing list

This DTD might clash with some of existing XML files since it imposes for some elements an order
(see aspect: introductions then pointcuts then advices)

The "unspecified" order of the aspectwerkz childs might change to the one similar of aspects
(transformation scope, introduction-def, advice-def, advices-def, abstract-aspect, aspect, package)

To use this DTD, start your defintion file with
	<!DOCTYPE aspectwerkz PUBLIC
	    "-//AspectWerkz//DTD 0.8//EN"
	    "http://aspectwerkz.codehaus.org/dtd/aspectwerkz_0_8.dtd">
To not use this DTD, start your definition file with
	<?xml version="1.0"?>

******************************************************************************************************************************-->
<!-- aspectwerkz -->
<!--<!ELEMENT aspectwerkz (transformation-scope*, introduction-def*, advice-def*, advices-def*, abstract-aspect*, aspect*, package*)>-->
<!ELEMENT aspectwerkz (transformation-scope*, (introduction-def | advice-def | advices-def | abstract-aspect | aspect | package)*)>
<!ATTLIST aspectwerkz
	id CDATA #REQUIRED
>
<!--*****************************************************************************************************************************
transformation-scope
*********************************************************************************************************************************
Declares one or more global package prefix. Any class not in the scope cannot have aspects on it.
Attributes:
	package: package prefix
Note: package does not support pattern, excepted ending ".*" like "foo.*", which is equivalent to "foo."
During weaving, a class is considered to be in the transformation scope with a classFQN.startsWith( ) test.
******************************************************************************************************************************-->
<!ELEMENT transformation-scope EMPTY>
<!ATTLIST transformation-scope
	package CDATA #REQUIRED
>
<!--*****************************************************************************************************************************
package
*********************************************************************************************************************************
Declares a package prefix which applies to all FQN (introduction, advice) and patterns (pointcuts, class)
contained in the package element. 
Package elements can be nested to ease writing of package and subpackage
(package@name "bar" nested in package@name "foo" means "foo.bar").
Attributes:
	name: package prefix
Note: does not support pattern, excepted ending ".*" like "foo.*" which is equivalent to "foo." and to "foo"
******************************************************************************************************************************-->
<!ELEMENT package (introduction-def*, (advice-def | advices-def)*, abstract-aspect*, aspect*, package*)>
<!ATTLIST package
	name CDATA #REQUIRED
>
<!--*****************************************************************************************************************************
advice-def
*********************************************************************************************************************************
Allow for advice declaration for use in several aspects
Attributes:
	name: unique name of the advice in the system. Referenced in advice-ref@name element
	class: full qualified class name of the advice
	(Deprecated:advice, use class)(Still supported)
	deployment-model: advice life cycle context, defaults to perJVM
	(Deprecated: deploymentModel)
	attribute: ??
To specify other advice param, use nested element advice-def/param
******************************************************************************************************************************-->
<!-- @todo : class REQUIRED, remove advice -->
<!ELEMENT advice-def (param*)>
<!ATTLIST advice-def
	name CDATA #REQUIRED
	class CDATA #IMPLIED
	advice CDATA #IMPLIED
	deployment-model (perJVM | perClass | perInstance | perThread) #IMPLIED
	attribute CDATA #IMPLIED
>
<!ELEMENT param EMPTY>
<!ATTLIST param
	name CDATA #REQUIRED
	value CDATA #REQUIRED
>
<!--*****************************************************************************************************************************
advices-def
*********************************************************************************************************************************
Allow to define an advice stack
******************************************************************************************************************************-->
<!ELEMENT advices-def (advice-ref+)>
<!ATTLIST advices-def
	name CDATA #REQUIRED
>
<!--*****************************************************************************************************************************
introduction-def
*********************************************************************************************************************************
Attributes:
	name: unique name 
	interface: FQN of interface 
	implementation: FQN of class implementing interface to which calls will be delegated 
	deployment-model: advice life cycle context 
	(Deprecated: deploymentModel)
	attribute: ?? 
******************************************************************************************************************************-->
<!ELEMENT introduction-def EMPTY>
<!ATTLIST introduction-def
	name CDATA #REQUIRED
	interface CDATA #REQUIRED
	implementation CDATA #IMPLIED
	deployment-model CDATA #IMPLIED
	attribute CDATA #IMPLIED
>
<!--*****************************************************************************************************************************
abstract-aspect
*********************************************************************************************************************************
Allow for inheritance of aspects
Attributes:
	name: unique name. Referenced in aspect@extends.
?? level of inheritance between abstract-aspects
?? pointcut does not appears here @todo change if pointcut-def gets deprecated
******************************************************************************************************************************-->
<!ELEMENT abstract-aspect ( (introduction-ref | introduction)*, (pointcut-def | controller-def)* , (advices-ref | advice-ref | advice | bind-advice)*)>
<!ATTLIST abstract-aspect
	name CDATA #REQUIRED
>
<!--*****************************************************************************************************************************
aspect
*********************************************************************************************************************************
Attributes:
	name: ??
	extends: abstract-aspect@name
******************************************************************************************************************************-->
<!ELEMENT aspect ((introduction-ref | introduction | bind-introduction)*, (pointcut-def | pointcut | controller-def)*, (advices-ref | advice-ref | advice | bind-advice)*)>
<!ATTLIST aspect
	name CDATA #REQUIRED
	extends CDATA #IMPLIED
>
<!--*****************************************************************************************************************************
pointcut-def and pointcut ???? one will be deprecated soon
*********************************************************************************************************************************
Attributes:
	name
	type
	pattern
Deprecated:	 ??? one will be deprecated soon
******************************************************************************************************************************-->
<!ELEMENT pointcut-def EMPTY>
<!ATTLIST pointcut-def
	name CDATA #REQUIRED
	type (method | getField | setField | throws | callerSide | cflow) #REQUIRED
	pattern CDATA #REQUIRED
>
<!ELEMENT pointcut EMPTY>
<!ATTLIST pointcut
	name CDATA #REQUIRED
	type (method | getField | setField | throws | callerSide | cflow) #REQUIRED
	pattern CDATA #REQUIRED
>
<!--*****************************************************************************************************************************
introduction-ref
*********************************************************************************************************************************
References introduction-def
******************************************************************************************************************************-->
<!ELEMENT introduction-ref EMPTY>
<!ATTLIST introduction-ref
	name CDATA #REQUIRED
>
<!--*****************************************************************************************************************************
advice-ref
*********************************************************************************************************************************
References advice-def
******************************************************************************************************************************-->
<!ELEMENT advice-ref EMPTY>
<!ATTLIST advice-ref
	name CDATA #REQUIRED
>
<!--*****************************************************************************************************************************
advices-ref
*********************************************************************************************************************************
References advices-def
******************************************************************************************************************************-->
<!ELEMENT advices-ref EMPTY>
<!ATTLIST advices-ref
	name CDATA #REQUIRED
>
<!--*****************************************************************************************************************************
introduction
Deprecated - use bind-introduction
*********************************************************************************************************************************
Attributes:
	class: pattern for FQN to apply introduction
Deprecated:	introduce
Note: introduction-ref can be provided both thru a single attribute introduction@introduction-ref and thru one
or more child elements introduction/introduction-ref. The introduction@introduction-ref will ?? be first on stack.
******************************************************************************************************************************-->
<!ELEMENT introduction (introduction-ref*)>
<!ATTLIST introduction
	class CDATA #REQUIRED
	introduction-ref CDATA #IMPLIED
>
<!--*****************************************************************************************************************************
bind-introduction
*********************************************************************************************************************************
Attributes:
	class: pattern for FQN to apply introduction
Deprecated:	introduce
Note: introduction-ref can be provided both thru a single attribute introduction@introduction-ref and thru one
or more child elements introduction/introduction-ref. The introduction@introduction-ref will ?? be first on stack.
******************************************************************************************************************************-->
<!ELEMENT bind-introduction (introduction-ref*)>
<!ATTLIST bind-introduction
	class CDATA #REQUIRED
	introduction-ref CDATA #IMPLIED
>
<!--*****************************************************************************************************************************
advice
Deprecated - use bind-advice
*********************************************************************************************************************************
Attributes:
	pointcut: references pointcut-def@name
	expression: reference an logical combination of pointcut-def@name
	cflow: references pointcut-def@name whose @type is "cflow"
Deprecated:	advise
One and only one of @pointcut and @expression must be present
Note: advice-ref can be provided both thru a single attribute advice@advice-ref and thru one or more child
elements advice/advice-ref. The advice@advice-ref will ?? be first on stack.
******************************************************************************************************************************-->
<!ELEMENT advice (advices-ref | advice-ref)*>
<!ATTLIST advice
	pointcut CDATA #IMPLIED
	expression CDATA #IMPLIED
	cflow CDATA #IMPLIED
	advice-ref CDATA #IMPLIED
>
<!--*****************************************************************************************************************************
bind-advice
*********************************************************************************************************************************
Attributes:
	pointcut: references pointcut-def@name
	expression: reference an logical combination of pointcut-def@name
	cflow: references pointcut-def@name whose @type is "cflow"
One and only one of @pointcut and @expression must be present
Note: advice-ref can be provided both thru a single attribute advice@advice-ref and thru one or more child
elements advice/advice-ref. The advice@advice-ref will ?? be first on stack.
******************************************************************************************************************************-->
<!ELEMENT bind-advice (advices-ref | advice-ref)*>
<!ATTLIST bind-advice
	pointcut CDATA #IMPLIED
	expression CDATA #IMPLIED
	cflow CDATA #IMPLIED
	advice-ref CDATA #IMPLIED
>
<!--*****************************************************************************************************************************
controller-def
Deprecated: controller
*********************************************************************************************************************************
Attributes:
	pointcut: references pointcut-def@name
	expression: reference an logical combination of pointcut-def@name
	class: implementation of the controller
One and only one of @pointcut and @expression must be present
******************************************************************************************************************************-->
<!ELEMENT controller-def EMPTY>
<!ATTLIST controller-def
	pointcut CDATA #IMPLIED
	expression CDATA #IMPLIED
	class CDATA #REQUIRED
>	
