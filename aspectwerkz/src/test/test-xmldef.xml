<aspectwerkz>

    <system id="tests">

        <!--    <transformation-scope package="test"/>-->

        <!-- ============================================= -->
        <!--  Define the introductions                     -->
        <!-- ============================================= -->
        <package name="test.xmldef">
            <introduction-def name="introductionPerJVM" interface="PerJVM" implementation="PerJVMImpl" deployment-model="perJVM"/>
            <introduction-def name="introductionPerInstance" interface="PerInstance" implementation="PerInstanceImpl" deployment-model="perInstance"/>
            <introduction-def name="introductionPerClass" interface="PerClass" implementation="PerClassImpl" deployment-model="perClass"/>
            <introduction-def name="introductionPerThread" interface="PerThread" implementation="PerThreadImpl" deployment-model="perThread"/>
            <introduction-def name="introductions" interface="Introductions" implementation="IntroductionsImpl" deployment-model="perJVM"/>
            <introduction-def name="introductionReplacement" interface="Introductions" implementation="IntroductionsImpl" deployment-model="perJVM"/>
        </package>
        <introduction-def name="serializable" interface="java.io.Serializable"/>

        <!-- ============================================= -->
        <!--  Define the advices                           -->
        <!-- ============================================= -->
        <package name="test.xmldef">
            <advice-def name="cflowLogger" class="CFlowLoggingAdvice" deployment-model="perJVM"/>
            <advice-def name="methodAdvicePerJVM" class="MyMemberMethodAdvice1" deployment-model="perJVM"/>
            <advice-def name="methodAdvicePerClass" class="MyMemberMethodAdvice1" deployment-model="perClass"/>
            <advice-def name="methodAdvicePerInstance" class="MyMemberMethodAdvice1" deployment-model="perInstance"/>
            <advice-def name="methodAdvicePerThread" class="MyMemberMethodAdvice1" deployment-model="perThread"/>
            <advice-def name="methodAdvice1" class="MyMemberMethodAdvice1" deployment-model="perJVM"/>
            <advice-def name="methodAdvice2" class="MyMemberMethodAdvice2" deployment-model="perClass"/>
            <advice-def name="methodAdvice3" class="MyMemberMethodAdvice3" deployment-model="perInstance"/>
            <advice-def name="methodAdvice4" class="MyMemberMethodAdvice4" deployment-model="perThread"/>
            <advice-def name="methodAdvice5" class="MyMemberMethodAdvice5" deployment-model="perJVM"/>
            <advice-def name="methodAdvice7" class="MyMemberMethodAdvice7" deployment-model="perJVM"/>
            <advice-def name="staticMethodAdvice1" class="MyMemberMethodAdvice1" deployment-model="perJVM"/>
            <advice-def name="staticMethodAdvice2" class="MyStaticMethodAdvice2" deployment-model="perClass"/>
            <advice-def name="staticMethodAdvice3" class="MyStaticMethodAdvice3" deployment-model="perJVM"/>
            <advice-def name="staticMethodAdvice4" class="MyStaticMethodAdvice4" deployment-model="perThread"/>
            <advice-def name="staticMethodAdvice5" class="MyStaticMethodAdvice5" deployment-model="perJVM"/>
            <advice-def name="methodAdvicePerJVM" class="MyMemberMethodAdvice1" deployment-model="perJVM"/>
            <advice-def name="methodAdvicePerClass" class="MyMemberMethodAdvice1" deployment-model="perClass"/>
            <advice-def name="methodAdvicePerInstance" class="MyMemberMethodAdvice1" deployment-model="perInstance"/>
            <advice-def name="methodAdvicePerThread" class="MyMemberMethodAdvice1" deployment-model="perThread"/>
            <advice-def name="singleMethodAdvice" class="SimpleMethodAdvice" deployment-model="perJVM"/>
            <advice-def name="throwsAdvice1" class="MyThrowsAdvice1" deployment-model="perJVM"/>
            <advice-def name="throwsAdvice2" class="MyThrowsAdvice1" deployment-model="perClass"/>
            <advice-def name="throwsAdvice3" class="MyThrowsAdvice1" deployment-model="perInstance"/>
            <advice-def name="throwsAdvice4" class="MyThrowsAdvice1" deployment-model="perThread"/>
            <advice-def name="throwsAdviceMetaData" class="MyThrowsAdvice2" deployment-model="perJVM"/>
            <advice-def name="preAdvice1" class="MyPreAdvice1" deployment-model="perJVM"/>
            <advice-def name="preAdvice2" class="MyPreAdvice1" deployment-model="perInstance"/>
            <advice-def name="preAdvice3" class="MyPreAdvice1" deployment-model="perClass"/>
            <advice-def name="preAdvice4" class="MyPreAdvice1" deployment-model="perThread"/>
            <advice-def name="preAdvice5" class="MyPreAdvice2" deployment-model="perJVM"/>
            <advice-def name="preAdvice6" class="MyPreAdvice2" deployment-model="perClass"/>
            <advice-def name="preAdvice7" class="MyPreAdvice3" deployment-model="perThread"/>
            <advice-def name="preAdvice8" class="MyPreAdvice3" deployment-model="perInstance"/>
            <advice-def name="postAdvice1" class="MyPostAdvice1"/>
            <advice-def name="postAdvice2" class="MyPostAdvice1" deployment-model="perInstance"/>
            <advice-def name="postAdvice3" class="MyPostAdvice1" deployment-model="perClass"/>
            <advice-def name="postAdvice4" class="MyPostAdvice1" deployment-model="perThread"/>
            <advice-def name="postAdvice5" class="MyPostAdvice2" deployment-model="perJVM"/>
            <advice-def name="postAdvice6" class="MyPostAdvice2" deployment-model="perClass"/>
            <advice-def name="postAdvice7" class="MyPostAdvice3" deployment-model="perThread"/>
            <advice-def name="postAdvice8" class="MyPostAdvice3" deployment-model="perInstance"/>
            <advice-def name="methodAdvice6" class="MyMemberMethodAdvice6" deployment-model="perJVM">
                <param name="test" value="test_value"/>
            </advice-def>
            <advice-def name="preAdvice9" class="MyPreAdvice4" deployment-model="perJVM">
                <param name="test" value="test_value"/>
            </advice-def>
            <advices-def name="advice_stack_test">
                <advice-ref name="preAdvice6"/>
                <advice-ref name="preAdvice7"/>
                <advice-ref name="postAdvice7"/>
                <advice-ref name="postAdvice6"/>
            </advices-def>
            <advice-def name="reflection_advice" class="reflection.ReverseAdvice"/>
        </package>

        <!-- ============================================= -->
        <!--  Define the aspects                           -->
        <!-- ============================================= -->
        <package name="test.xmldef.*">
            <aspect name="MemberMethodAdviceTest">
                <pointcut-def name="pc1" type="method" pattern="* MemberMethodAdviceTest.get*(..)"/>
                <pointcut-def name="pc2" type="method" pattern="* MemberMethodAdviceTest.*Param**(..)"/>
                <pointcut-def name="pc3" type="method" pattern="* MemberMethodAdviceTest.testThrowException(..)"/>
                <pointcut-def name="pc4" type="method" pattern="* MemberMethodAdviceTest.methodAdvicedMethod(..)"/>
                <pointcut-def name="pc5" type="method" pattern="* MemberMethodAdviceTest.meth*AdvicedMethod(..)"/>
                <pointcut-def name="pc6" type="method" pattern="* MemberMethodAdviceTest.method*icedMethodNewThread(..)"/>
                <pointcut-def name="pc7" type="method" pattern="* MemberMethodAdviceTest.method*dvicedMethodNewThread(..)"/>
                <pointcut-def name="pc8" type="method" pattern="* MemberMethodAdviceTest.multipleMethodAdvicedMethod(..)"/>
                <pointcut-def name="pc9" type="method" pattern="* MemberMethodAdviceTest.multipleChainedMethodAdvicedMethod(..)"/>
                <pointcut-def name="pc10" type="method" pattern="* MemberMethodAdviceTest.joinPointMetaData(..)"/>
                <pointcut-def name="pc11" type="method" pattern="void MemberMethodAdviceTest.passingParameterToAdviceMethod(..)"/>
                <pointcut-def name="pc12" type="method" pattern="void MemberMethodAdviceTest.multiplePointcutsMethod(..)"/>
                <pointcut-def name="pc13" type="method" pattern="void MemberMethodAdviceTest.multiplePointcutsMethod(..)"/>
                <pointcut-def name="pc14" type="method" pattern="* MemberMethodAdviceTest.takesArrayAsArgument(String[])"/>
                <bind-advice pointcut="pc1 OR pc2 OR pc3 OR pc4 OR pc14">
                    <advice-ref name="methodAdvice1"/>
                </bind-advice>
                <bind-advice pointcut="pc5">
                    <advice-ref name="methodAdvice2"/>
                </bind-advice>
                <bind-advice pointcut="pc6">
                    <advice-ref name="methodAdvice5"/>
                </bind-advice>
                <bind-advice pointcut="pc7">
                    <advice-ref name="methodAdvice5"/>
                </bind-advice>
                <bind-advice pointcut="pc8">
                    <advice-ref name="methodAdvice2"/>
                    <advice-ref name="methodAdvice3"/>
                    <advice-ref name="methodAdvice3"/>
                </bind-advice>
                <bind-advice pointcut="pc9">
                    <advice-ref name="methodAdvice1"/>
                    <advice-ref name="methodAdvice2"/>
                    <advice-ref name="methodAdvice3"/>
                </bind-advice>
                <bind-advice pointcut="pc10">
                    <advice-ref name="methodAdvice4"/>
                </bind-advice>
                <bind-advice pointcut="pc11">
                    <advice-ref name="methodAdvice6"/>
                </bind-advice>
                <bind-advice pointcut="pc12">
                    <advice-ref name="methodAdvice2"/>
                    <advice-ref name="methodAdvice2"/>
                </bind-advice>
                <bind-advice pointcut="pc13">
                    <advice-ref name="methodAdvice3"/>
                    <advice-ref name="methodAdvice3"/>
                </bind-advice>
            </aspect>
        </package>

        <aspect name="StaticMethodAdviceTest">
            <pointcut-def name="pc1" type="method" pattern="* test.xmldef.StaticMethodAdviceTest.get*(..)"/>
            <pointcut-def name="pc2" type="method" pattern="* test.xmldef.StaticMethodAdviceTest.*Param*(..)"/>
            <pointcut-def name="pc3" type="throws" pattern="* test.xmldef.StaticMethodAdviceTest.exceptionThrower(..)#java.lang.UnsupportedOperationException"/>
            <pointcut-def name="pc4" type="method" pattern="void test.xmldef.StaticMethodAdviceTest.methodAdvicedMethod(..)"/>
            <pointcut-def name="pc5" type="method" pattern="* test.xmldef.StaticMethodAdviceTest.methodAdvicedMethod(..)"/>
            <pointcut-def name="pc6" type="method" pattern="* test.xmldef.StaticMethodAdviceTest.methodAdvicedMethodNewThread(..)"/>
            <pointcut-def name="pc7" type="method" pattern="* test.xmldef.StaticMethodAdviceTest.multipleMethodAdvicedMethod(..)"/>
            <pointcut-def name="pc8" type="method" pattern="* test.xmldef.StaticMethodAdviceTest.multipleChainedMethodAdvicedMethod(..)"/>
            <pointcut-def name="pc9" type="method" pattern="* test.xmldef.StaticMethodAdviceTest.joinPointMetaData(..)"/>
            <pointcut-def name="pc10" type="method" pattern="void test.xmldef.StaticMethodAdviceTest.multiplePointcutsMethod(..)"/>
            <pointcut-def name="pc11" type="method" pattern="void test.xmldef.StaticMethodAdviceTest.multiplePointcutsMethod(..)"/>
            <pointcut-def name="pc12" type="method" pattern="* test.xmldef.StaticMethodAdviceTest.takesArrayAsArgument(String[])"/>
            <bind-advice pointcut="pc1">
                <advice-ref name="staticMethodAdvice1"/>
            </bind-advice>
            <bind-advice pointcut="pc2">
                <advice-ref name="staticMethodAdvice1"/>
            </bind-advice>
            <bind-advice pointcut="pc3">
                <advice-ref name="throwsAdvice1"/>
            </bind-advice>
            <bind-advice pointcut="pc4">
                <advice-ref name="staticMethodAdvice2"/>
            </bind-advice>
            <bind-advice pointcut="pc5">
                <advice-ref name="staticMethodAdvice1"/>
            </bind-advice>
            <bind-advice pointcut="pc6">
                <advice-ref name="staticMethodAdvice5"/>
                <advice-ref name="staticMethodAdvice5"/>
            </bind-advice>
            <bind-advice pointcut="pc7">
                <advice-ref name="staticMethodAdvice2"/>
                <advice-ref name="staticMethodAdvice3"/>
                <advice-ref name="staticMethodAdvice3"/>
            </bind-advice>
            <bind-advice pointcut="pc8">
                <advice-ref name="staticMethodAdvice1"/>
                <advice-ref name="staticMethodAdvice2"/>
                <advice-ref name="staticMethodAdvice3"/>
            </bind-advice>
            <bind-advice pointcut="pc9">
                <advice-ref name="staticMethodAdvice4"/>
            </bind-advice>
            <bind-advice pointcut="pc10">
                <advice-ref name="staticMethodAdvice2"/>
                <advice-ref name="staticMethodAdvice2"/>
            </bind-advice>
            <bind-advice pointcut="pc11">
                <advice-ref name="staticMethodAdvice3"/>
                <advice-ref name="staticMethodAdvice3"/>
            </bind-advice>
            <bind-advice pointcut="pc12">
                <advice-ref name="staticMethodAdvice1"/>
            </bind-advice>
        </aspect>

        <aspect name="DynamicDeploymentTest">
            <pointcut-def name="pc1" type="method" pattern="* test.xmldef.DynamicDeploymentTest.reorderAdvicesTestMethod(..)"/>
            <pointcut-def name="pc2" type="method" pattern="* test.xmldef.DynamicDeploymentTest.removeAdviceTestMethod(..)"/>
            <pointcut-def name="pc3" type="method" pattern="* test.xmldef.DynamicDeploymentTest.addAdviceTestMethod(..)"/>
            <pointcut-def name="pc4" type="method" pattern="* test.xmldef.DynamicDeploymentTest.createTransientAdviceTestMethod(..)"/>
            <pointcut-def name="pc5" type="method" pattern="* test.xmldef.DynamicDeploymentTest.createPersistentAdviceTestMethod(..)"/>
            <bind-advice pointcut="pc1 OR pc2">
                <advice-ref name="methodAdvice2"/>
                <advice-ref name="methodAdvice3"/>
                <advice-ref name="methodAdvice3"/>
            </bind-advice>
            <bind-advice pointcut="pc3">
                <advice-ref name="methodAdvice2"/>
            </bind-advice>
            <bind-advice pointcut="pc4"/>
            <bind-advice pointcut="pc5"/>
        </aspect>

        <aspect name="FieldAdviceTest">
            <pointcut-def name="pc1" type="setField" pattern="* test.xmldef.FieldAdviceTest.m_setFieldPreAdvice*"/>
            <pointcut-def name="pc2" type="setField" pattern="int test.xmldef.FieldAdviceTest.m_setFieldPreAdvi*"/>
            <pointcut-def name="pc3" type="setField" pattern="* test.xmldef.FieldAdviceTest.m_setFie*dPostAdviced"/>
            <pointcut-def name="pc4" type="setField" pattern="* test.xmldef.FieldAdviceTest.m_se*FieldPostAdviced"/>
            <pointcut-def name="pc5" type="setField" pattern="* test.xmldef.FieldAdviceTest.m_setFieldPrePostAdviced"/>
            <pointcut-def name="pc6" type="getField" pattern="* test.xmldef.FieldAdviceTest.m_getFieldPreAdvic*"/>
            <pointcut-def name="pc7" type="getField" pattern="* test.xmldef.FieldAdviceTest.m_getFieldPreAdvice*"/>
            <pointcut-def name="pc8" type="getField" pattern="* test.xmldef.FieldAdviceTest.m_getFieldPostAdviced"/>
            <pointcut-def name="pc9" type="getField" pattern="* test.xmldef.FieldAdviceTest.m_getFieldPrePostAdviced"/>
            <pointcut-def name="pc10" type="setField" pattern="* test.xmldef.FieldAdviceTest.s_setStaticFieldPreAdvic*"/>
            <pointcut-def name="pc11" type="setField" pattern="* test.xmldef.FieldAdviceTest.s_setStaticFieldPreAdvice*"/>
            <pointcut-def name="pc12" type="setField" pattern="* test.xmldef.FieldAdviceTest.s_setStaticFieldPostAdviced"/>
            <pointcut-def name="pc13" type="setField" pattern="* test.xmldef.FieldAdviceTest.s_setStaticFieldPrePostAdviced"/>
            <pointcut-def name="pc14" type="getField" pattern="* test.xmldef.FieldAdviceTest.s_getStaticFieldPreAdvice*"/>
            <pointcut-def name="pc15" type="getField" pattern="* test.xmldef.FieldAdviceTest.s_getStaticFieldPreAdvic*"/>
            <pointcut-def name="pc16" type="getField" pattern="* test.xmldef.FieldAdviceTest.s_getStaticFieldPostAdviced"/>
            <pointcut-def name="pc17" type="getField" pattern="* test.xmldef.FieldAdviceTest.s_getStaticFieldPrePostAdviced"/>
            <bind-advice pointcut="pc1">
                <advice-ref name="preAdvice7"/>
            </bind-advice>
            <bind-advice pointcut="pc2">
                <advice-ref name="preAdvice6"/>
            </bind-advice>
            <bind-advice pointcut="pc3">
                <advice-ref name="postAdvice8"/>
            </bind-advice>
            <bind-advice pointcut="pc4">
                <advice-ref name="postAdvice5"/>
            </bind-advice>
            <bind-advice pointcut="pc5">
                <advice-ref name="preAdvice6"/>
                <advice-ref name="postAdvice6"/>
                <advice-ref name="preAdvice7"/>
                <advice-ref name="postAdvice7"/>
            </bind-advice>
            <bind-advice pointcut="pc6">
                <advice-ref name="preAdvice6"/>
            </bind-advice>
            <bind-advice pointcut="pc7">
                <advice-ref name="preAdvice7"/>
            </bind-advice>
            <bind-advice pointcut="pc8">
                <advice-ref name="postAdvice5"/>
                <advice-ref name="postAdvice8"/>
            </bind-advice>
            <bind-advice pointcut="pc9">
                <advice-ref name="preAdvice5"/>
                <advice-ref name="postAdvice5"/>
                <advice-ref name="preAdvice8"/>
                <advice-ref name="postAdvice8"/>
            </bind-advice>
            <bind-advice pointcut="pc10">
                <advice-ref name="preAdvice6"/>
            </bind-advice>
            <bind-advice pointcut="pc11">
                <advice-ref name="preAdvice7"/>
            </bind-advice>
            <bind-advice pointcut="pc12">
                <advice-ref name="postAdvice5"/>
                <advice-ref name="postAdvice8"/>
            </bind-advice>
            <bind-advice pointcut="pc13">
                <advice-ref name="preAdvice6"/>
                <advice-ref name="postAdvice6"/>
                <advice-ref name="preAdvice7"/>
                <advice-ref name="postAdvice7"/>
            </bind-advice>
            <bind-advice pointcut="pc14">
                <advice-ref name="preAdvice6"/>
            </bind-advice>
            <bind-advice pointcut="pc15">
                <advice-ref name="preAdvice7"/>
            </bind-advice>
            <bind-advice pointcut="pc16">
                <advice-ref name="postAdvice5"/>
                <advice-ref name="postAdvice8"/>
            </bind-advice>
            <bind-advice pointcut="pc17">
                <advice-ref name="preAdvice5"/>
                <advice-ref name="postAdvice5"/>
                <advice-ref name="preAdvice8"/>
                <advice-ref name="postAdvice8"/>
            </bind-advice>
        </aspect>

        <aspect name="ThrowsAdviceTest">
            <pointcut-def name="pc1" type="throws" pattern="* test.xmldef.ThrowsAdviceTest.throwsException()#java.lang.Exception"/>
            <pointcut-def name="pc2" type="throws" pattern="* test.xmldef.ThrowsAdviceTest.throwsRuntimeException()#java.lang.RuntimeException"/>
            <pointcut-def name="pc3" type="throws" pattern="* test.xmldef.ThrowsAdviceTest.throwsError()#java.lang.Error"/>
            <pointcut-def name="pc4" type="throws" pattern="* test.xmldef.ThrowsAdviceTest.getJoinPointMetaData()#java.lang.Error"/>
            <bind-advice pointcut="pc1">
                <advice-ref name="throwsAdvice1"/>
            </bind-advice>
            <bind-advice pointcut="pc2">
                <advice-ref name="throwsAdvice2"/>
            </bind-advice>
            <bind-advice pointcut="pc3">
                <advice-ref name="throwsAdvice3"/>
            </bind-advice>
            <bind-advice pointcut="pc4">
                <advice-ref name="throwsAdviceMetaData"/>
            </bind-advice>
        </aspect>

        <aspect name="CallerSideAdviceTest">
            <pointcut-def name="pc1" type="callerSide" pattern="test.xmldef.CallerSideAdviceTest->String test.xmldef.CallerSideTestHelper.invokeMemberMethodPre()"/>
            <pointcut-def name="pc2" type="callerSide" pattern="test.xmldef.CallerSideAdviceTest->String test.xmldef.CallerSideTestHelper.invokeMemberMethodPost()"/>
            <pointcut-def name="pc3" type="callerSide" pattern="test.xmldef.CallerSideAdviceTest->String test.xmldef.CallerSideTestHelper.invokeMemberMethodPrePost()"/>
            <pointcut-def name="pc4" type="callerSide" pattern="test.xmldef.CallerSideAdviceTest->String test.xmldef.CallerSideTestHelper.invokeStaticMethodPre()"/>
            <pointcut-def name="pc5" type="callerSide" pattern="test.xmldef.CallerSideAdviceTest->String test.xmldef.CallerSideTestHelper.invokeStaticMethodPost()"/>
            <pointcut-def name="pc6" type="callerSide" pattern="test.xmldef.CallerSideAdviceTest->String test.xmldef.CallerSideTestHelper.invokeStaticMethodPrePost()"/>
            <pointcut-def name="pc7" type="callerSide" pattern="test.xmldef.CallerSideAdviceTest->void test.xmldef.CallerSideTestHelper.passingParameterToAdviceMethod()"/>
            <bind-advice pointcut="pc1">
                <advice-ref name="preAdvice6"/>
                <advice-ref name="preAdvice7"/>
            </bind-advice>
            <bind-advice pointcut="pc2">
                <advice-ref name="postAdvice7"/>
                <advice-ref name="postAdvice6"/>
            </bind-advice>
            <bind-advice pointcut="pc3">
                <advices-ref name="advice_stack_test"/>
            </bind-advice>
            <bind-advice pointcut="pc4">
                <advice-ref name="preAdvice6"/>
                <advice-ref name="preAdvice7"/>
            </bind-advice>
            <bind-advice pointcut="pc5">
                <advice-ref name="postAdvice7"/>
                <advice-ref name="postAdvice6"/>
            </bind-advice>
            <bind-advice pointcut="pc6">
                <advices-ref name="advice_stack_test"/>
            </bind-advice>
            <bind-advice pointcut="pc7">
                <advice-ref name="preAdvice9"/>
            </bind-advice>
        </aspect>

        <package name="test.xmldef">
            <aspect name="ToBeIntroduced">
                <introduction class="ToBeIntroduced">
                    <introduction-ref name="serializable"/>
                    <introduction-ref name="introductions"/>
                </introduction>
            </aspect>
        </package>

        <aspect name="PerformanceTest">
            <bind-introduction class="test.xmldef.PerformanceTest">
                <introduction-ref name="introductionPerJVM"/>
                <introduction-ref name="introductionPerClass"/>
                <introduction-ref name="introductionPerInstance"/>
                <introduction-ref name="introductionPerThread"/>
            </bind-introduction>

            <pointcut name="noAdvice" type="method" pattern="* test.xmldef.PerformanceTest.methodAdvisedMethodNoAdvice()"/>
            <pointcut name="perJVM" type="method" pattern="* test.xmldef.PerformanceTest.methodAdvisedMethodPerJVM()"/>
            <pointcut name="perClass" type="method" pattern="* test.xmldef.PerformanceTest.methodAdvisedMethodPerClass()"/>
            <pointcut name="perInstance" type="method" pattern="* test.xmldef.PerformanceTest.methodAdvisedMethodPerInstance()"/>
            <pointcut name="perThread" type="method" pattern="* test.xmldef.PerformanceTest.methodAdvisedMethodPerThread()"/>
            <bind-advice pointcut="noAdvice"/>
            <bind-advice pointcut="perJVM">
                <advice-ref name="methodAdvicePerJVM"/>
            </bind-advice>
            <bind-advice pointcut="perClass">
                <advice-ref name="methodAdvicePerClass"/>
            </bind-advice>
            <bind-advice pointcut="perInstance">
                <advice-ref name="methodAdvicePerInstance"/>
            </bind-advice>
            <bind-advice pointcut="perThread">
                <advice-ref name="methodAdvicePerThread"/>
            </bind-advice>
        </aspect>

        <aspect name="CFlowTest">
            <pointcut-def name="step1" type="cflow" pattern="* test.xmldef.CFlowTest.step1()"/>
            <pointcut-def name="step2" type="method" pattern="* test.xmldef.CFlowTest.step2()"/>
            <bind-advice cflow="step1" pointcut="step2">
                <advice-ref name="cflowLogger"/>
            </bind-advice>
        </aspect>

        <aspect name="PointcutExpressionTest">
            <pointcut-def name="generic" type="method" pattern="* test.xmldef.PointcutExpressionTest.*(..)"/>
            <pointcut-def name="A" type="method" pattern="* test.xmldef.PointcutExpressionTest.A()"/>
            <pointcut-def name="B" type="method" pattern="* test.xmldef.PointcutExpressionTest.B()"/>
            <pointcut-def name="C" type="method" pattern="* test.xmldef.PointcutExpressionTest.C()"/>
            <pointcut-def name="D" type="method" pattern="* test.xmldef.PointcutExpressionTest.D()"/>
            <pointcut-def name="E" type="method" pattern="* test.xmldef.PointcutExpressionTest.E()"/>
            <pointcut-def name="F" type="method" pattern="* test.xmldef.PointcutExpressionTest.F()"/>
            <pointcut-def name="G" type="method" pattern="* test.xmldef.PointcutExpressionTest.G()"/>
            <pointcut-def name="H" type="method" pattern="* test.xmldef.PointcutExpressionTest.H()"/>
            <pointcut-def name="I" type="method" pattern="* test.xmldef.PointcutExpressionTest.I()"/>
            <pointcut-def name="J" type="method" pattern="* test.xmldef.PointcutExpressionTest.J()"/>
            <pointcut-def name="K" type="method" pattern="* test.xmldef.PointcutExpressionTest.K()"/>
            <pointcut-def name="L" type="method" pattern="* test.xmldef.PointcutExpressionTest.L()"/>
            <pointcut-def name="M" type="method" pattern="* test.xmldef.PointcutExpressionTest.M()"/>
            <pointcut-def name="N" type="method" pattern="* test.xmldef.PointcutExpressionTest.N()"/>
            <pointcut-def name="O" type="method" pattern="* test.xmldef.PointcutExpressionTest.O()"/>

            <bind-advice pointcut="B OR C">
                <advice-ref name="methodAdvice2"/>
            </bind-advice>
            <bind-advice pointcut="D AND !E">
                <advice-ref name="methodAdvice2"/>
            </bind-advice>

            <bind-advice pointcut="(F OR G) AND H">
                <advice-ref name="methodAdvice2"/>
            </bind-advice>

            <bind-advice pointcut="(I OR J) AND generic">
                <advice-ref name="methodAdvice2"/>
            </bind-advice>

            <bind-advice pointcut="!K AND !(L OR M) AND N">
                <advice-ref name="methodAdvice2"/>
            </bind-advice>

            <bind-advice pointcut="O">
                <advice-ref name="methodAdvice2"/>
            </bind-advice>

        </aspect>

        <aspect name="AbstractClassInstrumentationTest">
            <pointcut-def name="abstract" type="method" pattern="* test.xmldef.AbstractTarget.*(..)"/>
            <bind-advice pointcut="abstract">
                <advice-ref name="methodAdvice1"/>
            </bind-advice>
        </aspect>

        <aspect name="HierachicalPatternTest">
            <pointcut-def name="test1" type="method" pattern="* test.xmldef.DummyInterface1+.testMethod1(..)"/>
            <pointcut-def name="test2" type="method" pattern="* test.xmldef.DummyInterface2+.testMethod2(..)"/>
            <bind-advice pointcut="test1">
                <advice-ref name="methodAdvice2"/>
            </bind-advice>
            <bind-advice pointcut="test2">
                <advice-ref name="methodAdvice2"/>
            </bind-advice>
        </aspect>

        <aspect name="ReflectionTest">
            <pointcut-def name="test1_exclude" type="method" pattern="* test.xmldef.reflection.*2.*(..)"/>
            <pointcut-def name="test1" type="method" pattern="* test.xmldef.reflection.*.incr(..)"/>
            <pointcut-def name="test1Static" type="method" pattern="* test.xmldef.reflection.*.incrStatic(..)"/>

            <pointcut-def name="test2" type="method" pattern="* test.xmldef.reflection.Super2.incr(..)"/>
            <pointcut-def name="test2Static" type="method" pattern="* test.xmldef.reflection.Super2.incrStatic(..)"/>

            <pointcut-def name="test3" type="method" pattern="* test.xmldef.reflection.*.do*(..)"/>

            <bind-advice expression="test1 AND !test1_exclude">
                <advice-ref name="reflection_advice"/>
            </bind-advice>
            <bind-advice expression="test1Static AND !test1_exclude">
                <advice-ref name="reflection_advice"/>
            </bind-advice>
            <bind-advice pointcut="test2">
                <advice-ref name="reflection_advice"/>
            </bind-advice>
            <bind-advice pointcut="test2Static">
                <advice-ref name="reflection_advice"/>
            </bind-advice>
            <bind-advice pointcut="test3">
                <advice-ref name="reflection_advice"/>
            </bind-advice>
        </aspect>

        <!--
        <advice-def name="reentrant_advice" class="test.reentrant.MyAroundAdvice" deployment-model="perInstance" />
        <advice-def name="reentrant_advice2" class="test.reentrant.MyAroundAdviceStatic" deployment-model="perJVM" />
        <aspect name="ReentrantTest">
            <pointcut-def name="test1" type="method" pattern="* test.reentrant.*.addSpace(..)" non-reentrant="true" />
            <pointcut-def name="test11" type="method" pattern="* test.reentrant.*.addSpaceOther(..)" non-reentrant="false" />
            <bind-advice pointcut="test1 OR test11">
                <advice-ref name="reentrant_advice"/>
            </bind-advice>
            <pointcut-def name="test2" type="method" pattern="* test.reentrant.*.addSpaceStatic(..)" non-reentrant="true" />
            <bind-advice pointcut="test2">
                <advice-ref name="reentrant_advice2"/>
            </bind-advice>
        </aspect>
        -->

        <!-- ============================================= -->
        <!--  BindingSyntax testing -->
        <!--  The test validates XML ordering defines aspect/advice precedence -->
        <!--  for method pointcut -->
        <!-- ============================================= -->
        <advice-def name="BindingSyntax_1" class="test.xmldef.bindingsyntax.Prepend1Advice"/>
        <advice-def name="BindingSyntax_2" class="test.xmldef.bindingsyntax.Prepend2Advice"/>
        <!-- bindingsyntax : advice stack -->
        <advices-def name="BindingSyntaxA">
            <advice-ref name="BindingSyntax_1"/>
            <advice-ref name="BindingSyntax_2"/>
        </advices-def>
        <advices-def name="BindingSyntaxRA">
            <advice-ref name="BindingSyntax_2"/>
            <advice-ref name="BindingSyntax_1"/>
        </advices-def>
        <aspect name="BindingSyntaxA">
            <pointcut-def name="test" type="method" pattern="* test.xmldef.bindingsyntax.*.doA*(..)"/>
            <advice pointcut="test">
                <advices-ref name="BindingSyntaxA"/>
            </advice>
        </aspect>
        <aspect name="BindingSyntaxRA">
            <pointcut-def name="test" type="method" pattern="* test.xmldef.bindingsyntax.*.doRA*(..)"/>
            <advice pointcut="test">
                <advices-ref name="BindingSyntaxRA"/>
            </advice>
        </aspect>
        <!-- bindingsyntax : two advices bounded -->
        <aspect name="BindingSyntaxB">
            <pointcut-def name="test" type="method" pattern="* test.xmldef.bindingsyntax.*.doB*(..)"/>
            <advice pointcut="test">
                <advice-ref name="BindingSyntax_1"/>
                <advice-ref name="BindingSyntax_2"/>
            </advice>
        </aspect>
        <aspect name="BindingSyntaxRB">
            <pointcut-def name="test" type="method" pattern="* test.xmldef.bindingsyntax.*.doRB*(..)"/>
            <advice pointcut="test">
                <advice-ref name="BindingSyntax_2"/>
                <advice-ref name="BindingSyntax_1"/>
            </advice>
        </aspect>
        <!-- bindingsyntax : two advices bounded -->
        <aspect name="BindingSyntaxRB">
            <pointcut-def name="test" type="method" pattern="* test.xmldef.bindingsyntax.*.doRB*(..)"/>
            <advice pointcut="test">
                <advice-ref name="BindingSyntax_2"/>
                <advice-ref name="BindingSyntax_1"/>
            </advice>
        </aspect>
        <!-- bindingsyntax : two equivalent pointcuts, one advice bounded on each -->
        <!-- Note: the precedence is altered, since the first pointcut is completeted
             before applying the second pointcut
        -->
        <aspect name="BindingSyntaxC">
            <!-- the pointcut-def order has NO impact on precedence -->
            <pointcut-def name="test2" type="method" pattern="* test.xmldef.bindingsyntax.*.doC*(..)"/>
            <pointcut-def name="test" type="method" pattern="* test.xmldef.bindingsyntax.*.doC*(..)"/>
            <advice pointcut="test">
                <advice-ref name="BindingSyntax_1"/>
            </advice>
            <advice pointcut="test2"><!-- do not bind to pointcut "test" or it will be overided -->
                <advice-ref name="BindingSyntax_2"/>
            </advice>
        </aspect>
        <aspect name="BindingSyntaxRC">
            <pointcut-def name="test2" type="method" pattern="* test.xmldef.bindingsyntax.*.doRC*(..)"/>
            <pointcut-def name="test" type="method" pattern="* test.xmldef.bindingsyntax.*.doRC*(..)"/>
            <advice pointcut="test2">
                <advice-ref name="BindingSyntax_2"/>
            </advice>
            <advice pointcut="test">
                <advice-ref name="BindingSyntax_1"/>
            </advice>
        </aspect>
        <!--  bindingsyntax : two aspects -->
        <aspect name="BindingSyntaxD_1">
            <pointcut-def name="test" type="method" pattern="* test.xmldef.bindingsyntax.*.doD*(..)"/>
            <advice pointcut="test">
                <advice-ref name="BindingSyntax_1"/>
            </advice>
        </aspect>
        <aspect name="BindingSyntaxD_2">
            <pointcut-def name="test" type="method" pattern="* test.xmldef.bindingsyntax.*.doD*(..)"/>
            <advice pointcut="test">
                <advice-ref name="BindingSyntax_2"/>
            </advice>
        </aspect>
        <aspect name="BindingSyntaxRD_2">
            <pointcut-def name="test" type="method" pattern="* test.xmldef.bindingsyntax.*.doRD*(..)"/>
            <advice pointcut="test">
                <advice-ref name="BindingSyntax_2"/>
            </advice>
        </aspect>
        <aspect name="BindingSyntaxRD_1">
            <pointcut-def name="test" type="method" pattern="* test.xmldef.bindingsyntax.*.doRD*(..)"/>            <advice pointcut="test">
                <advice-ref name="BindingSyntax_1"/>
            </advice>
        </aspect>

        <!-- ============================================= -->
        <!--  Multi threading weaving thru several classloaders -->
        <!-- ============================================= -->
        <advice-def name="Clapp" class="test.xmldef.clapp.MyAroundAdvice" deployment-model="perInstance"/>
        <aspect name="Clapp">
            <pointcut-def name="test" type="method" pattern="* test.xmldef.clapp.Target.callme(..)"/>
            <bind-advice pointcut="test">
                <advice-ref name="Clapp"/>
            </bind-advice>
        </aspect>

        <aspect name="SuperClassConstructorBug">
            <pointcut-def name="pc" type="method" pattern="void test.xmldef.superclassconstructorbug.C+.set()"/>
            <bind-advice pointcut="pc">
                <advice-ref name="methodAdvice1"/>
            </bind-advice>
        </aspect>

        <!-- ============================================= -->
        <!-- AW-92 static field TF outside static context -->
        <!-- the advice tries to cast to the correct member / static member JP -->
        <!-- we do not check here that the advice is really executed -->
        <!-- ============================================= -->
        <advice-def name="staticField" class="test.xmldef.staticfield.MyPreAdvice1" />
        <advice-def name="memberField" class="test.xmldef.staticfield.MyPreAdvice2" />
        <aspect name="staticField">
            <pointcut-def name="pcSet" type="setField" pattern="* test.xmldef.staticfield.StaticFieldAdviceTest.s_field*"/>
            <pointcut-def name="pcSetMember" type="setField" pattern="* test.xmldef.staticfield.StaticFieldAdviceTest.m_field*"/>
            <bind-advice pointcut="pcSet">
                <advice-ref name="staticField"/>
            </bind-advice>
            <bind-advice pointcut="pcSetMember">
                <advice-ref name="memberField"/>
            </bind-advice>
        </aspect>
        <advice-def name="postStaticField" class="test.xmldef.staticfield.MyPostAdvice1" />
        <advice-def name="postMemberField" class="test.xmldef.staticfield.MyPostAdvice2" />
        <aspect name="collectionField">
            <pointcut-def name="pcSet" type="setField" pattern="* test.xmldef.staticfield.CollectionFieldTest.s_field"/>
            <pointcut-def name="pcSetMember" type="setField" pattern="* test.xmldef.staticfield.CollectionFieldTest.m_field"/>
            <pointcut-def name="pcGet" type="getField" pattern="* test.xmldef.staticfield.CollectionFieldTest.s_field"/>
            <pointcut-def name="pcGetMember" type="getField" pattern="* test.xmldef.staticfield.CollectionFieldTest.m_field"/>
            <!-- check correct JP no matter the context and advice execution -->
            <bind-advice pointcut="pcSet">
                <advice-ref name="staticField"/>
            </bind-advice>
            <bind-advice pointcut="pcSetMember">
                <advice-ref name="memberField"/>
            </bind-advice>
            <!-- check advice execution -->
            <bind-advice pointcut="pcGet">
                <advice-ref name="postStaticField"/>
            </bind-advice>
            <bind-advice pointcut="pcGetMember">
                <advice-ref name="postMemberField"/>
            </bind-advice>
        </aspect>

        <advice-def name="memUsage" class="test.xmldef.memusage.MyAroundAdvice"/>
        <aspect name="memUsage">
            <pointcut-def name="pcHello" type="method" pattern="* test.xmldef.memusage.Hello+.sayHello(..)"/>
            <bind-advice pointcut="pcHello">
                <advice-ref name="memUsage"/>
            </bind-advice>
        </aspect>

    </system>

</aspectwerkz>
