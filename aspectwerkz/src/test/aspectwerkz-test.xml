<?xml version="1.0"?>

<aspectwerkz id="tests">

<!--    <transformation-scope package="test"/>-->

    <!-- ============================================= -->
    <!--  Define the introductions                     -->
    <!-- ============================================= -->
    <package name="test">
        <introduction-def name="introductionPerJVM" interface="PerJVM" implementation="PerJVMImpl" deployment-model="perJVM"/>
        <introduction-def name="introductionPerInstance" interface="PerInstance" implementation="PerInstanceImpl" deployment-model="perInstance"/>
        <introduction-def name="introductionPerClass" interface="PerClass" implementation="PerClassImpl" deployment-model="perClass"/>
        <introduction-def name="introductionPerThread" interface="PerThread" implementation="PerThreadImpl" deployment-model="perThread"/>
        <introduction-def name="introductions" interface="Introductions" implementation="IntroductionsImpl" deployment-model="perJVM"/>
        <introduction-def name="introductionReplacement" interface="Introductions" implementation="IntroductionsImpl" deployment-model="perJVM"/>
    </package>
    <introduction-def name="serializable" interface="java.io.Serializable"/>

    <!-- ============================================= -->
    <!--  Define the advices                           -->
    <!-- ============================================= -->
    <package name="test">
        <advice-def name="cflowLogger" class="CFlowLoggingAdvice" deployment-model="perJVM"/>
        <advice-def name="methodAdvicePerJVM" class="MyMemberMethodAdvice1" deployment-model="perJVM"/>
        <advice-def name="methodAdvicePerClass" class="MyMemberMethodAdvice1" deployment-model="perClass"/>
        <advice-def name="methodAdvicePerInstance" class="MyMemberMethodAdvice1" deployment-model="perInstance"/>
        <advice-def name="methodAdvicePerThread" class="MyMemberMethodAdvice1" deployment-model="perThread"/>
        <advice-def name="methodAdvice1" class="MyMemberMethodAdvice1" deployment-model="perJVM"/>
        <advice-def name="methodAdvice2" class="MyMemberMethodAdvice2" deployment-model="perClass"/>
        <advice-def name="methodAdvice3" class="MyMemberMethodAdvice3" deployment-model="perInstance"/>
        <advice-def name="methodAdvice4" class="MyMemberMethodAdvice4" deployment-model="perThread"/>
        <advice-def name="methodAdvice5" class="MyMemberMethodAdvice5" deployment-model="perJVM"/>
        <advice-def name="methodAdvice7" class="MyMemberMethodAdvice7" deployment-model="perJVM"/>
        <advice-def name="staticMethodAdvice1" class="MyMemberMethodAdvice1" deployment-model="perJVM"/>
        <advice-def name="staticMethodAdvice2" class="MyStaticMethodAdvice2" deployment-model="perClass"/>
        <advice-def name="staticMethodAdvice3" class="MyStaticMethodAdvice3" deployment-model="perJVM"/>
        <advice-def name="staticMethodAdvice4" class="MyStaticMethodAdvice4" deployment-model="perThread"/>
        <advice-def name="staticMethodAdvice5" class="MyStaticMethodAdvice5" deployment-model="perJVM"/>
        <advice-def name="methodAdvicePerJVM" class="MyMemberMethodAdvice1" deployment-model="perJVM"/>
        <advice-def name="methodAdvicePerClass" class="MyMemberMethodAdvice1" deployment-model="perClass"/>
        <advice-def name="methodAdvicePerInstance" class="MyMemberMethodAdvice1" deployment-model="perInstance"/>
        <advice-def name="methodAdvicePerThread" class="MyMemberMethodAdvice1" deployment-model="perThread"/>
        <advice-def name="singleMethodAdvice" class="SimpleMethodAdvice" deployment-model="perJVM"/>
        <advice-def name="throwsAdvice1" class="MyThrowsAdvice1" deployment-model="perJVM"/>
        <advice-def name="throwsAdvice2" class="MyThrowsAdvice1" deployment-model="perClass"/>
        <advice-def name="throwsAdvice3" class="MyThrowsAdvice1" deployment-model="perInstance"/>
        <advice-def name="throwsAdvice4" class="MyThrowsAdvice1" deployment-model="perThread"/>
        <advice-def name="throwsAdviceMetaData" class="MyThrowsAdvice2" deployment-model="perJVM"/>
        <advice-def name="preAdvice1" class="MyPreAdvice1" deployment-model="perJVM"/>
        <advice-def name="preAdvice2" class="MyPreAdvice1" deployment-model="perInstance"/>
        <advice-def name="preAdvice3" class="MyPreAdvice1" deployment-model="perClass"/>
        <advice-def name="preAdvice4" class="MyPreAdvice1" deployment-model="perThread"/>
        <advice-def name="preAdvice5" class="MyPreAdvice2" deployment-model="perJVM"/>
        <advice-def name="preAdvice6" class="MyPreAdvice2" deployment-model="perClass"/>
        <advice-def name="preAdvice7" class="MyPreAdvice3" deployment-model="perThread"/>
        <advice-def name="preAdvice8" class="MyPreAdvice3" deployment-model="perInstance"/>
        <advice-def name="postAdvice1" class="MyPostAdvice1"/>
        <advice-def name="postAdvice2" class="MyPostAdvice1" deployment-model="perInstance"/>
        <advice-def name="postAdvice3" class="MyPostAdvice1" deployment-model="perClass"/>
        <advice-def name="postAdvice4" class="MyPostAdvice1" deployment-model="perThread"/>
        <advice-def name="postAdvice5" class="MyPostAdvice2" deployment-model="perJVM"/>
        <advice-def name="postAdvice6" class="MyPostAdvice2" deployment-model="perClass"/>
        <advice-def name="postAdvice7" class="MyPostAdvice3" deployment-model="perThread"/>
        <advice-def name="postAdvice8" class="MyPostAdvice3" deployment-model="perInstance"/>
        <advice-def name="methodAdvice6" class="MyMemberMethodAdvice6" deployment-model="perJVM">
            <param name="test" value="test_value"/>
        </advice-def>
        <advice-def name="preAdvice9" class="MyPreAdvice4" deployment-model="perJVM">
            <param name="test" value="test_value"/>
        </advice-def>
        <advices-def name="advice_stack_test">
            <advice-ref name="preAdvice6"/>
            <advice-ref name="preAdvice7"/>
            <advice-ref name="postAdvice7"/>
            <advice-ref name="postAdvice6"/>
        </advices-def>
        <advice-def name="reflection_advice" class="reflection.ReverseAdvice"/>
    </package>

    <!-- ============================================= -->
    <!--  Define the aspects                           -->
    <!-- ============================================= -->
    <package name="test.*">
        <aspect name="MemberMethodAdviceTest">
            <pointcut-def name="pc1" type="method" pattern="* MemberMethodAdviceTest.get*(..)"/>
            <pointcut-def name="pc2" type="method" pattern="* MemberMethodAdviceTest.*Param**(..)"/>
            <pointcut-def name="pc3" type="method" pattern="* MemberMethodAdviceTest.testThrowException(..)"/>
            <pointcut-def name="pc4" type="method" pattern="* MemberMethodAdviceTest.methodAdvicedMethod(..)"/>
            <pointcut-def name="pc5" type="method" pattern="* MemberMethodAdviceTest.meth*AdvicedMethod(..)"/>
            <pointcut-def name="pc6" type="method" pattern="* MemberMethodAdviceTest.method*icedMethodNewThread(..)"/>
            <pointcut-def name="pc7" type="method" pattern="* MemberMethodAdviceTest.method*dvicedMethodNewThread(..)"/>
            <pointcut-def name="pc8" type="method" pattern="* MemberMethodAdviceTest.multipleMethodAdvicedMethod(..)"/>
            <pointcut-def name="pc9" type="method" pattern="* MemberMethodAdviceTest.multipleChainedMethodAdvicedMethod(..)"/>
            <pointcut-def name="pc10" type="method" pattern="* MemberMethodAdviceTest.joinPointMetaData(..)"/>
            <pointcut-def name="pc11" type="method" pattern="void MemberMethodAdviceTest.passingParameterToAdviceMethod(..)"/>
            <pointcut-def name="pc12" type="method" pattern="void MemberMethodAdviceTest.multiplePointcutsMethod(..)"/>
            <pointcut-def name="pc13" type="method" pattern="void MemberMethodAdviceTest.multiplePointcutsMethod(..)"/>
            <pointcut-def name="pc14" type="method" pattern="* MemberMethodAdviceTest.takesArrayAsArgument(String[])"/>
            <bind-advice pointcut="pc1 OR pc2 OR pc3 OR pc4 OR pc14">
                <advice-ref name="methodAdvice1"/>
            </bind-advice>
            <bind-advice pointcut="pc5">
                <advice-ref name="methodAdvice2"/>
            </bind-advice>
            <bind-advice pointcut="pc6">
                <advice-ref name="methodAdvice5"/>
            </bind-advice>
            <bind-advice pointcut="pc7">
                <advice-ref name="methodAdvice5"/>
            </bind-advice>
            <bind-advice pointcut="pc8">
                <advice-ref name="methodAdvice2"/>
                <advice-ref name="methodAdvice3"/>
                <advice-ref name="methodAdvice3"/>
            </bind-advice>
            <bind-advice pointcut="pc9">
                <advice-ref name="methodAdvice1"/>
                <advice-ref name="methodAdvice2"/>
                <advice-ref name="methodAdvice3"/>
            </bind-advice>
            <bind-advice pointcut="pc10">
                <advice-ref name="methodAdvice4"/>
            </bind-advice>
            <bind-advice pointcut="pc11">
                <advice-ref name="methodAdvice6"/>
            </bind-advice>
            <bind-advice pointcut="pc12">
                <advice-ref name="methodAdvice2"/>
                <advice-ref name="methodAdvice2"/>
            </bind-advice>
            <bind-advice pointcut="pc13">
                <advice-ref name="methodAdvice3"/>
                <advice-ref name="methodAdvice3"/>
            </bind-advice>
        </aspect>
    </package>

    <aspect name="StaticMethodAdviceTest">
        <pointcut-def name="pc1" type="method" pattern="* test.StaticMethodAdviceTest.get*(..)"/>
        <pointcut-def name="pc2" type="method" pattern="* test.StaticMethodAdviceTest.*Param*(..)"/>
        <pointcut-def name="pc3" type="throws" pattern="* test.StaticMethodAdviceTest.exceptionThrower(..)#java.lang.UnsupportedOperationException"/>
        <pointcut-def name="pc4" type="method" pattern="void test.StaticMethodAdviceTest.methodAdvicedMethod(..)"/>
        <pointcut-def name="pc5" type="method" pattern="* test.StaticMethodAdviceTest.methodAdvicedMethod(..)"/>
        <pointcut-def name="pc6" type="method" pattern="* test.StaticMethodAdviceTest.methodAdvicedMethodNewThread(..)"/>
        <pointcut-def name="pc7" type="method" pattern="* test.StaticMethodAdviceTest.multipleMethodAdvicedMethod(..)"/>
        <pointcut-def name="pc8" type="method" pattern="* test.StaticMethodAdviceTest.multipleChainedMethodAdvicedMethod(..)"/>
        <pointcut-def name="pc9" type="method" pattern="* test.StaticMethodAdviceTest.joinPointMetaData(..)"/>
        <pointcut-def name="pc10" type="method" pattern="void test.StaticMethodAdviceTest.multiplePointcutsMethod(..)"/>
        <pointcut-def name="pc11" type="method" pattern="void test.StaticMethodAdviceTest.multiplePointcutsMethod(..)"/>
        <pointcut-def name="pc12" type="method" pattern="* test.StaticMethodAdviceTest.takesArrayAsArgument(String[])"/>
        <bind-advice pointcut="pc1">
            <advice-ref name="staticMethodAdvice1"/>
        </bind-advice>
        <bind-advice pointcut="pc2">
            <advice-ref name="staticMethodAdvice1"/>
        </bind-advice>
        <bind-advice pointcut="pc3">
            <advice-ref name="throwsAdvice1"/>
        </bind-advice>
        <bind-advice pointcut="pc4">
            <advice-ref name="staticMethodAdvice2"/>
        </bind-advice>
        <bind-advice pointcut="pc5">
            <advice-ref name="staticMethodAdvice1"/>
        </bind-advice>
        <bind-advice pointcut="pc6">
            <advice-ref name="staticMethodAdvice5"/>
            <advice-ref name="staticMethodAdvice5"/>
        </bind-advice>
        <bind-advice pointcut="pc7">
            <advice-ref name="staticMethodAdvice2"/>
            <advice-ref name="staticMethodAdvice3"/>
            <advice-ref name="staticMethodAdvice3"/>
        </bind-advice>
        <bind-advice pointcut="pc8">
            <advice-ref name="staticMethodAdvice1"/>
            <advice-ref name="staticMethodAdvice2"/>
            <advice-ref name="staticMethodAdvice3"/>
        </bind-advice>
        <bind-advice pointcut="pc9">
            <advice-ref name="staticMethodAdvice4"/>
        </bind-advice>
        <bind-advice pointcut="pc10">
            <advice-ref name="staticMethodAdvice2"/>
            <advice-ref name="staticMethodAdvice2"/>
        </bind-advice>
        <bind-advice pointcut="pc11">
            <advice-ref name="staticMethodAdvice3"/>
            <advice-ref name="staticMethodAdvice3"/>
        </bind-advice>
        <bind-advice pointcut="pc12">
            <advice-ref name="staticMethodAdvice1"/>
        </bind-advice>
    </aspect>

    <aspect name="DynamicDeploymentTest">
        <pointcut-def name="pc1" type="method" pattern="* test.DynamicDeploymentTest.reorderAdvicesTestMethod(..)"/>
        <pointcut-def name="pc2" type="method" pattern="* test.DynamicDeploymentTest.removeAdviceTestMethod(..)"/>
        <pointcut-def name="pc3" type="method" pattern="* test.DynamicDeploymentTest.addAdviceTestMethod(..)"/>
        <pointcut-def name="pc4" type="method" pattern="* test.DynamicDeploymentTest.createTransientAdviceTestMethod(..)"/>
        <pointcut-def name="pc5" type="method" pattern="* test.DynamicDeploymentTest.createPersistentAdviceTestMethod(..)"/>
        <bind-advice pointcut="pc1 OR pc2">
            <advice-ref name="methodAdvice2"/>
            <advice-ref name="methodAdvice3"/>
            <advice-ref name="methodAdvice3"/>
        </bind-advice>
        <bind-advice pointcut="pc3">
            <advice-ref name="methodAdvice2"/>
        </bind-advice>
        <bind-advice pointcut="pc4"/>
        <bind-advice pointcut="pc5"/>
    </aspect>

    <aspect name="FieldAdviceTest">
        <pointcut-def name="pc1" type="setField" pattern="* test.FieldAdviceTest.m_setFieldPreAdvice*"/>
        <pointcut-def name="pc2" type="setField" pattern="int test.FieldAdviceTest.m_setFieldPreAdvi*"/>
        <pointcut-def name="pc3" type="setField" pattern="* test.FieldAdviceTest.m_setFie*dPostAdviced"/>
        <pointcut-def name="pc4" type="setField" pattern="* test.FieldAdviceTest.m_se*FieldPostAdviced"/>
        <pointcut-def name="pc5" type="setField" pattern="* test.FieldAdviceTest.m_setFieldPrePostAdviced"/>
        <pointcut-def name="pc6" type="getField" pattern="* test.FieldAdviceTest.m_getFieldPreAdvic*"/>
        <pointcut-def name="pc7" type="getField" pattern="* test.FieldAdviceTest.m_getFieldPreAdvice*"/>
        <pointcut-def name="pc8" type="getField" pattern="* test.FieldAdviceTest.m_getFieldPostAdviced"/>
        <pointcut-def name="pc9" type="getField" pattern="* test.FieldAdviceTest.m_getFieldPrePostAdviced"/>
        <pointcut-def name="pc10" type="setField" pattern="* test.FieldAdviceTest.s_setStaticFieldPreAdvic*"/>
        <pointcut-def name="pc11" type="setField" pattern="* test.FieldAdviceTest.s_setStaticFieldPreAdvice*"/>
        <pointcut-def name="pc12" type="setField" pattern="* test.FieldAdviceTest.s_setStaticFieldPostAdviced"/>
        <pointcut-def name="pc13" type="setField" pattern="* test.FieldAdviceTest.s_setStaticFieldPrePostAdviced"/>
        <pointcut-def name="pc14" type="getField" pattern="* test.FieldAdviceTest.s_getStaticFieldPreAdvice*"/>
        <pointcut-def name="pc15" type="getField" pattern="* test.FieldAdviceTest.s_getStaticFieldPreAdvic*"/>
        <pointcut-def name="pc16" type="getField" pattern="* test.FieldAdviceTest.s_getStaticFieldPostAdviced"/>
        <pointcut-def name="pc17" type="getField" pattern="* test.FieldAdviceTest.s_getStaticFieldPrePostAdviced"/>
        <bind-advice pointcut="pc1">
            <advice-ref name="preAdvice7"/>
        </bind-advice>
        <bind-advice pointcut="pc2">
            <advice-ref name="preAdvice6"/>
        </bind-advice>
        <bind-advice pointcut="pc3">
            <advice-ref name="postAdvice8"/>
        </bind-advice>
        <bind-advice pointcut="pc4">
            <advice-ref name="postAdvice5"/>
        </bind-advice>
        <bind-advice pointcut="pc5">
            <advice-ref name="preAdvice6"/>
            <advice-ref name="postAdvice6"/>
            <advice-ref name="preAdvice7"/>
            <advice-ref name="postAdvice7"/>
        </bind-advice>
        <bind-advice pointcut="pc6">
            <advice-ref name="preAdvice6"/>
        </bind-advice>
        <bind-advice pointcut="pc7">
            <advice-ref name="preAdvice7"/>
        </bind-advice>
        <bind-advice pointcut="pc8">
            <advice-ref name="postAdvice5"/>
            <advice-ref name="postAdvice8"/>
        </bind-advice>
        <bind-advice pointcut="pc9">
            <advice-ref name="preAdvice5"/>
            <advice-ref name="postAdvice5"/>
            <advice-ref name="preAdvice8"/>
            <advice-ref name="postAdvice8"/>
        </bind-advice>
        <bind-advice pointcut="pc10">
            <advice-ref name="preAdvice6"/>
        </bind-advice>
        <bind-advice pointcut="pc11">
            <advice-ref name="preAdvice7"/>
        </bind-advice>
        <bind-advice pointcut="pc12">
            <advice-ref name="postAdvice5"/>
            <advice-ref name="postAdvice8"/>
        </bind-advice>
        <bind-advice pointcut="pc13">
            <advice-ref name="preAdvice6"/>
            <advice-ref name="postAdvice6"/>
            <advice-ref name="preAdvice7"/>
            <advice-ref name="postAdvice7"/>
        </bind-advice>
        <bind-advice pointcut="pc14">
            <advice-ref name="preAdvice6"/>
        </bind-advice>
        <bind-advice pointcut="pc15">
            <advice-ref name="preAdvice7"/>
        </bind-advice>
        <bind-advice pointcut="pc16">
            <advice-ref name="postAdvice5"/>
            <advice-ref name="postAdvice8"/>
        </bind-advice>
        <bind-advice pointcut="pc17">
            <advice-ref name="preAdvice5"/>
            <advice-ref name="postAdvice5"/>
            <advice-ref name="preAdvice8"/>
            <advice-ref name="postAdvice8"/>
        </bind-advice>
    </aspect>

    <aspect name="ThrowsAdviceTest">
        <pointcut-def name="pc1" type="throws" pattern="* test.ThrowsAdviceTest.throwsException()#java.lang.Exception"/>
        <pointcut-def name="pc2" type="throws" pattern="* test.ThrowsAdviceTest.throwsRuntimeException()#java.lang.RuntimeException"/>
        <pointcut-def name="pc3" type="throws" pattern="* test.ThrowsAdviceTest.throwsError()#java.lang.Error"/>
        <pointcut-def name="pc4" type="throws" pattern="* test.ThrowsAdviceTest.getJoinPointMetaData()#java.lang.Error"/>
        <bind-advice pointcut="pc1">
            <advice-ref name="throwsAdvice1"/>
        </bind-advice>
        <bind-advice pointcut="pc2">
            <advice-ref name="throwsAdvice2"/>
        </bind-advice>
        <bind-advice pointcut="pc3">
            <advice-ref name="throwsAdvice3"/>
        </bind-advice>
        <bind-advice pointcut="pc4">
            <advice-ref name="throwsAdviceMetaData"/>
        </bind-advice>
    </aspect>

    <aspect name="CallerSideAdviceTest">
        <pointcut-def name="pc1" type="callerSide" pattern="test.CallerSideAdviceTest->String test.CallerSideTestHelper.invokeMemberMethodPre()"/>
        <pointcut-def name="pc2" type="callerSide" pattern="test.CallerSideAdviceTest->String test.CallerSideTestHelper.invokeMemberMethodPost()"/>
        <pointcut-def name="pc3" type="callerSide" pattern="test.CallerSideAdviceTest->String test.CallerSideTestHelper.invokeMemberMethodPrePost()"/>
        <pointcut-def name="pc4" type="callerSide" pattern="test.CallerSideAdviceTest->String test.CallerSideTestHelper.invokeStaticMethodPre()"/>
        <pointcut-def name="pc5" type="callerSide" pattern="test.CallerSideAdviceTest->String test.CallerSideTestHelper.invokeStaticMethodPost()"/>
        <pointcut-def name="pc6" type="callerSide" pattern="test.CallerSideAdviceTest->String test.CallerSideTestHelper.invokeStaticMethodPrePost()"/>
        <pointcut-def name="pc7" type="callerSide" pattern="test.CallerSideAdviceTest->void test.CallerSideTestHelper.passingParameterToAdviceMethod()"/>
        <bind-advice pointcut="pc1">
            <advice-ref name="preAdvice6"/>
            <advice-ref name="preAdvice7"/>
        </bind-advice>
        <bind-advice pointcut="pc2">
            <advice-ref name="postAdvice7"/>
            <advice-ref name="postAdvice6"/>
        </bind-advice>
        <bind-advice pointcut="pc3">
            <advices-ref name="advice_stack_test"/>
        </bind-advice>
        <bind-advice pointcut="pc4">
            <advice-ref name="preAdvice6"/>
            <advice-ref name="preAdvice7"/>
        </bind-advice>
        <bind-advice pointcut="pc5">
            <advice-ref name="postAdvice7"/>
            <advice-ref name="postAdvice6"/>
        </bind-advice>
        <bind-advice pointcut="pc6">
            <advices-ref name="advice_stack_test"/>
        </bind-advice>
        <bind-advice pointcut="pc7">
            <advice-ref name="preAdvice9"/>
        </bind-advice>
    </aspect>

    <package name="test">
        <aspect name="ToBeIntroduced">
            <introduction class="ToBeIntroduced">
                <introduction-ref name="serializable"/>
                <introduction-ref name="introductions"/>
            </introduction>
        </aspect>
    </package>

    <aspect name="PerformanceTest">
        <bind-introduction class="test.PerformanceTest">
            <introduction-ref name="introductionPerJVM"/>
            <introduction-ref name="introductionPerClass"/>
            <introduction-ref name="introductionPerInstance"/>
            <introduction-ref name="introductionPerThread"/>
        </bind-introduction>

        <pointcut name="noAdvice" type="method" pattern="* test.PerformanceTest.methodAdvisedMethodNoAdvice()"/>
        <pointcut name="perJVM" type="method" pattern="* test.PerformanceTest.methodAdvisedMethodPerJVM()"/>
        <pointcut name="perClass" type="method" pattern="* test.PerformanceTest.methodAdvisedMethodPerClass()"/>
        <pointcut name="perInstance" type="method" pattern="* test.PerformanceTest.methodAdvisedMethodPerInstance()"/>
        <pointcut name="perThread" type="method" pattern="* test.PerformanceTest.methodAdvisedMethodPerThread()"/>
        <bind-advice pointcut="noAdvice"/>
        <bind-advice pointcut="perJVM">
            <advice-ref name="methodAdvicePerJVM"/>
        </bind-advice>
        <bind-advice pointcut="perClass">
            <advice-ref name="methodAdvicePerClass"/>
        </bind-advice>
        <bind-advice pointcut="perInstance">
            <advice-ref name="methodAdvicePerInstance"/>
        </bind-advice>
        <bind-advice pointcut="perThread">
            <advice-ref name="methodAdvicePerThread"/>
        </bind-advice>
    </aspect>

    <aspect name="CFlowTest">
        <pointcut-def name="step1" type="cflow" pattern="* test.CFlowTest.step1()"/>
        <pointcut-def name="step2" type="method" pattern="* test.CFlowTest.step2()"/>
        <bind-advice cflow="step1" pointcut="step2">
            <advice-ref name="cflowLogger"/>
        </bind-advice>
    </aspect>

    <aspect name="PointcutExpressionTest">
        <pointcut-def name="generic" type="method" pattern="* test.PointcutExpressionTest.*(..)"/>
        <pointcut-def name="A" type="method" pattern="* test.PointcutExpressionTest.A()"/>
        <pointcut-def name="B" type="method" pattern="* test.PointcutExpressionTest.B()"/>
        <pointcut-def name="C" type="method" pattern="* test.PointcutExpressionTest.C()"/>
        <pointcut-def name="D" type="method" pattern="* test.PointcutExpressionTest.D()"/>
        <pointcut-def name="E" type="method" pattern="* test.PointcutExpressionTest.E()"/>
        <pointcut-def name="F" type="method" pattern="* test.PointcutExpressionTest.F()"/>
        <pointcut-def name="G" type="method" pattern="* test.PointcutExpressionTest.G()"/>
        <pointcut-def name="H" type="method" pattern="* test.PointcutExpressionTest.H()"/>
        <pointcut-def name="I" type="method" pattern="* test.PointcutExpressionTest.I()"/>
        <pointcut-def name="J" type="method" pattern="* test.PointcutExpressionTest.J()"/>
        <pointcut-def name="K" type="method" pattern="* test.PointcutExpressionTest.K()"/>
        <pointcut-def name="L" type="method" pattern="* test.PointcutExpressionTest.L()"/>
        <pointcut-def name="M" type="method" pattern="* test.PointcutExpressionTest.M()"/>
        <pointcut-def name="N" type="method" pattern="* test.PointcutExpressionTest.N()"/>
        <pointcut-def name="O" type="method" pattern="* test.PointcutExpressionTest.O()"/>

        <bind-advice pointcut="B OR C">
            <advice-ref name="methodAdvice2"/>
        </bind-advice>
        <bind-advice pointcut="D AND !E">
            <advice-ref name="methodAdvice2"/>
        </bind-advice>

        <bind-advice pointcut="(F OR G) AND H">
            <advice-ref name="methodAdvice2"/>
        </bind-advice>

        <bind-advice pointcut="(I OR J) AND generic">
            <advice-ref name="methodAdvice2"/>
        </bind-advice>

        <bind-advice pointcut="!K AND !(L OR M) AND N">
            <advice-ref name="methodAdvice2"/>
        </bind-advice>

        <bind-advice pointcut="O">
            <advice-ref name="methodAdvice2"/>
        </bind-advice>

    </aspect>

    <aspect name="AbstractClassInstrumentationTest">
        <pointcut-def name="abstract" type="method" pattern="* test.AbstractTarget.*(..)"/>
        <bind-advice pointcut="abstract">
            <advice-ref name="methodAdvice1"/>
        </bind-advice>
    </aspect>

    <aspect name="HierachicalPatternTest">
        <pointcut-def name="test1" type="method" pattern="* test.DummyInterface1+.testMethod1(..)"/>
        <pointcut-def name="test2" type="method" pattern="* test.DummyInterface2+.testMethod2(..)"/>
        <bind-advice pointcut="test1">
            <advice-ref name="methodAdvice2"/>
        </bind-advice>
        <bind-advice pointcut="test2">
            <advice-ref name="methodAdvice2"/>
        </bind-advice>
    </aspect>

    <aspect name="ReflectionTest">
        <pointcut-def name="test1" type="method" pattern="* test.reflection.*.incr(..)"/>
        <bind-advice pointcut="test1">
            <advice-ref name="reflection_advice"/>
        </bind-advice>
    </aspect>

</aspectwerkz>
