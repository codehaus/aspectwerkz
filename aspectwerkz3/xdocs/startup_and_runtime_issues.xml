<?xml version="1.0"?>
<document>
    <properties>
        <author email="jboner at codehaus dot org">jonas bon&#233;r</author>
        <author email="alex at gnilux dot com">Alexandre Vasseur</author>
        <title>Integration schemes</title>
    </properties>
    <body>
        <section name="Table of Contents">
            <p>
                <ol>
                    <li>
                        <a href="#Introduction">Introduction</a>
                    </li>
                    <li>
                        <a href="#Handling several Aspects across several deployed applications">Handling several Aspects across several deployed applications</a>
                    </li>
                    <!--                    <li>-->
                    <!--                        <a href="#Hot deployment and reconfiguration">Hot deployment and reconfiguration</a>-->
                    <!--                    </li>-->
                    <li>
                        <a href="#Offline weaving">Offline weaving (post compilation of the application)</a>
                    </li>
                    <li>
                        <a href="#Class load time weaving">Class load time weaving (online weaving, at deployment time)</a>
                    </li>
                    <li>
                        <a href="#AspectWerkz command line tool">AspectWerkz command line tool</a>
                    </li>
                    <li>
                        <a href="#Remote Proxy Server - RPC mechanism">Remote Proxy Server - RPC mechanism</a>
                    </li>
                    <li>
                        <a href="Examples">Examples</a>
                        <ul>
                            <li><a href="#WebLogic Server and BEA JRockit integration">WebLogic Server and BEA JRockit integration</a></li>
                            <li><a href="#WebLogic Server domain wizards">WebLogic Server domain wizards</a></li>
                            <li><a href="#Tomcat">Tomcat</a></li>
                            <li><a href="#JBoss">JBoss</a></li>
                            <li><a href="#Apache Geronimo">Apache Geronimo</a></li>
                            <li><a href="ide_integration.html">IDE integration</a></li>                            
                        </ul>
                    </li>
                </ol>
            </p>
        </section>
        <section name="Startup and transformation issues">
            <p>
                <code>AspectWerkz</code> support three different ways of
                transforming your code. All of these are managed using the
                command line tool
                <code>aspectwerkz</code> which resides in
                the
                <code>ASPECTWERKZ_HOME/bin</code> directory.
            </p>
            <subsection name="The aspectwerkz command line tool">
                <p>
                    When you start up your application using the
                    <code>aspectwerkz</code>
                    command line tool instead of using the
                    <code>java</code>
                    command,
                    <code>AspectWerkz</code> will intercept the normal
                    class loading mechanism and be able to transform classes
                    loaded by
                    <b>any</b> class loader except the bootstrap class
                    loader.
                    <br/>
                    The command line tool is one of the several ways to enable on the fly weaving.
                    For a complete description read the
                    <a href="online.html">online architecture</a> section.
                    <br/>
                    The command line tool also allows for offline post-processing of classes.
                </p>
                <p>
                    The
                    <code>aspectwerkz</code> program assumes that both the
                    <code>ASPECTWERKZ_HOME</code> and
                    <code>JAVA_HOME</code>
                    enviromental variables are set.
                </p>
                <p>
                    The options are:
                    <ul>
                        <li>
                            Starting up an application:
                            <br/>
                            <code>aspectwerkz [-options] &lt;main class&gt; [args...]</code>
                        </li>
                        <br/>
                        <li>
                            Starting up an application using an executable jar file:
                            <br/>
                            <code>aspectwerkz [-options] -jar &lt;jar file&gt; [args...]</code>
                        </li>
                        <br/>
                        <li>
                            Post-process all class files in a specific directory
                            (recursively), jar or zip file:
                            <br/>
                            <code>aspectwerkz -offline &lt;definition file&gt; [-verbose] [-verify] [-haltOnError] [-cp &lt;classpath&gt;]* &lt;target classes to transform&gt;+</code>
                            <p/>
                            The 'definition file' option is the path to the
                            definition file.
                            <p/>
                            Turns on
                            <code>-verbose</code> to follow each step of the processing.
                            <p/>
                            Turns on
                            <code>-verify</code> to verify all weaved class according to the Java Class Format specification. Note that this can slow down the processing.
                            <p/>
                            When an error occurs, all classes of the current target are restored to their initilal state and
                            the processing goes on with the next target unless -haltOnError was set.
                            In this case the processing stops. Else a complete status about successfull and failed targets is printed at the end of all target processing.
                            <p/>
                            The 'classpath' option is the classpath needed for
                            compilation but not to be transformed (eg
                            <code>-cp myAspects.jar;servletAPI.jar</code>). It is possible to use several
                            <code>-cp &lt;classpath&gt;</code> option instead of doing concatenation.
                            <p/>
                            The 'target classes to transform' option specifies the classes to transform.
                            It must the path to the root directory of the classes you want to transform, or a jar file or a zip file.
                            Several targets can be passed in one call (eg
                            <code>toTransform.jar /classes otherToTransform.jar</code>).
                            <p/>
                            Note: when you then are running the application
                            (without using the
                            <code>aspectwerkz</code> command)
                            you have to (apart from feeding it with the
                            definition) put the aspectwerkz jar along with all
                            the the dependency jars the
                            <code>ASPECTWERKZ_HOME/lib</code> directory in your
                            classpath.
                        </li>
                        <br/>
                    </ul>
                </p>
                <p>
                    Invoke the
                    <code>aspectwerkz</code> command line tool without
                    any arguments to get a more detailed usage description.
                </p>
                <p>
                    In all three cases you have to feed the system with your
                    definition. See the
                    <a href="#Loading the definition">Loading the definition</a>
                    section for a detailed description on how to do this.
                </p>
            </subsection>
        </section>
        <section name="Loading the definition">
            <p>
                The
                <code>AspectWerkz</code> system needs to know where it
                can find the aspect definition.
            </p>
            <p>
                You have two options depending on your needs and settings:
                <ul>
                    <li>
                        Feed the system with the XML definition using the:
                        <br/>
                        <code>-Daspectwerkz.definition.file=&lt;path_to_definition_file&gt;</code>
                        command line option.
                    </li>
                    <br/>
                    <li>
                        Put the definition in a file called exactly
                        <code>aspectwerkz.xml</code> and put it on the
                        class path. Then the system will try to load the
                        definition as a resource.
                    </li>
                    <br/>
                </ul>
            </p>
        </section>

        <!--        <section name="Hot deployment and reconfiguration">-->
        <!--            <p>-->
        <!--                <code>AspectWerkz</code> supports hot deployment and reconfiguration-->
        <!--                of both-->
        <!--                <code>Advices</code> and-->
        <!--                <code>Introductions</code>.-->
        <!--                It can actually create, add, remove and rearrange-->
        <!--                <code>Advices</code>-->
        <!--                as well as replace an introduced implementation at runtime.-->
        <!--                The target classes does not have to be reloaded or transformed-->
        <!--                again.-->
        <!--            </p>-->
        <!--            <p>-->
        <!--                The AspectWerkz system is retrieved by invoking the-->
        <!--                <code>AspectWerks.getSystem(uuid)</code>. The uuid is the same UUID-->
        <!--                as specfied when compiling the weave model. If an auto-generated has-->
        <!--                been used the generated UUID can be read in the file name of the-->
        <!--                weave model (weaveModel_&lt;UUID&gt;.ser). If no weave model has been-->
        <!--                compiled (only using the XML definition) then you can retrieve the system-->
        <!--                by invoking-->
        <!--                <code>AspectWerkz.getDefaultSystem()</code>.-->
        <!--            </p>-->
        <!---->
        <!--            <subsection name="Examples">-->
        <!--                <p>-->
        <!--                    <ul>-->
        <!--                        <li>-->
        <!--                            For replacing an-->
        <!--                            <code>Introduction</code> implementation use:-->
        <!--                            <source><![CDATA[-->
        <!--SystemLoader.getSystem(uuid).getMixin("mixins/Mixin").-->
        <!--        ___AW_swapImplementation("mixins.NewMixinImpl");-->
        <!--                            ]]></source>-->
        <!--                            (the new implementation has to implement the same interface as-->
        <!--                            the previous one)-->
        <!--                        </li>-->
        <!--                        <br/>-->
        <!--                        <li>-->
        <!--                            For creating a new-->
        <!--                            <code>Advice</code> use:-->
        <!--                            <source><![CDATA[-->
        <!--// The parameters are:-->
        <!--// 1. the name of advice-->
        <!--// 2. the class name of advice-->
        <!--// 3. the deployment model-->
        <!--// 4. an optional user defined classloader (can be null)-->
        <!---->
        <!--((XmlDefSystem)SystemLoader.getSystem(uuid)).createAdvice(-->
        <!--        "advices/NewAdvice", "advices.NewAdvice", "perInstance", myClassLoader);-->
        <!--                            ]]></source>-->
        <!--                        </li>-->
        <!--                        <br/>-->
        <!--                        <li>-->
        <!--                            For removing an-->
        <!--                            <code>Advice</code> from a specific pointcut use:-->
        <!--                            <source><![CDATA[-->
        <!--List methodPointcuts = SystemLoader.getSystem(uuid).getAspectMetaData("MyAspect").-->
        <!--                getMethodPointcuts(className, methodMetaData);-->
        <!--for (Iterator it = methodPointcuts.iterator(); it.hasNext();) {-->
        <!--    MethodPointcut pointcut = (MethodPointcut)it.next();-->
        <!--    if (pointcut.hasAdvice("advices/NewAdvice")) {-->
        <!--        pointcut.removeAdvice("advices/NewAdvice");-->
        <!--    }-->
        <!--}-->
        <!--                            ]]></source>-->
        <!--                        </li>-->
        <!--                        <br/>-->
        <!--                        <li>-->
        <!--                            For adding a new-->
        <!--                            <code>Advice</code> to a specific pointcut use:-->
        <!--                            <source><![CDATA[-->
        <!--List methodPointcuts = SystemLoader.getSystem(uuid).getAspectMetaData("MyAspect").-->
        <!--                getMethodPointcuts(className, methodMetaData);-->
        <!--for (Iterator it = methodPointcuts.iterator(); it.hasNext();) {-->
        <!--    MethodPointcut pointcut = (MethodPointcut)it.next();-->
        <!--    if (pointcut.getExpression().equals(expression)) { // check that we are at the right pointcut-->
        <!--        pointcut.addAdvice("advices/NewAdvice");-->
        <!--    }-->
        <!--}-->
        <!--                            ]]></source>-->
        <!--                        </li>-->
        <!--                        <br/>-->
        <!--                        <li>-->
        <!--                            For changing the order of the-->
        <!--                            <code>Advices</code> at a specific pointcut use:-->
        <!--                            <source><![CDATA[-->
        <!--List methodPointcuts = SystemLoader.getSystem(uuid).getAspectMetaData("MyAspect").-->
        <!--        getMethodPointcuts(className, methodMetaData);-->
        <!--for (Iterator it = methodPointcuts.iterator(); it.hasNext();) {-->
        <!--    MethodPointcut pointcut = (MethodPointcut)it.next();-->
        <!--    List advices = pointcut.getAdviceIndexTuples();-->
        <!---->
        <!--    ... // change the order of the advices-->
        <!---->
        <!--    pointcut.setAdviceIndexTuples(advices);-->
        <!--}-->
        <!--                            ]]></source>-->
        <!--                        </li>-->
        <!--                        <br/>-->
        <!--                    </ul>-->
        <!--                </p>-->
        <!--                <p>-->
        <!--                    All these operations are fully thread-safe.-->
        <!--                </p>-->
        <!--            </subsection>-->
        <!--        </section>-->
        <section name="Remote Proxy Server - RPC mechanism">
            <p>
                <code>AspectWerkz</code> provides an RPC mechanism that allows you to use the
                instrumented objects (advices and mixins) seamlessly on a remote client site.
            </p>
            <subsection name="Client side">
                <p>
                    You can use the remote proxy on the client side in two ways:
                    <ul>
                        <li>
                            create a client proxy that creates a matching instance on the server.
                            The client now has seamless access this new specific instance on the server.
                            <p>
                                <b>Example:</b>
                                <source><![CDATA[
...
// creates a new remote proxy for the MixinImpl class which
// maps to an instance of this class on the server
RemoteProxy remoteProxy = RemoteProxy.createClientProxy(
        new String[]{"examples.connectivity.Mixin"},
        "examples.connectivity.MixinImpl",
        "localhost",
        7777
);

// retrieves the proxy to the MixinImpl instance
Mixin mixin = (Mixin)remoteProxy.getInstance();

// invoke methods on the proxy (executed on the server)
System.out.println("Mixin says: " + mixin.test1());

// close the proxy (close() must always be called)
remoteProxy.close();
...
                                ]]></source>
                            </p>
                        </li>
                        <br/>
                        <li>
                            create an instance of some class on the server-side, wrap it with a
                            <code>RemoteProxy</code> and send to the client over the wire.
                            The client then have access to this specific instance on the server.
                            <p>
                                <b>Server side:</b>
                                <source><![CDATA[
    ...
    // wrap an instance in a remote proxy on the server-side and send it to the client
    RemoteProxy remoteProxy = RemoteProxy.createServerProxy(anotherMixinInstance, "localhost", 7777);
    return remoteProxy;
}
                                ]]></source>
                            </p>
                            <p>
                                <b>Client side:</b>
                                <source><![CDATA[
...
// retrieve the proxy to the specific instance created on the server
RemoteProxy remoteProxy = mixin.getMixin();

// retrieves the proxy to the instance on the server
AnotherMixin anotherMixin = (AnotherMixin)remoteProxy.getInstance();
...
                                ]]></source>
                            </p>
                        </li>
                    </ul>
                </p>
                <p>
                    A sample have been provided and can be found in the
                    <code>src/samples/examples/connectiviy</code>
                    directory. Start by taking a look at the
                    <code>Client.java</code> class.
                    You can run the sample by executing
                    <code>maven aspectwerkz:samples:remote:server</code>
                    to start up the server and then in another console execute
                    <code>maven aspectwerkz:samples:remote:client</code> to start the client.
                    (When you close down the server using
                    <code>^C</code> then the server listener
                    threads are still hanging so you need to close down them manually.)
                </p>
            </subsection>
            <subsection name="Server side">
                <p>
                    The remote proxy server is a multi-threaded production-ready implementation that
                    is ready to serve any number of incoming requests. To configure the server settings
                    (number of listener threads, max/min/init size of the thread pool, backlog etc.)
                    you have to change the settings in the in the
                    <code>aspectwerkz.properties</code>
                    resource bundle and put it on the classpath. If no bundle is found default
                    values are used.
                </p>
                <p>
                    The server resource bundle has the following format/options:
                    <source><![CDATA[
remote.server.hostname=localhost
remote.server.port=7777
remote.server.client.threads.timeout=60000
remote.server.listener.threads.nr=10
remote.server.listener.threads.backlog=200
remote.server.listener.threads.run.as.daemon=false
remote.server.thread.pool.type=bounded # possible types are bounded or dynamic
remote.server.thread.pool.max.size=100
remote.server.thread.pool.init.size=10
remote.server.thread.pool.min.size=10
remote.server.thread.pool.keep.alive.time=300000
remote.server.thread.pool.wait.when.blocked=true
remote.server.invoker.classname=
                    ]]></source>
                </p>
                <p>
                    To enable support for RPC in the
                    <code>AspectWerkz</code> system you have to feed
                    the JVM with the
                    <code>-Daspectwerkz.remote.server.run=true</code> option.
                </p>
                <p>
                    If you have specific requirements. For example if you want to handle the user
                    context that you (optionally) can set on the client
                    <code>RemoteProxy</code>
                    and have sent over or have other requirements on how you want to invoke you
                    objects then you can create your own implementation of the
                    <code>org.codehaus.aspectwerkz.connectivity.Invoker</code> interface and
                    specify the implementation in the aspectwerkz.properties resource bundle using
                    the
                    <code>remote.server.invoker.classname=..</code> option. For an example
                    implementation see the
                    <code>org.codehaus.aspectwerkz.System.getDefaultInvoker()</code> method.
                </p>
            </subsection>
        </section>
    </body>
</document>
