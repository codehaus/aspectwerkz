<?xml version="1.0"?>
<document>
    <properties>
        <author email="jboner at codehaus dot org">jonas bon&#233;r</author>
        <author email="alex at gnilux dot com">alexandre vasseur</author>
        <title>General definition issues</title>
    </properties>
    <body>
        <section name="Table of Contents">
            <p>
                <b>General definition issues</b>
            </p>
            <p>
                <ol>
                    <li>
                        <a href="#Join point selection pattern language">Join point selection pattern language</a>
                    </li>
                    <li>
                        <a href="#Pointcut definition">Pointcut definition</a>
                    </li>
                    <li>
                        <a href="#Pointcut composition">Pointcut composition</a>
                    </li>
                   <li>
                       <a href="#Pluggable container implementation">Pluggable container implementation</a>
                   </li>
                    <li>
                        <a href="#AOP system">AOP system</a>
                    </li>
                    <li>
                        <a href="#Passing parameters to aspects">Passing parameters to aspects</a>
                    </li>
                    <li>
                        <a href="#Deployment models">Deployment models</a>
                    </li>
                    <li>
                        <a href="#Custom annotation compilation and retrieval">Custom annotation compilation and retrieval (JSR-175 support)</a>
                    </li>
                </ol>
            </p>
        </section>
        <section name="Join point selection pattern language">
            <p>
                <code>AspectWerkz</code> support a fine-grained pattern
                language for picking out join points.
            </p>
            <p>
                You can utilize two types of wildcards when constructing your
                patterns:
            </p>
            <p>
                <ul>
                    <li>
                        <code>*</code> - which is used as a regular wildcard.
                         Matches for example only one package level or one method parameter.
                         When used to match a package name, matches
                        <b>at least one</b> character. Else match
                        <b>zero or more</b> character.
                    </li>
                    <br/>
                    <li>
                        <code>..</code> - matches any sequence of characters that
                         start and end with a ".", so it can be used to pick out all
                         types in any subpackage. For example
                        <code>org.codehaus..*</code>
                         will match all classes in all subpackages starting from
                        <code>org.codehaus</code>.
                    </li>
                </ul>
                 Note: you can only use the
                <code>..</code> wildcard as the
                 "last" thing specified. I.e. this is
                <b>not</b> possible:
                <code>foo.bar..test.MyClass</code>, but this is:
                <code>foo.bar..</code>. The same thing holds for method
                 parameters.
            </p>
            <subsection name="Combining the patterns">
                <p>
                    The patterns normally consists of a combination of a class and a method
                    pattern or a class and a field pattern.
                </p>
                <p>
                    Example of a full method pattern:
                    <br/>
                    <code>&lt;annotations&gt; &lt;modifiers&gt; &lt;return_type_pattern&gt; &lt;package_and_class_pattern&gt;.&lt;method_name_pattern&gt;(&lt;parameter_type_patterns&gt;)</code>
                </p>
                <p>
                    Example of a full field pattern:
                    <br/>
                    <code>&lt;annotations&gt; &lt;modifiers&gt; &lt;field_type_pattern&gt; &lt;package_and_class_pattern&gt;.&lt;field_name_pattern&gt;</code>
                </p>
            </subsection>
            <subsection name="Class selections">
                <p>
                    The classes are selected by specifying a pattern that
                    consists of:
                </p>
                <p>
                    <ul>
                        <li>
                            the annotations
                        </li>
                        <li>
                            the modifiers
                        </li>
                        <li>
                            the full name of the class
                        </li>
                    </ul>
                </p>
                <p>
                    All class patterns must follow this structure:
                    <br/>
                    <code>&lt;annotations&gt; &lt;modifiers&gt; &lt;full_class_name&gt;</code>
                </p>
                <p>
                    For the class selections specify the full package name of
                    the class along with some wildcards.
                </p>
                <p>
                    <b>Examples:</b>
                </p>
                <p>
                    <ul>
                        <li>
                            <code>foo.bar.*</code> - will match
                            <br/>
                            <code>foo.bar.FooBar2</code> as well as
                            <br/>
                            <code>foo.bar.FooBear</code>.
                        </li>
                        <br/>
                        <li>
                            <code>foo.*.FooBar</code> - will match
                            <br/>
                            <code>foo.bar.FooBar</code> as well as
                            <br/>
                            <code>foo.bear.FooBar</code> but not
                            <br/>
                            <code>foo.bear.FooBear</code>.
                        </li>
                        <br/>
                        <li>
                            <code>foo.*.FooB*</code> - will match
                            <br/>
                            <code>foo.bar.FooBar2</code> as well as
                            <br/>
                            <code>foo.bear.FooBear</code> as well as
                            <br/>
                            <code>foo.bear.FooB</code>.
                        </li>
                        <br/>
                        <li>
                            <code>public foo.bar.*</code> - will match
                            <br/>
                            <code>public static final foo.bar.FooBar</code> as well as
                            <br/>
                            <code>public static foo.bar.FooBar</code> but not
                            <br/>
                            <code>static foo.bar.FooBar</code> or
                            <br/>
                            <code>private foo.bar.FooBar</code>.
                        </li>
                        <br/>
                        <li>
                            <code>@Session foo.bar.*</code> - will match
                            <br/>
                            <code>@Session foo.bar.FooBar</code> but not
                            <br/>
                            <code>foo.bar.FooBar</code> or
                            <br/>
                            <code>private foo.bar.FooBar</code>.
                        </li>
                        <br/>
                        <li>
                            <code>foo..</code> - will match
                            <br/>
                            all classes in all packages starting with foo.
                        </li>
                    </ul>
                </p>
            </subsection>
            <subsection name="Method selections">
                <p>
                    The methods are selected by specifying a pattern that
                    consists of:
                </p>
                <p>
                    <ul>
                        <li>
                            the annotations
                        </li>
                        <li>
                            the modifiers
                        </li>
                        <li>
                            the return type
                        </li>
                        <li>
                            the full name of the method (including class and package)
                        </li>
                        <li>
                            the parameter types
                        </li>
                    </ul>
                </p>
                <p>
                    All method patterns must follow this structure:
                    <br/>
                    <code>&lt;annotations&gt; &lt;modifiers&gt; &lt;return_type&gt; &lt;full_method_name&gt;(&lt;parameter_types&gt;)</code>
                </p>
                <p>
                    <b>Examples</b>
                </p>
                <p>
                    <ul>
                        <li>
                            <code>int foo.*.Bar.method()</code> - will match
                            <br/>
                            <code>int method()</code> but not
                            <br/>
                            <code>int method(int i)</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int *.method(*)</code> - will match
                            <br/>
                            <code>int Foo.method(int i)</code> but not
                            <br/>
                            <code>int Foo.method()</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int foo.*.*.method(*,int)</code> - will match
                            <br/>
                            <code>int method(String s, int i)</code> as well as
                            <br/>
                            <code>int method(int i1, int i2)</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int foo.*.Bar.method(..)</code> - will match
                            <br/>
                            <code>int method()</code> as well as
                            <br/>
                            <code>int method(String s, int i)</code> as well as
                            <br/>
                            <code>int method(int i, double d, String s, Object o)</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int foo.*.Bar.method(int,..)</code> - will match
                            <br/>
                            <code>int method(int)</code> as well as
                            <br/>
                            <code>int method(int i, String s)</code> as well as
                            <br/>
                            <code>int method(int i, double d, String s, Object o)</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int foo.*.Bar.method(java.lang.*)</code> - will match
                            <br/>
                            <code>int method(String s)</code> as well as
                            <br/>
                            <code>int method(StringBuffer sb)</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int foo.*.Bar.me*o*()</code> - will match
                            <br/>
                            <code>int method()</code> as well as
                            <br/>
                            <code>int metamorphosis()</code> and
                            <code>int meo()</code> but not
                            <br/>
                            <code>int me()</code>.
                        </li>
                        <br/>
                        <li>
                            <code>* foo.*.Bar.method()</code> - will match
                            <br/>
                            <code>int method()</code> as well as
                            <br/>
                            <code>java.lang.String method()</code>.
                        </li>
                        <br/>
                        <li>
                            <code>java.lang.* foo.*.Bar.method()</code> - will match
                            <br/>
                            <code>java.lang.String Bar.method()</code> as well as
                            <br/>
                            <code>java.lang.StringBuffer Bar.method()</code>.
                        </li>
                            <br/>
                        <li>
                            <code>static int foo.*.Bar.method()</code> - will match
                            <br/>
                            <code>static int method()</code> but not
                            <br/>
                            <code>int method(int i)</code>.
                        </li>
                            <br/>
                        <li>
                            <code>@Transaction * foo.*.*.*(..)</code> - will match
                            <br/>
                            <code>@Transaction int method()</code> but not
                            <br/>
                            <code>void method(int i)</code>.
                        </li>
                    </ul>
                </p>
            </subsection>
            <subsection name="Constructor selections">
                <p>
                    The constructors are selected by specifying a pattern that consists of:
                </p>
                <p>
                    <ul>
                       <li>
                           the annotations
                       </li>
                       <li>
                           the modifiers
                       </li>
                        <li>
                            the fully qualified name of the class (including package) plus the word 'new' as constructor name
                        </li>
                        <li>
                            the parameter types
                        </li>
                    </ul>
                </p>
                <p>
                    All the patterns must follow this structure:
                    <br/>
                    <code>&lt;annotations&gt; &lt;modifiers&gt; &lt;className&gt;.&lt;new&gt;(&lt;parameter_types&gt;)</code>
                </p>
                <p>
                    <b>Examples</b>
                </p>
                <p>
                    <ul>
                        <li>
                            <code>foo.*.Bar.new()</code> - will match
                            <br/>
                            <code>new Bar()</code> but not
                            <br/>
                            <code>new Bar(int i)</code>.
                        </li>
                        <br/>
                        <li>
                            <code>*.new(String)</code> - will match
                            <br/>
                            <code>new Foo(String name)</code> and
                            <br/>
                            <code>new Bar(String name)</code> but not
                            <br/>
                            <code>new Foo()</code>.
                        </li>
                        <br/>
                    </ul>
                </p>
            </subsection>
            <subsection name="Field selections">
                <p>
                    The fields are selected by specifying a pattern that
                    consists of:
                </p>
                <p>
                    <ul>
                       <li>
                           the annotations
                       </li>
                       <li>
                           the modifiers
                       </li>
                        <li>
                            the field type
                        </li>
                        <li>
                            the full name of the field (including class and package)
                        </li>
                    </ul>
                </p>
                <p>
                    All field patterns must follow this structure:
                    <br/>
                    <code>&lt;annotations&gt; &lt;modifiers&gt; &lt;field_type&gt; &lt;full_field_name&gt;</code>
                </p>
                <p>
                    <b>Examples</b>
                </p>
                <p>
                    <ul>
                        <li>
                            <code>int foo.*.Bar.m_foo</code> - will match
                            <br/>
                            <code>int m_foo</code> but not
                            <br/>
                            <code>int s_foo</code> or
                            <br/>
                            <code>long m_foo</code>.
                        </li>
                        <br/>
                        <li>
                            <code>* foo.*.Bar.m_foo</code> - will match
                            <br/>
                            <code>int m_foo</code> as well as
                            <br/>
                            <code>java.lang.String m_foo</code>.
                        </li>
                        <br/>
                        <li>
                            <code>java.lang.* foo.*.Bar.m_foo</code> - will match
                            <br/>
                            <code>java.lang.String m_foo</code> as well as
                            <br/>
                            <code>java.lang.StringBuffer m_foo</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int foo.*.Bar.m_*</code> - will match
                            <br/>
                            <code>int m_foo</code> as well as
                            <br/>
                            <code>int m_bar</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int foo.*.Bar.m_*oo*</code> - will match
                            <br/>
                            <code>int m_foo</code> as well as
                            <br/>
                            <code>int m_looser</code> as well as
                            <br/>
                            <code>int m_oo</code>.
                        </li>
                    </ul>
                </p>
            </subsection>
            <subsection name="Subtype patterns">
                <p>
                    It is possible to pick out all subtypes of a type with the "+" wildcard.
                    The "+" wildcard follows immediately a type name pattern. So, while
                </p>
                <p>
                    <code>* foo.Bar.*(..)</code>
                </p>
                <p>
                    picks out all method call join points where an instance of exactly type Foo is
                    constructed,
                </p>
                <p>
                    <code>* foo.Bar+.*(..)</code>
                </p>
                <p>
                    picks out all method call join points where an instance of any subtype of
                    Foo (including Foo itself) is constructed.
                </p>
            </subsection>
            <subsection name="Array type patterns">
                <p>
                    A type name pattern or subtype pattern can be followed by one or more sets of
                    square brackets to make array type patterns. So Object[] is an array type
                    pattern, and so is foo.bar.*[][].
                </p>
            </subsection>
            <subsection name="Abbreviations">
                <p>
                    When picking out the return and parameter types it is
                    possible to use predefined abbreviations for the classes
                    in the
                    <code>java.lang.*</code> and
                    <code>java.util.*</code>
                    packages. If you specify only the class name it will be
                    mapped to the full class name for the class (you cannot use patterns in abbreviations).
                </p>
                <p>
                    <b>Examples</b>
                </p>
                <p>
                    You can use:
                    <ul>
                        <li>
                            <code>String</code> instead of
                            <code>java.lang.String</code>
                        </li>
                        <li>
                            <code>List</code> instead of
                            <code>java.util.List</code>
                        </li>
                        <li>
                            but not
                            <code>String*</code> instead of
                            <code>java.lang.String</code> or
                            <code>java.lang.StringBuffer</code>
                        </li>
                        <li>
                            and so on...
                        </li>
                    </ul>
                </p>
                <p>
                    Apart from these abbreviations you always have to specify
                    the fully qualified name of the class (along with the
                    wildcards).
                </p>
            </subsection>
        </section>
        <section name="Pointcut definition">
            <p>
                 The pointcut is a construct that picks out join points, i.e. selects well-defined points in the program flow.
            </p>
            <p>
                The following types of pointcuts are currently supported:
                <ul>
                    <li>
                        <code>execution(&lt;method or constructor pattern&gt;)</code> - picks out join points defining method
                        (static or member) or constructor execution.
                        <br/>
                        Valid advice for this pointcut are
                        <code>around</code>,
                        <code>before</code> and
                        <code>after</code>.
                    </li>
                    <br/>
                    <li>
                        <code>call(&lt;method or constructor pattern&gt;)</code> - picks out join points defining method
                        (static or member) or constructor call.
                        <br/>
                        Valid advice for this pointcut are
                        <code>around</code>,
                        <code>before</code> and
                        <code>after</code>.
                    </li>
                    <br/>
                    <li>
                        <code>set(&lt;field pattern&gt;)</code> - picks out join points defining field modification.
                        <br/>
                        Valid advice for this pointcut are
                        <code>around</code>,
                        <code>before</code> and
                        <code>after</code>.
                    </li>
                    <br/>
                    <li>
                        <code>get(&lt;field pattern&gt;)</code> - picks out join points defining field access.
                        <br/>
                        Valid advice for this pointcut are
                        <code>around</code>,
                        <code>before</code> and
                        <code>after</code>.
                    </li>
                    <br/>
                    <li>
                        <code>handler(&lt;exception type pattern&gt;)</code> - picks out join points
                        definining a catch clause.
                        <br/>
                        Valid advice for this pointcut is
                        <code>before</code>.
                    </li>
                    <br/>
                    <li>
                        <code>cflow(&lt;pointcut expression&gt;)</code> - picks out join points defining a control flow (cflow).
                        <br/>
                        This pointcut can only be used on conjunction with other pointcut types in an algebraic
                        <code>AND</code> expression.
                    </li>
                    <br/>
                    <li>
                        <code>within(&lt;type pattern&gt;)</code> - picks out a type set.
                        <br/>
                        This pointcut can be used when you need to limit the scope on which join points you pick out.
                           Really useful (and and most cases necessary) to use together with
                        <code>call</code> and
                        <code>handler</code> pointcuts.
                    </li>
                    <br/>
                    <li>
                        <code>withincode(&lt;method or constructor pattern&gt;)</code> - picks out a method
                        or constructor set.
                        <br/>
                        This pointcut can be used when you need to limit the scope on which join points you pick out.
                        Really useful (and and most cases necessary) to use together with
                        <code>call</code> and
                        <code>handler</code> pointcuts.
                    </li>
                </ul>
            </p>
            <p>
                Pointcuts can either defined:
                <ul>
                    <li>
                        explicitly - by giving them a name, this is done differently in the
                        <a href="xml_definition.html#Pointcuts">XML</a>
                        and the
                        <a href="attribute_definition.html#Pointcuts">Attribute</a> definitions.
                    </li>
                    <br/>
                    <li>
                        anonymously - directly bound to an
                        <a href="implementation.html#Advice">advice</a> and/or as part of a
                        <a href="#Pointcut composition">pointcut composition</a> expression.
`
                    </li>
                </ul>
            </p>
        </section>
        <section name="Pointcut composition">
            <p>
                <code>AspectWerkz</code> supports pointcut composition, which means that poincuts can be composed.
                To compose pointcut expressions you can use these logical operators:
                <ul>
                    <li>
                        <code>!</code>  or
                        <code>NOT</code> - logical not
                    </li>
                    <br/>
                    <li>
                        <code>||</code> or
                        <code>OR</code> - logical or
                    </li>
                    <br/>
                    <li>
                        <code>&amp;&amp;</code> or
                        <code>AND</code> - logical and
                    </li>
                    <br/>
                    <li>
                        parenthesis for grouping
                    </li>
                </ul>
                In the XML definition the operator AND is more convenient (else &amp; has to be escaped).
            </p>
            <p>
                Using these operators together with parenthesis you can form any kind of algebraic expression.
                The model is highly orthogonal since all it allows you to mix any type of pointcut when composing new pointcuts.
            </p>
            <p>
                Examples:
                <source><![CDATA[
execution(* foo.bar.Baz.*(..)) || call(* foo.bar.Baz.*(..))

(set(* foo.bar.*) || get(* foo.bar.*)) && withincode(* foo.bar.Buzz.*(..))

handler(java.lang.Exception+) && !cflow(call(* foo.bar.Buzz.(..)))
                ]]></source>
            </p>
        </section>

        <section name="Pluggable container implementation">
            <p>
                You have the possibility of providing your own aspect container implementation.
                This can be useful if you need to control how your aspects are instantiated.
                (For example if you want to have them working with an IoC container (Spring, PicoContainer etc.))
            </p>
            <p>
                To create a custom container you only need to implement the
                <code>org.codehaus.aspectwerkz.aspect.AspectContainer</code> interface, but it can
                be very beneficial to extend the
                <code>org.codehaus.aspectwerkz.aspect.AbstractAspectContainer</code> abstract base class
                (and only implement the abstract method <code>Object createAspect()</code>).
            </p>
            <p>
                You specify which aspect should use which container in the XML definition using the
                <code>container</code> element.
            </p>
            <p>
               Example:
                <source><![CDATA[
<aspect class="foo.bar.Baz" container="org.codehaus.aware.container.SpringAspectContainer">
    ...
</aspect>
                ]]></source>
            </p>
            <p>
                If you don't provide a custom implementation the default one will be used.
            </p>
            <p>
                For a complete example on how to write your own custom aspect container take a look at the
                <a href="http://docs.codehaus.org/display/AWARE/SpringAspectContainer">SpringAspectContainer documentation</a> (and sources).
            </p>
        </section>

        <section name="AOP system">
            <p>
                Deployed aspects belongs to an aspect
                <code>system</code>. For now
                <code>AspectWerkz</code> support only a
                single system in the whole JVM. Aspect systems are named in the XML definition file and each system
                must have a unique name.
                The system name (
                <code>id</code>) is used when accessing system at runtime, for example when redefining the aspect system.
            </p>
            <p>
               Example:
                <source><![CDATA[
<aspectwerkz>
    <system id="system name">
        <aspect name="MyAspect1"/>
        <aspect name="MyAspect2"/>
        ...
    </system>
</aspectwerkz>
                ]]></source>
            </p>
            <p>
                Sample to access the system(s) at runtime
                <source><![CDATA[
AspectSystem system = SystemLoader.getSystem(targetInstance);

AspectSystem system = SystemLoader.getSystem(targetClass);

AspectSystem system = SystemLoader.getSystem(classLoader);

Collection systems = SystemLoader.getAllSystems();
                ]]></source>
            </p>
        </section>
        <section name="Passing parameters to aspects">
            <p>
                You also have the option of passing parameters to your aspects.
                This can be very convenient if you want to reuse the same
                aspect but with a different configuration without using aspect inheritance.
                To pass a parameter to the aspect you simply add a
                <code>param</code> tag to the
                <code>aspect</code> definition, like this:
            </p>
            <p>
                <source><![CDATA[
<aspect ... >
    <param name="timeout" value="10"/>
</aspect>
                ]]></source>
            </p>
            <p>
                To retrieve the parameter (from within an aspect) use
                <code>CrossCuttingInfo.getInfo("systemId", this).getParameter("timeout")</code>
                to retrieve the parameter value as a String.
            </p>
            <p>
                To set a new (or override) a parameter (from within an aspect) use
                <code>CrossCuttingInfo.getInfo("systemId", this).setParameter("timeout", "10")</code>
                to retrieve the parameter value as a String.
            </p>
        </section>
        <section name="Deployment models">
            <p>
                <code>AspectWerkz</code> supports four different deployment models,
                which defines the scope of the
                <code>Aspect</code>.
            </p>
            <p>
                The four different deployment models are:
                <ul>
                    <li>
                        <code>perJVM</code> - one sole instance per JVM.
                        Basically the same thing as a singleton class.
                    </li>
                    <br/>
                    <li>
                        <code>perClass</code> - one instance per class.
                    </li>
                    <br/>
                    <li>
                        <code>perInstance</code> - one instance per class instance.
                    </li>
                    <br/>
                    <li>
                        <code>perThread</code> - one instance per thread.
                    </li>
                </ul>
            </p>
            <p>
                Since introduction implementation are inner classes, they have to follow a subset of the aspect's
                deployment model. If not specified, the introduction is deployed as the aspect that defines it.
                Else the following applies:
                <table>
                    <tr>
                        <th>Introduction deployment model</th>
                        <th>required Aspect deployment model</th>
                    </tr>
                    <tr>
                        <td>perJVM</td>
                        <td>perJVM (default for Aspect)</td>
                    </tr>
                    <tr>
                        <td>perClass</td>
                        <td>perJVM or perClass</td>
                    </tr>
                    <tr>
                        <td>perInstance</td>
                        <td>perinstance or perClass or perJVM</td>
                    </tr>
                    <tr>
                        <td>perThread</td>
                        <td>perThread</td>
                    </tr>
                </table>
            </p>
        </section>
        <section name="Custom annotation compilation and retrieval">
            <p>
                Custom annotations starts with
                <a href="attribute_definition.html#Attribute reference">
                    <code>@@</code>
                </a>.
            </p>
            <p>
                The
                <code>AspectC</code> utility can be used to compile custom metadata to the class bytecode.
                See the
                <a href="attribute_definition.html#Attribute compilation">Attribute compilation</a> section
                for information on how to compile the annotations.
            </p>
            <p>
                In custom annotation compilation the JavaDocs tags on the format
                <code>@@&lt;name&gt; [&lt;value&gt;]</code> will be retrieved and
                inserted as attributes into the bytecode of the
                <code>.class</code> file.
            </p>
            <p>
                The attributes can then be retrieved at runtime using the
                <code>org.codehaus.aspectwerkz.annotation.Annotations</code> class.
            </p>
            <p>
            For example, if you define annotations in your source file like this:
                <source><![CDATA[
/**
 * @@Session
 */
 public class MyClass {

    /**
     * @@ReadOnly
     */
     private String myField;

    /**
     * @@Transaction requires
     */
     public void someOtherMethod() {
         ...
     }
}
                ]]></source>
            </p>
            <p>
                Then you can retrieve the attributes/annotations at runtime like this:
                <source><![CDATA[
CustomAttribute sessionInfo = Annotations.getAnnotation("Session", klass);
...
CustomAttribute txPolicy = Annotations.getAnnotation("Transaction", klass);
...
CustomAttribute readWritePolicy = Annotations.getAnnotation("ReadOnly", field);
                ]]></source>
            </p>
            <p>
                Please note that we are currently implemeting a strongly typed way of managing
                user defined annotations. That will have one single unified API for both JavaDoc
                and JSR-175 style annotations.
            </p>
        </section>
    </body>
</document>
