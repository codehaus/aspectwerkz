<?xml version="1.0"?>
<document>
    <properties>
        <author email="jboner at codehaus dot org">jonas bon&#233;r</author>
        <author email="alex at gnilux dot com">alexandre vasseur</author>
        <title>XML definition</title>
    </properties>
    <body>
        <section name="XML definition">
            <p>
                What is important to understand is that both the Annotation and the XML definition are both just
                different views of the same underlying model. This means that they can easily co-exist and can
                succesfully be used together. The XML definition can be used as a replacement to the Annotation definition
                or as a complement. It can be used to refine and override definitions made in annotations as well as
                resolve missing pieces (for example pointcut definitions referenced but not defined) in the annotation
                definition. See the
                <a href="implementation.html#Choosing a definition model">Choosing a definition model</a>
                section for best practices.
            </p>
        </section>
        <section name="Table of Contents">
            <p>
                <ol>
                    <li>
                        <a href="#Aspects">Aspects</a>
                    </li>
                    <li>
                        <a href="#Pointcuts">Pointcuts</a>
                    </li>
                    <li>
                        <a href="#Advice">Advice</a>
                    </li>
                    <li>
                        <a href="#Introductions">Introductions</a>
                    </li>
                    <li>
                         <a href="#System wide pointcuts">System wide pointcuts</a>
                     </li>
                      <li>
                        <a href="#Passing parameters to aspects">Passing parameters to aspects</a>
                    </li>
                    <li>
                        <a href="#Package namespaces">Package namespaces</a>
                    </li>
                    <li>
                        <a href="#Transformation scopes">Transformation scopes</a>
                    </li>
                    <li>
                        <a href="#DTD for XML definition">DTD for XML definition</a>
                    </li>
                    <li>
                        <a href="#Example of an XML definition">Example of an XML definition</a>
                    </li>
                </ol>
            </p>
        </section>
        <section name="Aspects">
            <p>
                An aspect is defined in XML using the
                <code>aspect</code> element, which has two attributes:
                <ul>
                    <li>
                        <code>class</code> - specifies a fully qualified class name for the aspect implementation class.
                    </li>
                    <br/>
                    <li>
                        <code>deployment-model</code> - specifies the depoyment model for the aspect. The default is
                        <code>perJVM</code> if not specified
                        <ul>
                            <li>
                                <code>perJVM</code> - deploys the aspect as perJVM.
                            </li>
                            <li>
                                <code>perClass</code> - deploys the aspect as perClass.
                            </li>
                            <li>
                                <code>perInstance</code> - deploys the aspect as perInstance.
                            </li>
                            <li>
                                <code>perThread</code> - deploys the aspect as perThread.
                            </li>
                        </ul>
                    </li>
                </ul>
            </p>
            <p>
                Inside the
                <code>aspect</code> elements you then define the poincuts, advice and introductions.
            </p>
        </section>
        <section name="Pointcuts">
            <p>
                The pointcut is the construct that picks out join points, i.e. selects sets of well-defined points in the program flow.
                In the XML defintion pointcuts are defined using the
                <code>pointcut</code> element.
            </p>
            <p>
                When defining a
                <code>pointcut</code> there are two attributes that needs to be specified:
                <ul>
                    <li>
                        <code>name</code> -
                        specifies the name of the pointcut. Needs to be a unique
                        name throughout the aspect definintion.
                        <p/>
                        Caution: names must only consist of these characters:
                        <code>[A-Z]</code>,
                        <code>[a-z]</code>,
                        <code>[0-9]</code> and the characters
                        <code>$</code> and
                        <code>_</code> (not for example
                        <code>-</code> or
                        <code>/</code>).
                    </li>
                    <br/>
                    <li>
                        <code>expression</code> - specifies the expression for the pointcut. This is the
                        pattern that picks out the join points that should be included in the pointcut.
                        <p>
                            See the
                            <a href="definition_issues.html#Join point selection pattern language">Join point selection pattern language</a>
                            section for a detailed description on how these patterns are written and see the
                            <a href="definition_issues.html#Pointcut definition">Pointcut definition</a> and
                            <a href="definition_issues.html#Pointcut composition">Pointcut composition</a> sections for details on
                            how pointcuts are defined and composed.
                        </p>
                    </li>
                    <br/>
                </ul>
            </p>
            <p>
                Example of some
                <code>pointcut</code> definitions:
                <source><![CDATA[
<aspect ...>
    <pointcut name="pc1" expression="execution(* foo.Bar.method(..))"/>
    <pointcut name="pc2" expression="set(* foo.Bar.m_field)"/>
    <pointcut name="pc3" expression="get(* foo.Bar.m_field)"/>
    <pointcut name="pc4" expression="handler(java.lang.Exception)AND withincode(foo.bar.*.new(..))"/>
    <pointcut name="pc5" expression="call(String foo.Callee.method()) AND within(foo.bar.*)"/>
    <pointcut name="pc6" expression="cflow(execution(* Transaction.begin(..)))"/>
    ...
</aspect>
                ]]></source>
            </p>
        </section>

        <section name="System wide pointcuts">
            <p>
                The pointcuts can also be "system-wide", which means that you can define pointcuts outside the
                aspects, within the <code>system</code> tags. These can then be used by all <code>aspects</code>
                in the system defintion.
            </p>
        </section>

        <section name="Advice">
            <p>
                In the XML defintion advice are defined using the
                <code>advice</code> element.
            </p>
            <p>
                When defining the
                <code>advice</code> there are three attributes that
                needs to be specified:
                <ul>
                    <li>
                        <code>name</code> - the name of the advice is the name of the method in the
                        aspect class that implements the advice.
                    </li>
                    <br/>
                    <li>
                        <code>type</code> - the type defines the type of the advice. Valid types are:
                        <ul>
                            <li>
                                <code>around</code> - defines an around advice
                            </li>
                            <li>
                                <code>before</code> - defines an before advice
                            </li>
                            <li>
                                <code>after</code> - defines an after advice
                            </li>
                        </ul>
                    </li>
                    <br/>
                    <li>
                        <code>bind-to</code> - binds the advice to a
                        <code>pointcut</code> by referencing the name
                         of the
                        <code>pointcut</code> or by defining an anonymous pointcut.
                    </li>
                    <br/>
                </ul>
            </p>
            <p>
                Example:
                <source><![CDATA[
<advice name="advice1"
        type="before"
        bind-to="(pc1 || pc2) && pc3"/>

<advice name="advice2"
        type="around"
        bind-to="execution(int examples.caching.Pi.getPiDecimal(int))"/>
                 ]]></source>
            </p>
        </section>
        <section name="Introductions">
            <p>
                When defining the mixin there are two attributes that needs to be specified:
                <ul>
                    <li>
                        <code>class</code> - the class name of the mixin
                    </li>
                    <br/>
                    <li>
                        <code>bind-to</code> - binds the mixin to a class using the
                        <code>within(...)</code> pointcut
                    </li>
                    <br/>
                </ul>
            </p>
            <p>
                <b>XML definition</b>
            </p>
            <p>
                <source><![CDATA[
<aspect ...>
    ...
    <introduce class="IntroductionTestAspect$MyImpl" bind-to="within(test.ToBeIntroduced)"/>
    ...
</aspect>
                ]]></source>
            </p>
        </section>
        <section name="Passing parameters to aspects">
            <p>
                You also have the option of passing parameters to your aspects.
                This can be very convenient if you want to reuse the same
                aspect but with a different configuration without using aspect inheritance.
                To pass a parameter to the aspect you simply add a
                <code>param</code> tag to the
                <code>aspect</code> definition, like this:
            </p>
            <p>
                <source><![CDATA[
<aspect ... >
    <param name="timeout" value="10"/>
</aspect>
                ]]></source>
            </p>
            <p>
                From within an
                <code>Aspect</code> subclass use the method
                <code>___AW_getParameter("timeout")</code> to retrieve
                the parameter value as a String.
            </p>
        </section>

        <section name="Package namespaces">
            <p>
                Package namespaces provide a way to simplify the edition of the XML definition file so that it is not necessary
                to prefix all
                <code>class</code> with the complete package information.
                <br/>
                You have two ways of defining a package namespace:
                <ul>
                    <li>
                        using the
                        <code>base-package</code> attribute in the
                        <code>system</code>
                        element. This defines a global package namespace for all elements defined within the
                        <code>system</code> element.
                    </li>
                    <br/>
                    <li>
                        using the
                        <code>package</code> element. This element has one attribute;
                        <code>name</code>, which defines the package namespace.
                    </li>
                </ul>
                The package name will be used as a prefix for all nested elements.
            </p>
            <p>
                <b>Example</b>
            </p>
            <p>
                <source><![CDATA[
<aspectwerkz>
    <system id="foodemo" base-package="foo">
        <!-- All classes are prefixed by 'foo' -->

        <package name="bar">
            <!-- All classes within these 'package' tags are prefixed by 'foo.bar' -->
        </package>

        <package name="baz.buzz">
            <!-- All classes within these 'package' tags are prefixed by 'foo.baz.buzz' -->
        </package>
    </system>
</aspectwerkz>
                ]]></source>
            </p>
        </section>
        <section name="Transformation scopes">
            <p>
                Using transformation scopes you can choose to perform the transformation within
                certain packages only. E.g. filter out all classes from all other packages in
                the transformation process. This can speed up the transformation process a lot as
                well as assure you that only classes within the packages you have defined is
                getting transformed no matter how freely you define your pointcut patterns.
            </p>
            <p>
                A transformation scope is defined using the
                <code>exclude</code> and
                <code>include</code>
                element which have one attribute
                <code>package</code> where you define the package
                name. You can define as many transformation scopes as you want.
                <br/>
                The
                <code>package</code> attribute supports only
                <code>.*</code> as an ending pattern (package and all sub package).
            </p>
            <p>
                During the transformation process (online or offline), a class might be transformed (depending on the pointcuts) if
                <ol>
                    <li>the class does not belongs to any
                        <code>exclude</code> packages if any
                    </li>
                    and
                    <li>the class belongs to
                        <b>at least one</b>
                        <code>include</code> packages if any
                    </li>
                </ol>
                Note that when
                <code>include</code> is used the selection is much more restrictive.
                This selection mechanism should be used as most as possible especially in online mode since it enables an ealry filtering.
            </p>
            <p>
                <b>Example</b>
                <source><![CDATA[
<aspectwerkz>
    <system id="sample">
        <!--
            Transformations will only take place within the 'org.codehaus.package' package and its subpackages
        -->
        <include package="org.codehaus"/>
        <include package="org.codehaus.*"/> <!-- synonymous of org.codehaus -->
        <exclude package="com.oracle.*"/>
        ...
    </system>
</aspectwerkz>
                ]]></source>
            </p>
        </section>

        <section name="DTD for XML definition">
            <p>
                Each distribution comes with a bundled DTD so that it is not looked
                for on the web at runtime. The XML is not validated against its DTD at runtime so be cautious
                to provide a valid XML defintion.
            </p>
            <p>
                When you write your XML definition file, add the following at the top of your XML to reference the latest release:
                <source><![CDATA[
<!DOCTYPE aspectwerkz PUBLIC
    "-//AspectWerkz//DTD//EN"
    "http://aspectwerkz.codehaus.org/dtd/aspectwerkz.dtd">
            ]]></source>
            </p>
            <p>
                It is possible to specify a specific released version number as well (starting with 0.8)
                <source><![CDATA[
<!DOCTYPE aspectwerkz PUBLIC
    "-//AspectWerkz//DTD 1.0//EN"
    "http://aspectwerkz.codehaus.org/dtd/aspectwerkz_1_0.dtd">
                ]]></source>
            </p>
        </section>
           <section name="Example of an XML definition">
            <p>
                Here is an example where all the definitions are put together into a single
                <code>AspectWerkz</code> XML definition file.
            </p>
            <source><![CDATA[
<aspectwerkz>
    <system id="sample">
        <package name="examples">

            <aspect class="caching.CachingAspect" deployment-model="perInstance">
                <param name="timeout" value="10"/>

                <introduce class="IntroductionTestAspect$MyImpl"
                           bind-to="within(test.ToBeIntroduced)"/>

                <pointcut name="callee"
                          expression="execution(int examples.caching.Pi.getPiDecimal(int))"/>

                <pointcut name="caller"
                          expression="call(int examples.caching.Pi.getPiDecimal(int)) && within(examples.caching.*)"/>

                <advice name="invocationCounter"
                        type="before"
                        bind-to="caller"/>

                <advice name="cache"
                        type="around"
                        bind-to="callee"/>
            </aspect>
        </package>
    </system>
</aspectwerkz>
            ]]></source>
        </section>
    </body>
</document>
