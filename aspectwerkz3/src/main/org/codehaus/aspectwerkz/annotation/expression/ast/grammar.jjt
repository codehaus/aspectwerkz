/**************************************************************************************
 * Copyright (c) Jonas Bonér, Alexandre Vasseur. All rights reserved.                 *
 * http://aspectwerkz.codehaus.org                                                    *
 * ---------------------------------------------------------------------------------- *
 * The software in this package is published under the terms of the LGPL license      *
 * a copy of which has been included with this distribution in the license.txt file.  *
 **************************************************************************************/

/**
 * JJTree grammar for annotation expressions.
 *
 * @author <a href="mailto:jboner@codehaus.org">Jonas Bonér</a>
 */

options {
    MULTI=true;
    VISITOR=true;
    NODE_DEFAULT_VOID=true;
    NODE_PACKAGE="org.codehaus.aspectwerkz.annotation.expression.ast";
    NODE_USES_PARSER=false;
}

PARSER_BEGIN(AnnotationParser)
/**************************************************************************************
 * Copyright (c) Jonas Bonér, Alexandre Vasseur. All rights reserved.                 *
 * http://aspectwerkz.codehaus.org                                                    *
 * ---------------------------------------------------------------------------------- *
 * The software in this package is published under the terms of the LGPL license      *
 * a copy of which has been included with this distribution in the license.txt file.  *
 **************************************************************************************/
package org.codehaus.aspectwerkz.annotation.expression.ast;

import java.lang.reflect.Modifier;
import java.io.Reader;
import java.io.StringReader;

/**
 * The annotation parser.
 *
 * @author <a href="mailto:jboner@codehaus.org">Jonas Bonér</a>
 */
public class AnnotationParser {

    public ASTRoot parse(String annotation) throws ParseException {
        return parse(new StringReader(annotation));
    }

    public ASTRoot parse(Reader reader) throws ParseException {
        ReInit(reader);
        return Root();
    }
}
PARSER_END(AnnotationParser)

//------------------ Global lexical scope ------------------

SKIP : /* WHITE SPACE */
{ " " | "\t" }

TOKEN :
{
  < DOT : "." >
| < INTEGER: ("-")? ["1"-"9"] (["0"-"9"])* (["l", "L"])? | "0" >
| < HEXNUMBER: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ (["l","L"])? >
| < OCTNUMBER: "0" (["0"-"7"])* (["l","L"])? >
| < FLOAT: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < #DIGIT: ["0"-"9"] >
| < BOOLEAN : "true" | "false" | "TRUE" | "FALSE" >
| < STRING : "\"" (<CHAR_LETTER>)* "\"" >
| < CHAR : "'" <CHAR_LETTER> "'" >
| < NEWLINE : "\n" >
| < LEFT_PARENTHEZIS : "(" >
| < RIGHT_PARENTHEZIS : ")" >
| < LEFT_BRACKET : "{" >
| < RIGHT_BRACKET : "}" >
| < COMMA : "," >
| < EQUALS : "=" >
| < AT : "@" >
| < CHAR_LETTER : (~["\n","\r", "'","\\", "\""]) >
| < ANNOTATION : <AT> <JAVA_NAME> >
| < JAVA_TYPE: <JAVA_NAME> (<DOT> <JAVA_NAME>)* >
| < JAVA_NAME: (<JAVA_LETTER>)+ >
| < #JAVA_LETTER: ["a"-"z", "A"-"Z", "_", "$", "+", "#", "0"-"9"] >
}

/**
 * Entry point.
 */
ASTRoot Root() #Root : {}
{
    Annotation() (<EOF> | "\r\n" | "\n")
    { return jjtThis; }
}

/**
 * Annotation.
 */
void Annotation() #Annotation : {}
{
    <ANNOTATION> "(" (LOOKAHEAD(2) (KeyValuePair()) | LOOKAHEAD(2) (Value()) )* ")"
}

/**
 * KeyValuePair.
 */
void KeyValuePair() #KeyValuePair :
{
    Token key, value;
}
{
    key=<JAVA_TYPE>
    {
        jjtThis.setKey(key.image);
    }
    "="
    Value()
}

/**
 * Value.
 *
 * @TODO: nested annotations
 */
void Value() : {}
{
// Annotation() |
      Char()
    | String()
    | Array()
    | Identifier()
    | Boolean()
    | Integer()
    | Float()
    | Hex()
    | Oct()
}

/**
 * Identifier.
 */
void Identifier() #Identifier :
{
    Token value;
}
{
    value=<JAVA_TYPE>
    {
        jjtThis.setValue(value.image);
    }
}

/**
 * Boolean.
 */
void Boolean() #Boolean :
{
    Token value;
}
{
    value=<BOOLEAN>
    {
        jjtThis.setValue(value.image);
    }
}

/**
 * Char.
 */
void Char() #Char :
{
    Token value;
}
{
    value=<CHAR>
    {
        jjtThis.setValue(value.image);
    }
}

/**
 * String.
 */
void String() #String :
{
    Token value;
}
{
    value=<STRING>
    {
        jjtThis.setValue(value.image);
    }
}

/**
 * Array.
 */
void Array() #Array : {}
{
    "{" [Value() (LOOKAHEAD(2) "," Value())* [","]] "}"
}

/**
 * Integer.
 */
void Integer() #Integer :
{
    Token value;
}
{
    value=<INTEGER>
    {
        jjtThis.setValue(value.image);
    }
}

/**
 * Float.
 */
void Float() #Float :
{
    Token value;
}
{
    value=<FLOAT>
    {
        jjtThis.setValue(value.image);
    }
}

/**
 * Hex.
 */
void Hex() #Hex :
{
    Token value;
}
{
    value=<HEXNUMBER>
    {
        jjtThis.setValue(value.image);
    }
}

/**
 * Oct.
 */
void Oct() #Oct :
{
    Token value;
}
{
    value=<OCTNUMBER>
    {
        jjtThis.setValue(value.image);
    }
}
