/* Generated By:JJTree&JavaCC: Do not edit this line. ExpressionParserTokenManager.java */

/**************************************************************************************
 * Copyright (c) Jonas Bonér, Alexandre Vasseur. All rights reserved.                 *
 * http://aspectwerkz.codehaus.org                                                    *
 * ---------------------------------------------------------------------------------- *
 * The software in this package is published under the terms of the LGPL license      *
 * a copy of which has been included with this distribution in the license.txt file.  *
 **************************************************************************************/
package org.codehaus.aspectwerkz.expression.ast;

import java.io.Reader;
import java.io.StringReader;
import java.lang.reflect.Modifier;

public class ExpressionParserTokenManager implements ExpressionParserConstants {
    public static java.io.PrintStream debugStream = System.out;
    static final int[] jjnextStates = {
                                          6, 7, 9, 7, 9, 10, 7, 8, 12, 14, 15, 7, 8, 10, 16, 17, 19, 5, 12, 14, 15, 6, 8,
                                          10, 11, 17, 14, 18, 17, 19, 20, 8, 9,
                                      };
    public static final String[] jjstrLiteralImages = {
                                                          "", null, null, null, null, null, null,
                                                          "\145\170\145\143\165\164\151\157\156\50",
                                                          "\143\141\154\154\50", "\163\145\164\50", "\147\145\164\50",
                                                          "\150\141\156\144\154\145\162\50",
                                                          "\167\151\164\150\151\156\50",
                                                          "\167\151\164\150\151\156\143\157\144\145\50",
                                                          "\163\164\141\164\151\143\151\156\151\164\151\141\154\151\172\141\164\151\157\156\50",
                                                          "\143\146\154\157\167\50",
                                                          "\143\146\154\157\167\142\145\154\157\167\50",
                                                          "\141\162\147\163\50", "\164\141\162\147\145\164\50",
                                                          "\164\150\151\163\50", "\151\146\50", null, null, null, null,
                                                          null, null, "\160\162\151\166\141\164\145",
                                                          "\160\162\157\164\145\143\164\145\144",
                                                          "\160\165\142\154\151\143", "\163\164\141\164\151\143",
                                                          "\141\142\163\164\162\141\143\164", "\146\151\156\141\154",
                                                          null, null, null, null, "\51", "\53", null, null,
                                                          "\160\165\142\154\151\143",
                                                          "\160\162\157\164\145\143\164\145\144",
                                                          "\160\162\151\166\141\164\145", "\163\164\141\164\151\143",
                                                          "\141\142\163\164\162\141\143\164", "\146\151\156\141\154",
                                                          "\156\141\164\151\166\145",
                                                          "\163\171\156\143\150\162\157\156\151\172\145\144", null, null,
                                                          null, null, "\54", "\50", "\51", null, null, null,
                                                          "\160\162\151\166\141\164\145",
                                                          "\160\162\157\164\145\143\164\145\144",
                                                          "\160\165\142\154\151\143", "\163\164\141\164\151\143",
                                                          "\141\142\163\164\162\141\143\164", "\146\151\156\141\154",
                                                          "\164\162\141\156\163\151\145\156\164", null, null, null, null,
                                                          null, "\51", null, null, null, null, "\53", null, null, null,
                                                          "\50", "\51",
                                                      };
    public static final String[] lexStateNames = { "DEFAULT", "CLASS", "METHOD", "FIELD", "PARAMETERS", };
    public static final int[] jjnewLexState = {
                                                  -1, -1, -1, -1, -1, -1, -1, 2, 2, 3, 3, 1, 1, 2, 1, -1, -1, -1, 1, 1,
                                                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,
                                                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,
                                                  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1,
                                                  -1, -1, -1, -1, -1, -1, -1, -1,
                                              };
    static final long[] jjtoToken = { 0xf8fbfe67f91ffff9L, 0x378b7L, };
    static final long[] jjtoSkip = { 0x600018006000006L, 0x300L, };
    static protected SimpleCharStream input_stream;
    static private final int[] jjrounds = new int[26];
    static private final int[] jjstateSet = new int[52];
    static protected char curChar;
    static int curLexState = 0;
    static int defaultLexState = 0;
    static int jjnewStateCnt;
    static int jjround;
    static int jjmatchedPos;
    static int jjmatchedKind;

    public ExpressionParserTokenManager(SimpleCharStream stream) {
        if (input_stream != null)
            throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.",
                                    TokenMgrError.STATIC_LEXER_ERROR);
        input_stream = stream;
    }

    public ExpressionParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    public static void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1) {
        switch (pos) {
            case 0:
                if ((active0 & 0x20000L) != 0L) {
                    jjmatchedKind = 6;
                    return 3;
                }
                if ((active0 & 0x1dff80L) != 0L) {
                    jjmatchedKind = 6;
                    return 23;
                }
                return -1;
            case 1:
                if ((active0 & 0x1fff80L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 1;
                    return 23;
                }
                return -1;
            case 2:
                if ((active0 & 0xfff80L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 2;
                    return 23;
                }
                return -1;
            case 3:
                if ((active0 & 0xff980L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 3;
                    return 23;
                }
                return -1;
            case 4:
                if ((active0 & 0x5f880L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 4;
                    return 23;
                }
                return -1;
            case 5:
                if ((active0 & 0x57880L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 5;
                    return 23;
                }
                return -1;
            case 6:
                if ((active0 & 0x16880L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 6;
                    return 23;
                }
                return -1;
            case 7:
                if ((active0 & 0x16080L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 7;
                    return 23;
                }
                return -1;
            case 8:
                if ((active0 & 0x16080L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 8;
                    return 23;
                }
                return -1;
            case 9:
                if ((active0 & 0x16000L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 9;
                    return 23;
                }
                return -1;
            case 10:
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 10;
                    return 23;
                }
                return -1;
            case 11:
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 11;
                    return 23;
                }
                return -1;
            case 12:
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 12;
                    return 23;
                }
                return -1;
            case 13:
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 13;
                    return 23;
                }
                return -1;
            case 14:
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 14;
                    return 23;
                }
                return -1;
            case 15:
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 15;
                    return 23;
                }
                return -1;
            case 16:
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 16;
                    return 23;
                }
                return -1;
            case 17:
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 17;
                    return 23;
                }
                return -1;
            case 18:
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 18;
                    return 23;
                }
                return -1;
            case 19:
                if ((active0 & 0x4000L) != 0L) {
                    jjmatchedKind = 6;
                    jjmatchedPos = 19;
                    return 23;
                }
                return -1;
            default:
                return -1;
        }
    }

    private static final int jjStartNfa_0(int pos, long active0, long active1) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
    }

    static private final int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    static private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    static private final int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 40:
                return jjStopAtPos(0, 80);
            case 41:
                return jjStopAtPos(0, 81);
            case 97:
                return jjMoveStringLiteralDfa1_0(0x20000L);
            case 99:
                return jjMoveStringLiteralDfa1_0(0x18100L);
            case 101:
                return jjMoveStringLiteralDfa1_0(0x80L);
            case 103:
                return jjMoveStringLiteralDfa1_0(0x400L);
            case 104:
                return jjMoveStringLiteralDfa1_0(0x800L);
            case 105:
                return jjMoveStringLiteralDfa1_0(0x100000L);
            case 115:
                return jjMoveStringLiteralDfa1_0(0x4200L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0xc0000L);
            case 119:
                return jjMoveStringLiteralDfa1_0(0x3000L);
            default:
                return jjMoveNfa_0(1, 0);
        }
    }

    static private final int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0, 0L);
            return 1;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x40900L);
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x600L);
            case 102:
                return jjMoveStringLiteralDfa2_0(active0, 0x118000L);
            case 104:
                return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
            case 105:
                return jjMoveStringLiteralDfa2_0(active0, 0x3000L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
            case 116:
                return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
            case 120:
                return jjMoveStringLiteralDfa2_0(active0, 0x80L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(0, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0, 0L);
            return 2;
        }
        switch (curChar) {
            case 40:
                if ((active0 & 0x100000L) != 0L)
                    return jjStopAtPos(2, 20);
                break;
            case 97:
                return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x80L);
            case 103:
                return jjMoveStringLiteralDfa3_0(active0, 0x20000L);
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
            case 108:
                return jjMoveStringLiteralDfa3_0(active0, 0x18100L);
            case 110:
                return jjMoveStringLiteralDfa3_0(active0, 0x800L);
            case 114:
                return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
            case 116:
                return jjMoveStringLiteralDfa3_0(active0, 0x3600L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(1, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0, 0L);
            return 3;
        }
        switch (curChar) {
            case 40:
                if ((active0 & 0x200L) != 0L)
                    return jjStopAtPos(3, 9);
                else if ((active0 & 0x400L) != 0L)
                    return jjStopAtPos(3, 10);
                break;
            case 99:
                return jjMoveStringLiteralDfa4_0(active0, 0x80L);
            case 100:
                return jjMoveStringLiteralDfa4_0(active0, 0x800L);
            case 103:
                return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
            case 104:
                return jjMoveStringLiteralDfa4_0(active0, 0x3000L);
            case 108:
                return jjMoveStringLiteralDfa4_0(active0, 0x100L);
            case 111:
                return jjMoveStringLiteralDfa4_0(active0, 0x18000L);
            case 115:
                return jjMoveStringLiteralDfa4_0(active0, 0xa0000L);
            case 116:
                return jjMoveStringLiteralDfa4_0(active0, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(2, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0, 0L);
            return 4;
        }
        switch (curChar) {
            case 40:
                if ((active0 & 0x100L) != 0L)
                    return jjStopAtPos(4, 8);
                else if ((active0 & 0x20000L) != 0L)
                    return jjStopAtPos(4, 17);
                else if ((active0 & 0x80000L) != 0L)
                    return jjStopAtPos(4, 19);
                break;
            case 101:
                return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0x7000L);
            case 108:
                return jjMoveStringLiteralDfa5_0(active0, 0x800L);
            case 117:
                return jjMoveStringLiteralDfa5_0(active0, 0x80L);
            case 119:
                return jjMoveStringLiteralDfa5_0(active0, 0x18000L);
            default:
                break;
        }
        return jjStartNfa_0(3, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(3, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0, 0L);
            return 5;
        }
        switch (curChar) {
            case 40:
                if ((active0 & 0x8000L) != 0L)
                    return jjStopAtPos(5, 15);
                break;
            case 98:
                return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
            case 99:
                return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
            case 101:
                return jjMoveStringLiteralDfa6_0(active0, 0x800L);
            case 110:
                return jjMoveStringLiteralDfa6_0(active0, 0x3000L);
            case 116:
                return jjMoveStringLiteralDfa6_0(active0, 0x40080L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(4, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0, 0L);
            return 6;
        }
        switch (curChar) {
            case 40:
                if ((active0 & 0x1000L) != 0L)
                    return jjStopAtPos(6, 12);
                else if ((active0 & 0x40000L) != 0L)
                    return jjStopAtPos(6, 18);
                break;
            case 99:
                return jjMoveStringLiteralDfa7_0(active0, 0x2000L);
            case 101:
                return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
            case 105:
                return jjMoveStringLiteralDfa7_0(active0, 0x4080L);
            case 114:
                return jjMoveStringLiteralDfa7_0(active0, 0x800L);
            default:
                break;
        }
        return jjStartNfa_0(5, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa7_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(5, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(6, active0, 0L);
            return 7;
        }
        switch (curChar) {
            case 40:
                if ((active0 & 0x800L) != 0L)
                    return jjStopAtPos(7, 11);
                break;
            case 108:
                return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
            case 110:
                return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
            case 111:
                return jjMoveStringLiteralDfa8_0(active0, 0x2080L);
            default:
                break;
        }
        return jjStartNfa_0(6, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa8_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(6, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(7, active0, 0L);
            return 8;
        }
        switch (curChar) {
            case 100:
                return jjMoveStringLiteralDfa9_0(active0, 0x2000L);
            case 105:
                return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
            case 110:
                return jjMoveStringLiteralDfa9_0(active0, 0x80L);
            case 111:
                return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
            default:
                break;
        }
        return jjStartNfa_0(7, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa9_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(7, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(8, active0, 0L);
            return 9;
        }
        switch (curChar) {
            case 40:
                if ((active0 & 0x80L) != 0L)
                    return jjStopAtPos(9, 7);
                break;
            case 101:
                return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
            case 116:
                return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
            case 119:
                return jjMoveStringLiteralDfa10_0(active0, 0x10000L);
            default:
                break;
        }
        return jjStartNfa_0(8, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa10_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(8, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(9, active0, 0L);
            return 10;
        }
        switch (curChar) {
            case 40:
                if ((active0 & 0x2000L) != 0L)
                    return jjStopAtPos(10, 13);
                else if ((active0 & 0x10000L) != 0L)
                    return jjStopAtPos(10, 16);
                break;
            case 105:
                return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(9, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa11_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(9, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(10, active0, 0L);
            return 11;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(10, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa12_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(10, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(11, active0, 0L);
            return 12;
        }
        switch (curChar) {
            case 108:
                return jjMoveStringLiteralDfa13_0(active0, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(11, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa13_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(11, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(12, active0, 0L);
            return 13;
        }
        switch (curChar) {
            case 105:
                return jjMoveStringLiteralDfa14_0(active0, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(12, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa14_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(12, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(13, active0, 0L);
            return 14;
        }
        switch (curChar) {
            case 122:
                return jjMoveStringLiteralDfa15_0(active0, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(13, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa15_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(13, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(14, active0, 0L);
            return 15;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa16_0(active0, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(14, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa16_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(14, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(15, active0, 0L);
            return 16;
        }
        switch (curChar) {
            case 116:
                return jjMoveStringLiteralDfa17_0(active0, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(15, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa17_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(15, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(16, active0, 0L);
            return 17;
        }
        switch (curChar) {
            case 105:
                return jjMoveStringLiteralDfa18_0(active0, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(16, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa18_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(16, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(17, active0, 0L);
            return 18;
        }
        switch (curChar) {
            case 111:
                return jjMoveStringLiteralDfa19_0(active0, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(17, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa19_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(17, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(18, active0, 0L);
            return 19;
        }
        switch (curChar) {
            case 110:
                return jjMoveStringLiteralDfa20_0(active0, 0x4000L);
            default:
                break;
        }
        return jjStartNfa_0(18, active0, 0L);
    }

    static private final int jjMoveStringLiteralDfa20_0(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_0(18, old0, 0L);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(19, active0, 0L);
            return 20;
        }
        switch (curChar) {
            case 40:
                if ((active0 & 0x4000L) != 0L)
                    return jjStopAtPos(20, 14);
                break;
            default:
                break;
        }
        return jjStartNfa_0(19, active0, 0L);
    }

    static private final void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    static private final void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    static private final void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    static private final void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    static private final void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    static private final int jjMoveNfa_0(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 26;
        int i = 1;
        jjstateSet[0] = startState;
        int j;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
MatchLoop: 
                do {
                    switch (jjstateSet[--i]) {
                        case 3:
                        case 23:
                            if ((0x3ff401000000000L & l) == 0L)
                                break;
                            if (kind > 6)
                                kind = 6;
                            jjCheckNAdd(23);
                            break;
                        case 1:
                            if ((0x3ff401000000000L & l) != 0L) {
                                if (kind > 6)
                                    kind = 6;
                                jjCheckNAdd(23);
                            } else if (curChar == 33) {
                                if (kind > 5)
                                    kind = 5;
                            } else if (curChar == 38) {
                                if (kind > 3)
                                    kind = 3;
                            }
                            if (curChar == 46)
                                jjstateSet[jjnewStateCnt++] = 25;
                            else if (curChar == 38)
                                jjstateSet[jjnewStateCnt++] = 0;
                            break;
                        case 0:
                            if ((curChar == 38) && (kind > 3))
                                kind = 3;
                            break;
                        case 8:
                            if ((curChar == 38) && (kind > 3))
                                kind = 3;
                            break;
                        case 16:
                            if (curChar == 33)
                                kind = 5;
                            break;
                        case 24:
                            if (curChar == 46)
                                jjstateSet[jjnewStateCnt++] = 25;
                            break;
                        case 25:
                            if ((curChar == 46) && (kind > 24))
                                kind = 24;
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do {
                    switch (jjstateSet[--i]) {
                        case 3:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 6)
                                    kind = 6;
                                jjCheckNAdd(23);
                            }
                            if (curChar == 110)
                                jjstateSet[jjnewStateCnt++] = 2;
                            break;
                        case 1:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 6)
                                    kind = 6;
                                jjCheckNAdd(23);
                            } else if (curChar == 124) {
                                if (kind > 4)
                                    kind = 4;
                            }
                            if (curChar == 78)
                                jjstateSet[jjnewStateCnt++] = 21;
                            else if (curChar == 110)
                                jjstateSet[jjnewStateCnt++] = 18;
                            else if (curChar == 79)
                                jjstateSet[jjnewStateCnt++] = 13;
                            else if (curChar == 111)
                                jjstateSet[jjnewStateCnt++] = 11;
                            else if (curChar == 124)
                                jjstateSet[jjnewStateCnt++] = 9;
                            else if (curChar == 65)
                                jjstateSet[jjnewStateCnt++] = 6;
                            else if (curChar == 97)
                                jjstateSet[jjnewStateCnt++] = 3;
                            break;
                        case 2:
                            if ((curChar == 100) && (kind > 3))
                                kind = 3;
                            break;
                        case 4:
                            if (curChar == 97)
                                jjstateSet[jjnewStateCnt++] = 3;
                            break;
                        case 5:
                            if ((curChar == 68) && (kind > 3))
                                kind = 3;
                            break;
                        case 6:
                            if (curChar == 78)
                                jjstateSet[jjnewStateCnt++] = 5;
                            break;
                        case 7:
                            if (curChar == 65)
                                jjstateSet[jjnewStateCnt++] = 6;
                            break;
                        case 9:
                            if ((curChar == 124) && (kind > 4))
                                kind = 4;
                            break;
                        case 10:
                            if (curChar == 124)
                                jjstateSet[jjnewStateCnt++] = 9;
                            break;
                        case 11:
                            if ((curChar == 114) && (kind > 4))
                                kind = 4;
                            break;
                        case 12:
                            if (curChar == 111)
                                jjstateSet[jjnewStateCnt++] = 11;
                            break;
                        case 13:
                            if ((curChar == 82) && (kind > 4))
                                kind = 4;
                            break;
                        case 14:
                            if (curChar == 79)
                                jjstateSet[jjnewStateCnt++] = 13;
                            break;
                        case 15:
                            if ((curChar == 124) && (kind > 4))
                                kind = 4;
                            break;
                        case 17:
                            if ((curChar == 116) && (kind > 5))
                                kind = 5;
                            break;
                        case 18:
                            if (curChar == 111)
                                jjstateSet[jjnewStateCnt++] = 17;
                            break;
                        case 19:
                            if (curChar == 110)
                                jjstateSet[jjnewStateCnt++] = 18;
                            break;
                        case 20:
                            if ((curChar == 84) && (kind > 5))
                                kind = 5;
                            break;
                        case 21:
                            if (curChar == 79)
                                jjstateSet[jjnewStateCnt++] = 20;
                            break;
                        case 22:
                            if (curChar == 78)
                                jjstateSet[jjnewStateCnt++] = 21;
                            break;
                        case 23:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 6)
                                kind = 6;
                            jjCheckNAdd(23);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 26 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private static final int jjStopStringLiteralDfa_1(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x1f8000000L) != 0L) {
                    jjmatchedKind = 34;
                    return 12;
                }
                return -1;
            case 1:
                if ((active0 & 0x1f8000000L) != 0L) {
                    jjmatchedKind = 34;
                    jjmatchedPos = 1;
                    return 12;
                }
                return -1;
            case 2:
                if ((active0 & 0x1f8000000L) != 0L) {
                    jjmatchedKind = 34;
                    jjmatchedPos = 2;
                    return 12;
                }
                return -1;
            case 3:
                if ((active0 & 0x1f8000000L) != 0L) {
                    jjmatchedKind = 34;
                    jjmatchedPos = 3;
                    return 12;
                }
                return -1;
            case 4:
                if ((active0 & 0x100000000L) != 0L)
                    return 12;
                if ((active0 & 0xf8000000L) != 0L) {
                    jjmatchedKind = 34;
                    jjmatchedPos = 4;
                    return 12;
                }
                return -1;
            case 5:
                if ((active0 & 0x98000000L) != 0L) {
                    jjmatchedKind = 34;
                    jjmatchedPos = 5;
                    return 12;
                }
                if ((active0 & 0x60000000L) != 0L)
                    return 12;
                return -1;
            case 6:
                if ((active0 & 0x8000000L) != 0L)
                    return 12;
                if ((active0 & 0x90000000L) != 0L) {
                    jjmatchedKind = 34;
                    jjmatchedPos = 6;
                    return 12;
                }
                return -1;
            case 7:
                if ((active0 & 0x10000000L) != 0L) {
                    jjmatchedKind = 34;
                    jjmatchedPos = 7;
                    return 12;
                }
                if ((active0 & 0x80000000L) != 0L)
                    return 12;
                return -1;
            default:
                return -1;
        }
    }

    private static final int jjStartNfa_1(int pos, long active0) {
        return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
    }

    static private final int jjStartNfaWithStates_1(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_1(state, pos + 1);
    }

    static private final int jjMoveStringLiteralDfa0_1() {
        switch (curChar) {
            case 41:
                return jjStopAtPos(0, 37);
            case 43:
                return jjStopAtPos(0, 38);
            case 97:
                return jjMoveStringLiteralDfa1_1(0x80000000L);
            case 102:
                return jjMoveStringLiteralDfa1_1(0x100000000L);
            case 112:
                return jjMoveStringLiteralDfa1_1(0x38000000L);
            case 115:
                return jjMoveStringLiteralDfa1_1(0x40000000L);
            default:
                return jjMoveNfa_1(0, 0);
        }
    }

    static private final int jjMoveStringLiteralDfa1_1(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(0, active0);
            return 1;
        }
        switch (curChar) {
            case 98:
                return jjMoveStringLiteralDfa2_1(active0, 0x80000000L);
            case 105:
                return jjMoveStringLiteralDfa2_1(active0, 0x100000000L);
            case 114:
                return jjMoveStringLiteralDfa2_1(active0, 0x18000000L);
            case 116:
                return jjMoveStringLiteralDfa2_1(active0, 0x40000000L);
            case 117:
                return jjMoveStringLiteralDfa2_1(active0, 0x20000000L);
            default:
                break;
        }
        return jjStartNfa_1(0, active0);
    }

    static private final int jjMoveStringLiteralDfa2_1(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_1(0, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(1, active0);
            return 2;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa3_1(active0, 0x40000000L);
            case 98:
                return jjMoveStringLiteralDfa3_1(active0, 0x20000000L);
            case 105:
                return jjMoveStringLiteralDfa3_1(active0, 0x8000000L);
            case 110:
                return jjMoveStringLiteralDfa3_1(active0, 0x100000000L);
            case 111:
                return jjMoveStringLiteralDfa3_1(active0, 0x10000000L);
            case 115:
                return jjMoveStringLiteralDfa3_1(active0, 0x80000000L);
            default:
                break;
        }
        return jjStartNfa_1(1, active0);
    }

    static private final int jjMoveStringLiteralDfa3_1(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_1(1, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(2, active0);
            return 3;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa4_1(active0, 0x100000000L);
            case 108:
                return jjMoveStringLiteralDfa4_1(active0, 0x20000000L);
            case 116:
                return jjMoveStringLiteralDfa4_1(active0, 0xd0000000L);
            case 118:
                return jjMoveStringLiteralDfa4_1(active0, 0x8000000L);
            default:
                break;
        }
        return jjStartNfa_1(2, active0);
    }

    static private final int jjMoveStringLiteralDfa4_1(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_1(2, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(3, active0);
            return 4;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa5_1(active0, 0x8000000L);
            case 101:
                return jjMoveStringLiteralDfa5_1(active0, 0x10000000L);
            case 105:
                return jjMoveStringLiteralDfa5_1(active0, 0x60000000L);
            case 108:
                if ((active0 & 0x100000000L) != 0L)
                    return jjStartNfaWithStates_1(4, 32, 12);
                break;
            case 114:
                return jjMoveStringLiteralDfa5_1(active0, 0x80000000L);
            default:
                break;
        }
        return jjStartNfa_1(3, active0);
    }

    static private final int jjMoveStringLiteralDfa5_1(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_1(3, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(4, active0);
            return 5;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa6_1(active0, 0x80000000L);
            case 99:
                if ((active0 & 0x20000000L) != 0L)
                    return jjStartNfaWithStates_1(5, 29, 12);
                else if ((active0 & 0x40000000L) != 0L)
                    return jjStartNfaWithStates_1(5, 30, 12);
                return jjMoveStringLiteralDfa6_1(active0, 0x10000000L);
            case 116:
                return jjMoveStringLiteralDfa6_1(active0, 0x8000000L);
            default:
                break;
        }
        return jjStartNfa_1(4, active0);
    }

    static private final int jjMoveStringLiteralDfa6_1(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_1(4, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(5, active0);
            return 6;
        }
        switch (curChar) {
            case 99:
                return jjMoveStringLiteralDfa7_1(active0, 0x80000000L);
            case 101:
                if ((active0 & 0x8000000L) != 0L)
                    return jjStartNfaWithStates_1(6, 27, 12);
                break;
            case 116:
                return jjMoveStringLiteralDfa7_1(active0, 0x10000000L);
            default:
                break;
        }
        return jjStartNfa_1(5, active0);
    }

    static private final int jjMoveStringLiteralDfa7_1(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_1(5, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(6, active0);
            return 7;
        }
        switch (curChar) {
            case 101:
                return jjMoveStringLiteralDfa8_1(active0, 0x10000000L);
            case 116:
                if ((active0 & 0x80000000L) != 0L)
                    return jjStartNfaWithStates_1(7, 31, 12);
                break;
            default:
                break;
        }
        return jjStartNfa_1(6, active0);
    }

    static private final int jjMoveStringLiteralDfa8_1(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_1(6, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(7, active0);
            return 8;
        }
        switch (curChar) {
            case 100:
                if ((active0 & 0x10000000L) != 0L)
                    return jjStartNfaWithStates_1(8, 28, 12);
                break;
            default:
                break;
        }
        return jjStartNfa_1(7, active0);
    }

    static private final int jjMoveNfa_1(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 12;
        int i = 1;
        jjstateSet[0] = startState;
        int j;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
MatchLoop: 
                do {
                    switch (jjstateSet[--i]) {
                        case 12:
                            if ((0x3ff041000000000L & l) != 0L) {
                                if (kind > 34)
                                    kind = 34;
                                jjCheckNAddTwoStates(4, 5);
                            } else if (curChar == 46)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 0:
                            if ((0x3ff041000000000L & l) != 0L) {
                                if (kind > 34)
                                    kind = 34;
                                jjCheckNAddTwoStates(4, 5);
                            } else if (curChar == 46)
                                jjCheckNAdd(6);
                            break;
                        case 1:
                            if ((0x3ff041000000000L & l) == 0L)
                                break;
                            if (kind > 33)
                                kind = 33;
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 2:
                            if (curChar == 46)
                                jjstateSet[jjnewStateCnt++] = 3;
                            break;
                        case 3:
                            if (curChar != 46)
                                break;
                            if (kind > 33)
                                kind = 33;
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 4:
                            if ((0x3ff041000000000L & l) == 0L)
                                break;
                            if (kind > 34)
                                kind = 34;
                            jjCheckNAddTwoStates(4, 5);
                            break;
                        case 5:
                            if (curChar == 46)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 6:
                            if (curChar != 46)
                                break;
                            if (kind > 34)
                                kind = 34;
                            jjCheckNAddTwoStates(4, 5);
                            break;
                        case 7:
                            if ((0x3ff041000000000L & l) == 0L)
                                break;
                            if (kind > 34)
                                kind = 34;
                            jjCheckNAddTwoStates(7, 8);
                            break;
                        case 8:
                            if (curChar == 46)
                                jjCheckNAddStates(3, 5);
                            break;
                        case 9:
                            if (curChar == 46)
                                jjCheckNAdd(10);
                            break;
                        case 10:
                            if (curChar != 46)
                                break;
                            if (kind > 34)
                                kind = 34;
                            jjCheckNAddTwoStates(7, 8);
                            break;
                        case 11:
                            if (curChar == 46)
                                jjCheckNAdd(6);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do {
                    switch (jjstateSet[--i]) {
                        case 12:
                        case 4:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 34)
                                kind = 34;
                            jjCheckNAddTwoStates(4, 5);
                            break;
                        case 0:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 34)
                                    kind = 34;
                                jjCheckNAddTwoStates(4, 5);
                            } else if (curChar == 64)
                                jjCheckNAddTwoStates(1, 2);
                            break;
                        case 1:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 33)
                                kind = 33;
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 7:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 34)
                                kind = 34;
                            jjAddStates(6, 7);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 12 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private static final int jjStopStringLiteralDfa_3(int pos, long active0, long active1) {
        switch (pos) {
            case 0:
                if (((active0 & 0xf800000000000000L) != 0L) || ((active1 & 0x3L) != 0L)) {
                    jjmatchedKind = 68;
                    return 22;
                }
                return -1;
            case 1:
                if (((active0 & 0xf800000000000000L) != 0L) || ((active1 & 0x3L) != 0L)) {
                    jjmatchedKind = 68;
                    jjmatchedPos = 1;
                    return 22;
                }
                return -1;
            case 2:
                if (((active0 & 0xf800000000000000L) != 0L) || ((active1 & 0x3L) != 0L)) {
                    jjmatchedKind = 68;
                    jjmatchedPos = 2;
                    return 22;
                }
                return -1;
            case 3:
                if (((active0 & 0xf800000000000000L) != 0L) || ((active1 & 0x3L) != 0L)) {
                    jjmatchedKind = 68;
                    jjmatchedPos = 3;
                    return 22;
                }
                return -1;
            case 4:
                if ((active1 & 0x1L) != 0L)
                    return 22;
                if (((active0 & 0xf800000000000000L) != 0L) || ((active1 & 0x2L) != 0L)) {
                    jjmatchedKind = 68;
                    jjmatchedPos = 4;
                    return 22;
                }
                return -1;
            case 5:
                if ((active0 & 0x6000000000000000L) != 0L)
                    return 22;
                if (((active0 & 0x9800000000000000L) != 0L) || ((active1 & 0x2L) != 0L)) {
                    jjmatchedKind = 68;
                    jjmatchedPos = 5;
                    return 22;
                }
                return -1;
            case 6:
                if (((active0 & 0x9000000000000000L) != 0L) || ((active1 & 0x2L) != 0L)) {
                    jjmatchedKind = 68;
                    jjmatchedPos = 6;
                    return 22;
                }
                if ((active0 & 0x800000000000000L) != 0L)
                    return 22;
                return -1;
            case 7:
                if ((active0 & 0x8000000000000000L) != 0L)
                    return 22;
                if (((active0 & 0x1000000000000000L) != 0L) || ((active1 & 0x2L) != 0L)) {
                    jjmatchedKind = 68;
                    jjmatchedPos = 7;
                    return 22;
                }
                return -1;
            default:
                return -1;
        }
    }

    private static final int jjStartNfa_3(int pos, long active0, long active1) {
        return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0, active1), pos + 1);
    }

    static private final int jjStartNfaWithStates_3(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_3(state, pos + 1);
    }

    static private final int jjMoveStringLiteralDfa0_3() {
        switch (curChar) {
            case 41:
                return jjStopAtPos(0, 71);
            case 97:
                return jjMoveStringLiteralDfa1_3(0x8000000000000000L, 0x0L);
            case 102:
                return jjMoveStringLiteralDfa1_3(0x0L, 0x1L);
            case 112:
                return jjMoveStringLiteralDfa1_3(0x3800000000000000L, 0x0L);
            case 115:
                return jjMoveStringLiteralDfa1_3(0x4000000000000000L, 0x0L);
            case 116:
                return jjMoveStringLiteralDfa1_3(0x0L, 0x2L);
            default:
                return jjMoveNfa_3(0, 0);
        }
    }

    static private final int jjMoveStringLiteralDfa1_3(long active0, long active1) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_3(0, active0, active1);
            return 1;
        }
        switch (curChar) {
            case 98:
                return jjMoveStringLiteralDfa2_3(active0, 0x8000000000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa2_3(active0, 0L, active1, 0x1L);
            case 114:
                return jjMoveStringLiteralDfa2_3(active0, 0x1800000000000000L, active1, 0x2L);
            case 116:
                return jjMoveStringLiteralDfa2_3(active0, 0x4000000000000000L, active1, 0L);
            case 117:
                return jjMoveStringLiteralDfa2_3(active0, 0x2000000000000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_3(0, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa2_3(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_3(0, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_3(1, active0, active1);
            return 2;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa3_3(active0, 0x4000000000000000L, active1, 0x2L);
            case 98:
                return jjMoveStringLiteralDfa3_3(active0, 0x2000000000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa3_3(active0, 0x800000000000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa3_3(active0, 0L, active1, 0x1L);
            case 111:
                return jjMoveStringLiteralDfa3_3(active0, 0x1000000000000000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa3_3(active0, 0x8000000000000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_3(1, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa3_3(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_3(1, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_3(2, active0, active1);
            return 3;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0x1L);
            case 108:
                return jjMoveStringLiteralDfa4_3(active0, 0x2000000000000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa4_3(active0, 0L, active1, 0x2L);
            case 116:
                return jjMoveStringLiteralDfa4_3(active0, 0xd000000000000000L, active1, 0L);
            case 118:
                return jjMoveStringLiteralDfa4_3(active0, 0x800000000000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_3(2, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa4_3(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_3(2, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_3(3, active0, active1);
            return 4;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa5_3(active0, 0x800000000000000L, active1, 0L);
            case 101:
                return jjMoveStringLiteralDfa5_3(active0, 0x1000000000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa5_3(active0, 0x6000000000000000L, active1, 0L);
            case 108:
                if ((active1 & 0x1L) != 0L)
                    return jjStartNfaWithStates_3(4, 64, 22);
                break;
            case 114:
                return jjMoveStringLiteralDfa5_3(active0, 0x8000000000000000L, active1, 0L);
            case 115:
                return jjMoveStringLiteralDfa5_3(active0, 0L, active1, 0x2L);
            default:
                break;
        }
        return jjStartNfa_3(3, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa5_3(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_3(3, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_3(4, active0, active1);
            return 5;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa6_3(active0, 0x8000000000000000L, active1, 0L);
            case 99:
                if ((active0 & 0x2000000000000000L) != 0L)
                    return jjStartNfaWithStates_3(5, 61, 22);
                else if ((active0 & 0x4000000000000000L) != 0L)
                    return jjStartNfaWithStates_3(5, 62, 22);
                return jjMoveStringLiteralDfa6_3(active0, 0x1000000000000000L, active1, 0L);
            case 105:
                return jjMoveStringLiteralDfa6_3(active0, 0L, active1, 0x2L);
            case 116:
                return jjMoveStringLiteralDfa6_3(active0, 0x800000000000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_3(4, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa6_3(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_3(4, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_3(5, active0, active1);
            return 6;
        }
        switch (curChar) {
            case 99:
                return jjMoveStringLiteralDfa7_3(active0, 0x8000000000000000L, active1, 0L);
            case 101:
                if ((active0 & 0x800000000000000L) != 0L)
                    return jjStartNfaWithStates_3(6, 59, 22);
                return jjMoveStringLiteralDfa7_3(active0, 0L, active1, 0x2L);
            case 116:
                return jjMoveStringLiteralDfa7_3(active0, 0x1000000000000000L, active1, 0L);
            default:
                break;
        }
        return jjStartNfa_3(5, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa7_3(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_3(5, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_3(6, active0, active1);
            return 7;
        }
        switch (curChar) {
            case 101:
                return jjMoveStringLiteralDfa8_3(active0, 0x1000000000000000L, active1, 0L);
            case 110:
                return jjMoveStringLiteralDfa8_3(active0, 0L, active1, 0x2L);
            case 116:
                if ((active0 & 0x8000000000000000L) != 0L)
                    return jjStartNfaWithStates_3(7, 63, 22);
                break;
            default:
                break;
        }
        return jjStartNfa_3(6, active0, active1);
    }

    static private final int jjMoveStringLiteralDfa8_3(long old0, long active0, long old1, long active1) {
        if (((active0 &= old0) | (active1 &= old1)) == 0L)
            return jjStartNfa_3(6, old0, old1);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_3(7, active0, active1);
            return 8;
        }
        switch (curChar) {
            case 100:
                if ((active0 & 0x1000000000000000L) != 0L)
                    return jjStartNfaWithStates_3(8, 60, 22);
                break;
            case 116:
                if ((active1 & 0x2L) != 0L)
                    return jjStartNfaWithStates_3(8, 65, 22);
                break;
            default:
                break;
        }
        return jjStartNfa_3(7, active0, active1);
    }

    static private final int jjMoveNfa_3(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 22;
        int i = 1;
        jjstateSet[0] = startState;
        int j;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
MatchLoop: 
                do {
                    switch (jjstateSet[--i]) {
                        case 22:
                            if ((0x3ff0c1000000000L & l) != 0L)
                                jjCheckNAddStates(8, 10);
                            else if (curChar == 46)
                                jjCheckNAddStates(11, 13);
                            if ((0x3ff0c1000000000L & l) != 0L) {
                                if (kind > 68)
                                    kind = 68;
                                jjCheckNAddTwoStates(5, 6);
                            } else if (curChar == 46)
                                jjCheckNAddStates(14, 16);
                            break;
                        case 0:
                            if ((0x3ff0c1000000000L & l) != 0L) {
                                if (kind > 68)
                                    kind = 68;
                                jjCheckNAddStates(17, 21);
                            } else if (curChar == 46)
                                jjCheckNAddTwoStates(7, 16);
                            break;
                        case 1:
                            if ((0x3ff0c1000000000L & l) == 0L)
                                break;
                            if (kind > 66)
                                kind = 66;
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 2:
                            if (curChar == 46)
                                jjstateSet[jjnewStateCnt++] = 3;
                            break;
                        case 3:
                            if (curChar != 46)
                                break;
                            if (kind > 66)
                                kind = 66;
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 4:
                            if ((0x3ff0c1000000000L & l) == 0L)
                                break;
                            if (kind > 68)
                                kind = 68;
                            jjCheckNAddStates(17, 21);
                            break;
                        case 5:
                            if ((0x3ff0c1000000000L & l) == 0L)
                                break;
                            if (kind > 68)
                                kind = 68;
                            jjCheckNAddTwoStates(5, 6);
                            break;
                        case 6:
                            if (curChar == 46)
                                jjCheckNAddStates(11, 13);
                            break;
                        case 7:
                            if (curChar != 46)
                                break;
                            if (kind > 68)
                                kind = 68;
                            jjCheckNAddTwoStates(5, 6);
                            break;
                        case 8:
                            if ((0x3ff0c1000000000L & l) == 0L)
                                break;
                            if (kind > 68)
                                kind = 68;
                            jjCheckNAddTwoStates(8, 9);
                            break;
                        case 9:
                            if (curChar == 46)
                                jjCheckNAddStates(22, 24);
                            break;
                        case 10:
                            if (curChar == 46)
                                jjCheckNAdd(11);
                            break;
                        case 11:
                            if (curChar != 46)
                                break;
                            if (kind > 68)
                                kind = 68;
                            jjCheckNAddTwoStates(8, 9);
                            break;
                        case 12:
                            if ((0x3ff0c1000000000L & l) != 0L)
                                jjCheckNAddStates(8, 10);
                            break;
                        case 15:
                            if (curChar == 46)
                                jjCheckNAddStates(14, 16);
                            break;
                        case 16:
                            if (curChar == 46)
                                jjCheckNAddStates(8, 10);
                            break;
                        case 17:
                            if ((0x3ff0c1000000000L & l) != 0L)
                                jjCheckNAddStates(25, 27);
                            break;
                        case 18:
                            if (curChar == 46)
                                jjCheckNAddStates(28, 30);
                            break;
                        case 19:
                            if (curChar == 46)
                                jjCheckNAdd(20);
                            break;
                        case 20:
                            if (curChar == 46)
                                jjCheckNAddStates(25, 27);
                            break;
                        case 21:
                            if (curChar == 46)
                                jjCheckNAddTwoStates(7, 16);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do {
                    switch (jjstateSet[--i]) {
                        case 22:
                            if ((0x7fffffe87fffffeL & l) != 0L)
                                jjCheckNAddStates(8, 10);
                            else if (curChar == 91)
                                jjstateSet[jjnewStateCnt++] = 13;
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 68)
                                    kind = 68;
                                jjCheckNAddTwoStates(5, 6);
                            }
                            break;
                        case 0:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 68)
                                    kind = 68;
                                jjCheckNAddStates(17, 21);
                            } else if (curChar == 64)
                                jjCheckNAddTwoStates(1, 2);
                            break;
                        case 1:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 66)
                                kind = 66;
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 4:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 68)
                                kind = 68;
                            jjCheckNAddStates(17, 21);
                            break;
                        case 5:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 68)
                                kind = 68;
                            jjCheckNAddTwoStates(5, 6);
                            break;
                        case 8:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 68)
                                kind = 68;
                            jjAddStates(31, 32);
                            break;
                        case 12:
                            if ((0x7fffffe87fffffeL & l) != 0L)
                                jjCheckNAddStates(8, 10);
                            break;
                        case 13:
                            if (curChar != 93)
                                break;
                            kind = 69;
                            jjCheckNAdd(14);
                            break;
                        case 14:
                            if (curChar == 91)
                                jjstateSet[jjnewStateCnt++] = 13;
                            break;
                        case 17:
                            if ((0x7fffffe87fffffeL & l) != 0L)
                                jjCheckNAddStates(25, 27);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 22 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private static final int jjStopStringLiteralDfa_4(int pos, long active0, long active1) {
        switch (pos) {
            default:
                return -1;
        }
    }

    private static final int jjStartNfa_4(int pos, long active0, long active1) {
        return jjMoveNfa_4(jjStopStringLiteralDfa_4(pos, active0, active1), pos + 1);
    }

    static private final int jjStartNfaWithStates_4(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_4(state, pos + 1);
    }

    static private final int jjMoveStringLiteralDfa0_4() {
        switch (curChar) {
            case 43:
                return jjStopAtPos(0, 76);
            default:
                return jjMoveNfa_4(0, 0);
        }
    }

    static private final int jjMoveNfa_4(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 22;
        int i = 1;
        jjstateSet[0] = startState;
        int j;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
MatchLoop: 
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x3ff041000000000L & l) != 0L) {
                                if (kind > 75)
                                    kind = 75;
                                jjCheckNAddStates(17, 21);
                            } else if (curChar == 46)
                                jjCheckNAddTwoStates(7, 16);
                            break;
                        case 1:
                            if ((0x3ff041000000000L & l) == 0L)
                                break;
                            if (kind > 78)
                                kind = 78;
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 2:
                            if (curChar == 46)
                                jjstateSet[jjnewStateCnt++] = 3;
                            break;
                        case 3:
                            if (curChar != 46)
                                break;
                            if (kind > 78)
                                kind = 78;
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 4:
                            if ((0x3ff041000000000L & l) == 0L)
                                break;
                            if (kind > 75)
                                kind = 75;
                            jjCheckNAddStates(17, 21);
                            break;
                        case 5:
                            if ((0x3ff041000000000L & l) == 0L)
                                break;
                            if (kind > 75)
                                kind = 75;
                            jjCheckNAddTwoStates(5, 6);
                            break;
                        case 6:
                            if (curChar == 46)
                                jjCheckNAddStates(11, 13);
                            break;
                        case 7:
                            if (curChar != 46)
                                break;
                            if (kind > 75)
                                kind = 75;
                            jjCheckNAddTwoStates(5, 6);
                            break;
                        case 8:
                            if ((0x3ff041000000000L & l) == 0L)
                                break;
                            if (kind > 75)
                                kind = 75;
                            jjCheckNAddTwoStates(8, 9);
                            break;
                        case 9:
                            if (curChar == 46)
                                jjCheckNAddStates(22, 24);
                            break;
                        case 10:
                            if (curChar == 46)
                                jjCheckNAdd(11);
                            break;
                        case 11:
                            if (curChar != 46)
                                break;
                            if (kind > 75)
                                kind = 75;
                            jjCheckNAddTwoStates(8, 9);
                            break;
                        case 12:
                            if ((0x3ff041000000000L & l) != 0L)
                                jjCheckNAddStates(8, 10);
                            break;
                        case 15:
                            if (curChar == 46)
                                jjCheckNAddStates(14, 16);
                            break;
                        case 16:
                            if (curChar == 46)
                                jjCheckNAddStates(8, 10);
                            break;
                        case 17:
                            if ((0x3ff041000000000L & l) != 0L)
                                jjCheckNAddStates(25, 27);
                            break;
                        case 18:
                            if (curChar == 46)
                                jjCheckNAddStates(28, 30);
                            break;
                        case 19:
                            if (curChar == 46)
                                jjCheckNAdd(20);
                            break;
                        case 20:
                            if (curChar == 46)
                                jjCheckNAddStates(25, 27);
                            break;
                        case 21:
                            if (curChar == 46)
                                jjCheckNAddTwoStates(7, 16);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 75)
                                    kind = 75;
                                jjCheckNAddStates(17, 21);
                            } else if (curChar == 64)
                                jjCheckNAddTwoStates(1, 2);
                            break;
                        case 1:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 78)
                                kind = 78;
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 4:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 75)
                                kind = 75;
                            jjCheckNAddStates(17, 21);
                            break;
                        case 5:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 75)
                                kind = 75;
                            jjCheckNAddTwoStates(5, 6);
                            break;
                        case 8:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 75)
                                kind = 75;
                            jjAddStates(31, 32);
                            break;
                        case 12:
                            if ((0x7fffffe87fffffeL & l) != 0L)
                                jjCheckNAddStates(8, 10);
                            break;
                        case 13:
                            if (curChar != 93)
                                break;
                            kind = 77;
                            jjCheckNAdd(14);
                            break;
                        case 14:
                            if (curChar == 91)
                                jjstateSet[jjnewStateCnt++] = 13;
                            break;
                        case 17:
                            if ((0x7fffffe87fffffeL & l) != 0L)
                                jjCheckNAddStates(25, 27);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 22 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private static final int jjStopStringLiteralDfa_2(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x1fe0000000000L) != 0L) {
                    jjmatchedKind = 51;
                    return 22;
                }
                return -1;
            case 1:
                if ((active0 & 0x1fe0000000000L) != 0L) {
                    jjmatchedKind = 51;
                    jjmatchedPos = 1;
                    return 22;
                }
                return -1;
            case 2:
                if ((active0 & 0x1fe0000000000L) != 0L) {
                    jjmatchedKind = 51;
                    jjmatchedPos = 2;
                    return 22;
                }
                return -1;
            case 3:
                if ((active0 & 0x1fe0000000000L) != 0L) {
                    jjmatchedKind = 51;
                    jjmatchedPos = 3;
                    return 22;
                }
                return -1;
            case 4:
                if ((active0 & 0x400000000000L) != 0L)
                    return 22;
                if ((active0 & 0x1be0000000000L) != 0L) {
                    jjmatchedKind = 51;
                    jjmatchedPos = 4;
                    return 22;
                }
                return -1;
            case 5:
                if ((active0 & 0x920000000000L) != 0L)
                    return 22;
                if ((active0 & 0x12c0000000000L) != 0L) {
                    jjmatchedKind = 51;
                    jjmatchedPos = 5;
                    return 22;
                }
                return -1;
            case 6:
                if ((active0 & 0x80000000000L) != 0L)
                    return 22;
                if ((active0 & 0x1240000000000L) != 0L) {
                    jjmatchedKind = 51;
                    jjmatchedPos = 6;
                    return 22;
                }
                return -1;
            case 7:
                if ((active0 & 0x1040000000000L) != 0L) {
                    jjmatchedKind = 51;
                    jjmatchedPos = 7;
                    return 22;
                }
                if ((active0 & 0x200000000000L) != 0L)
                    return 22;
                return -1;
            case 8:
                if ((active0 & 0x40000000000L) != 0L)
                    return 22;
                if ((active0 & 0x1000000000000L) != 0L) {
                    jjmatchedKind = 51;
                    jjmatchedPos = 8;
                    return 22;
                }
                return -1;
            case 9:
                if ((active0 & 0x1000000000000L) != 0L) {
                    jjmatchedKind = 51;
                    jjmatchedPos = 9;
                    return 22;
                }
                return -1;
            case 10:
                if ((active0 & 0x1000000000000L) != 0L) {
                    jjmatchedKind = 51;
                    jjmatchedPos = 10;
                    return 22;
                }
                return -1;
            default:
                return -1;
        }
    }

    private static final int jjStartNfa_2(int pos, long active0) {
        return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0), pos + 1);
    }

    static private final int jjStartNfaWithStates_2(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_2(state, pos + 1);
    }

    static private final int jjMoveStringLiteralDfa0_2() {
        switch (curChar) {
            case 40:
                return jjStopAtPos(0, 54);
            case 41:
                return jjStopAtPos(0, 55);
            case 44:
                return jjStopAtPos(0, 53);
            case 97:
                return jjMoveStringLiteralDfa1_2(0x200000000000L);
            case 102:
                return jjMoveStringLiteralDfa1_2(0x400000000000L);
            case 110:
                return jjMoveStringLiteralDfa1_2(0x800000000000L);
            case 112:
                return jjMoveStringLiteralDfa1_2(0xe0000000000L);
            case 115:
                return jjMoveStringLiteralDfa1_2(0x1100000000000L);
            default:
                return jjMoveNfa_2(0, 0);
        }
    }

    static private final int jjMoveStringLiteralDfa1_2(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_2(0, active0);
            return 1;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa2_2(active0, 0x800000000000L);
            case 98:
                return jjMoveStringLiteralDfa2_2(active0, 0x200000000000L);
            case 105:
                return jjMoveStringLiteralDfa2_2(active0, 0x400000000000L);
            case 114:
                return jjMoveStringLiteralDfa2_2(active0, 0xc0000000000L);
            case 116:
                return jjMoveStringLiteralDfa2_2(active0, 0x100000000000L);
            case 117:
                return jjMoveStringLiteralDfa2_2(active0, 0x20000000000L);
            case 121:
                return jjMoveStringLiteralDfa2_2(active0, 0x1000000000000L);
            default:
                break;
        }
        return jjStartNfa_2(0, active0);
    }

    static private final int jjMoveStringLiteralDfa2_2(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_2(0, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_2(1, active0);
            return 2;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa3_2(active0, 0x100000000000L);
            case 98:
                return jjMoveStringLiteralDfa3_2(active0, 0x20000000000L);
            case 105:
                return jjMoveStringLiteralDfa3_2(active0, 0x80000000000L);
            case 110:
                return jjMoveStringLiteralDfa3_2(active0, 0x1400000000000L);
            case 111:
                return jjMoveStringLiteralDfa3_2(active0, 0x40000000000L);
            case 115:
                return jjMoveStringLiteralDfa3_2(active0, 0x200000000000L);
            case 116:
                return jjMoveStringLiteralDfa3_2(active0, 0x800000000000L);
            default:
                break;
        }
        return jjStartNfa_2(1, active0);
    }

    static private final int jjMoveStringLiteralDfa3_2(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_2(1, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_2(2, active0);
            return 3;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa4_2(active0, 0x400000000000L);
            case 99:
                return jjMoveStringLiteralDfa4_2(active0, 0x1000000000000L);
            case 105:
                return jjMoveStringLiteralDfa4_2(active0, 0x800000000000L);
            case 108:
                return jjMoveStringLiteralDfa4_2(active0, 0x20000000000L);
            case 116:
                return jjMoveStringLiteralDfa4_2(active0, 0x340000000000L);
            case 118:
                return jjMoveStringLiteralDfa4_2(active0, 0x80000000000L);
            default:
                break;
        }
        return jjStartNfa_2(2, active0);
    }

    static private final int jjMoveStringLiteralDfa4_2(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_2(2, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_2(3, active0);
            return 4;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa5_2(active0, 0x80000000000L);
            case 101:
                return jjMoveStringLiteralDfa5_2(active0, 0x40000000000L);
            case 104:
                return jjMoveStringLiteralDfa5_2(active0, 0x1000000000000L);
            case 105:
                return jjMoveStringLiteralDfa5_2(active0, 0x120000000000L);
            case 108:
                if ((active0 & 0x400000000000L) != 0L)
                    return jjStartNfaWithStates_2(4, 46, 22);
                break;
            case 114:
                return jjMoveStringLiteralDfa5_2(active0, 0x200000000000L);
            case 118:
                return jjMoveStringLiteralDfa5_2(active0, 0x800000000000L);
            default:
                break;
        }
        return jjStartNfa_2(3, active0);
    }

    static private final int jjMoveStringLiteralDfa5_2(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_2(3, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_2(4, active0);
            return 5;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa6_2(active0, 0x200000000000L);
            case 99:
                if ((active0 & 0x20000000000L) != 0L)
                    return jjStartNfaWithStates_2(5, 41, 22);
                else if ((active0 & 0x100000000000L) != 0L)
                    return jjStartNfaWithStates_2(5, 44, 22);
                return jjMoveStringLiteralDfa6_2(active0, 0x40000000000L);
            case 101:
                if ((active0 & 0x800000000000L) != 0L)
                    return jjStartNfaWithStates_2(5, 47, 22);
                break;
            case 114:
                return jjMoveStringLiteralDfa6_2(active0, 0x1000000000000L);
            case 116:
                return jjMoveStringLiteralDfa6_2(active0, 0x80000000000L);
            default:
                break;
        }
        return jjStartNfa_2(4, active0);
    }

    static private final int jjMoveStringLiteralDfa6_2(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_2(4, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_2(5, active0);
            return 6;
        }
        switch (curChar) {
            case 99:
                return jjMoveStringLiteralDfa7_2(active0, 0x200000000000L);
            case 101:
                if ((active0 & 0x80000000000L) != 0L)
                    return jjStartNfaWithStates_2(6, 43, 22);
                break;
            case 111:
                return jjMoveStringLiteralDfa7_2(active0, 0x1000000000000L);
            case 116:
                return jjMoveStringLiteralDfa7_2(active0, 0x40000000000L);
            default:
                break;
        }
        return jjStartNfa_2(5, active0);
    }

    static private final int jjMoveStringLiteralDfa7_2(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_2(5, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_2(6, active0);
            return 7;
        }
        switch (curChar) {
            case 101:
                return jjMoveStringLiteralDfa8_2(active0, 0x40000000000L);
            case 110:
                return jjMoveStringLiteralDfa8_2(active0, 0x1000000000000L);
            case 116:
                if ((active0 & 0x200000000000L) != 0L)
                    return jjStartNfaWithStates_2(7, 45, 22);
                break;
            default:
                break;
        }
        return jjStartNfa_2(6, active0);
    }

    static private final int jjMoveStringLiteralDfa8_2(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_2(6, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_2(7, active0);
            return 8;
        }
        switch (curChar) {
            case 100:
                if ((active0 & 0x40000000000L) != 0L)
                    return jjStartNfaWithStates_2(8, 42, 22);
                break;
            case 105:
                return jjMoveStringLiteralDfa9_2(active0, 0x1000000000000L);
            default:
                break;
        }
        return jjStartNfa_2(7, active0);
    }

    static private final int jjMoveStringLiteralDfa9_2(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_2(7, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_2(8, active0);
            return 9;
        }
        switch (curChar) {
            case 122:
                return jjMoveStringLiteralDfa10_2(active0, 0x1000000000000L);
            default:
                break;
        }
        return jjStartNfa_2(8, active0);
    }

    static private final int jjMoveStringLiteralDfa10_2(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_2(8, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_2(9, active0);
            return 10;
        }
        switch (curChar) {
            case 101:
                return jjMoveStringLiteralDfa11_2(active0, 0x1000000000000L);
            default:
                break;
        }
        return jjStartNfa_2(9, active0);
    }

    static private final int jjMoveStringLiteralDfa11_2(long old0, long active0) {
        if ((active0 &= old0) == 0L)
            return jjStartNfa_2(9, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_2(10, active0);
            return 11;
        }
        switch (curChar) {
            case 100:
                if ((active0 & 0x1000000000000L) != 0L)
                    return jjStartNfaWithStates_2(11, 48, 22);
                break;
            default:
                break;
        }
        return jjStartNfa_2(10, active0);
    }

    static private final int jjMoveNfa_2(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 22;
        int i = 1;
        jjstateSet[0] = startState;
        int j;
        int kind = 0x7fffffff;
        for (;;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
MatchLoop: 
                do {
                    switch (jjstateSet[--i]) {
                        case 22:
                            if ((0x3ff0c1000000000L & l) != 0L)
                                jjCheckNAddStates(8, 10);
                            else if (curChar == 46)
                                jjCheckNAddStates(11, 13);
                            if ((0x3ff0c1000000000L & l) != 0L) {
                                if (kind > 51)
                                    kind = 51;
                                jjCheckNAddTwoStates(5, 6);
                            } else if (curChar == 46)
                                jjCheckNAddStates(14, 16);
                            break;
                        case 0:
                            if ((0x3ff0c1000000000L & l) != 0L) {
                                if (kind > 51)
                                    kind = 51;
                                jjCheckNAddStates(17, 21);
                            } else if (curChar == 46)
                                jjCheckNAddTwoStates(7, 16);
                            break;
                        case 1:
                            if ((0x3ff0c1000000000L & l) == 0L)
                                break;
                            if (kind > 49)
                                kind = 49;
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 2:
                            if (curChar == 46)
                                jjstateSet[jjnewStateCnt++] = 3;
                            break;
                        case 3:
                            if (curChar != 46)
                                break;
                            if (kind > 49)
                                kind = 49;
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 4:
                            if ((0x3ff0c1000000000L & l) == 0L)
                                break;
                            if (kind > 51)
                                kind = 51;
                            jjCheckNAddStates(17, 21);
                            break;
                        case 5:
                            if ((0x3ff0c1000000000L & l) == 0L)
                                break;
                            if (kind > 51)
                                kind = 51;
                            jjCheckNAddTwoStates(5, 6);
                            break;
                        case 6:
                            if (curChar == 46)
                                jjCheckNAddStates(11, 13);
                            break;
                        case 7:
                            if (curChar != 46)
                                break;
                            if (kind > 51)
                                kind = 51;
                            jjCheckNAddTwoStates(5, 6);
                            break;
                        case 8:
                            if ((0x3ff0c1000000000L & l) == 0L)
                                break;
                            if (kind > 51)
                                kind = 51;
                            jjCheckNAddTwoStates(8, 9);
                            break;
                        case 9:
                            if (curChar == 46)
                                jjCheckNAddStates(22, 24);
                            break;
                        case 10:
                            if (curChar == 46)
                                jjCheckNAdd(11);
                            break;
                        case 11:
                            if (curChar != 46)
                                break;
                            if (kind > 51)
                                kind = 51;
                            jjCheckNAddTwoStates(8, 9);
                            break;
                        case 12:
                            if ((0x3ff0c1000000000L & l) != 0L)
                                jjCheckNAddStates(8, 10);
                            break;
                        case 15:
                            if (curChar == 46)
                                jjCheckNAddStates(14, 16);
                            break;
                        case 16:
                            if (curChar == 46)
                                jjCheckNAddStates(8, 10);
                            break;
                        case 17:
                            if ((0x3ff0c1000000000L & l) != 0L)
                                jjCheckNAddStates(25, 27);
                            break;
                        case 18:
                            if (curChar == 46)
                                jjCheckNAddStates(28, 30);
                            break;
                        case 19:
                            if (curChar == 46)
                                jjCheckNAdd(20);
                            break;
                        case 20:
                            if (curChar == 46)
                                jjCheckNAddStates(25, 27);
                            break;
                        case 21:
                            if (curChar == 46)
                                jjCheckNAddTwoStates(7, 16);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
MatchLoop: 
                do {
                    switch (jjstateSet[--i]) {
                        case 22:
                            if ((0x7fffffe87fffffeL & l) != 0L)
                                jjCheckNAddStates(8, 10);
                            else if (curChar == 91)
                                jjstateSet[jjnewStateCnt++] = 13;
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 51)
                                    kind = 51;
                                jjCheckNAddTwoStates(5, 6);
                            }
                            break;
                        case 0:
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (kind > 51)
                                    kind = 51;
                                jjCheckNAddStates(17, 21);
                            } else if (curChar == 64)
                                jjCheckNAddTwoStates(1, 2);
                            break;
                        case 1:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 49)
                                kind = 49;
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 4:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 51)
                                kind = 51;
                            jjCheckNAddStates(17, 21);
                            break;
                        case 5:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 51)
                                kind = 51;
                            jjCheckNAddTwoStates(5, 6);
                            break;
                        case 8:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > 51)
                                kind = 51;
                            jjAddStates(31, 32);
                            break;
                        case 12:
                            if ((0x7fffffe87fffffeL & l) != 0L)
                                jjCheckNAddStates(8, 10);
                            break;
                        case 13:
                            if (curChar != 93)
                                break;
                            kind = 52;
                            jjCheckNAdd(14);
                            break;
                        case 14:
                            if (curChar == 91)
                                jjstateSet[jjnewStateCnt++] = 13;
                            break;
                        case 17:
                            if ((0x7fffffe87fffffeL & l) != 0L)
                                jjCheckNAddStates(25, 27);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
MatchLoop: 
                do {
                    switch (jjstateSet[--i]) {
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 22 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    static private final void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 26; i-- > 0;) {
            jjrounds[i] = 0x80000000;
        }
    }

    static public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    static public void SwitchTo(int lexState) {
        if ((lexState >= 5) || (lexState < 0))
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                                    TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    static protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }

    public static Token getNextToken() {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

EOFLoop: 
        for (;;) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            switch (curLexState) {
                case 0:
                    try {
                        input_stream.backup(0);
                        while ((curChar <= 32) && ((0x100000200L & (1L << curChar)) != 0L)) {
                            curChar = input_stream.BeginToken();
                        }
                    } catch (java.io.IOException e1) {
                        continue EOFLoop;
                    }
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_0();
                    break;
                case 1:
                    try {
                        input_stream.backup(0);
                        while ((curChar <= 32) && ((0x100000200L & (1L << curChar)) != 0L)) {
                            curChar = input_stream.BeginToken();
                        }
                    } catch (java.io.IOException e1) {
                        continue EOFLoop;
                    }
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_1();
                    break;
                case 2:
                    try {
                        input_stream.backup(0);
                        while ((curChar <= 32) && ((0x100000200L & (1L << curChar)) != 0L)) {
                            curChar = input_stream.BeginToken();
                        }
                    } catch (java.io.IOException e1) {
                        continue EOFLoop;
                    }
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_2();
                    break;
                case 3:
                    try {
                        input_stream.backup(0);
                        while ((curChar <= 32) && ((0x100000200L & (1L << curChar)) != 0L)) {
                            curChar = input_stream.BeginToken();
                        }
                    } catch (java.io.IOException e1) {
                        continue EOFLoop;
                    }
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_3();
                    break;
                case 4:
                    try {
                        input_stream.backup(0);
                        while ((curChar <= 32) && ((0x100000200L & (1L << curChar)) != 0L)) {
                            curChar = input_stream.BeginToken();
                        }
                    } catch (java.io.IOException e1) {
                        continue EOFLoop;
                    }
                    jjmatchedKind = 0x7fffffff;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_4();
                    break;
            }
            if (jjmatchedKind != 0x7fffffff) {
                if ((jjmatchedPos + 1) < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    return matchedToken;
                } else {
                    if (jjnewLexState[jjmatchedKind] != -1)
                        curLexState = jjnewLexState[jjmatchedKind];
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = (curPos <= 1) ? "" : input_stream.GetImage();
                if ((curChar == '\n') || (curChar == '\r')) {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = (curPos <= 1) ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
                                    TokenMgrError.LEXICAL_ERROR);
        }
    }
}
