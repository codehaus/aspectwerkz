<!DOCTYPE aspectwerkz PUBLIC "-//AspectWerkz//DTD//EN" "http://aspectwerkz.codehaus.org/dtd/aspectwerkz.dtd">
<aspectwerkz>
    <system id="tests">
        <!--        <pointcut name="handler" expression="handler(test.handler.HandlerTestBeforeException) AND within(test.handler.*)"/>-->
        <pointcut name="handler">
            handler(test.handler.HandlerTestBeforeException)
            AND
            within(test.handler.*)
        </pointcut>
        <exclude package="test.attribdeff"/>
        <package name="test.aspect">
            <aspect class="MemberMethodTestAspect" deployment-model="perClass"/>
            <aspect class="StaticMethodTestAspect"/>
            <aspect class="FieldTestAspect"/>
            <aspect class="CallerSideTestAspect"/>
            <aspect class="IntroductionTestAspect"/>
            <aspect class="DynamicDeploymentTestAspect"/>
            <aspect class="CFlowTestAspect"/>
        </package>
        <package name="test.performance">
            <aspect class="PerJVMPerformanceAspect"/>
            <aspect class="PerClassPerformanceAspect" deployment-model="perClass"/>
            <aspect class="PerInstancePerformanceAspect" deployment-model="perInstance"/>
            <aspect class="PerThreadPerformanceAspect" deployment-model="perThread"/>
        </package>
        <aspect class="test.mixindeployment.IntroductionDeploymentAspect"/>
        <aspect class="test.abstractclass.TestAspect"/>
        <aspect class="test.hierarchicalpattern.TestAspect"/>
        <aspect class="test.reflection.TestAspect"/>
        <aspect class="test.staticfield.TestAspect"/>
        <aspect class="test.superclassconstructor.TestAspect"/>
        <aspect class="test.constructor.ConstructorTestAspect"/>
        <aspect class="test.handler.HandlerTestAspect">
            <advice bind-to="handler" type="before" name="before(JoinPoint)"/>
        </aspect>
        <aspect class="test.proceedinnewthread.TestAspect">
            <advice bind-to="execution(void test.proceedinnewthread.ProceedTest.adviseMe*(..))" type="around" name="advice1"/>
            <advice bind-to="execution(void test.proceedinnewthread.ProceedTest.adviseMe2(..)) || execution(void test.proceedinnewthread.ProceedTest.adviseMe3(..))" type="around" name="advice2"/>
            <advice bind-to="execution(void test.proceedinnewthread.ProceedTest.adviseMe3(..))" type="around" name="advice3"/>
        </aspect>
        <aspect class="test.deployment.PreparePointcuts"/>
        <aspect class="test.afterxxx.Aspect"/>
        <aspect class="test.callAndExecution.TestAspect"/>
        <aspect class="test.orthogonal.OrthogonalTestAspect"/>
        <aspect class="test.pointcutexpression.TestAspect"/>
        <aspect class="test.annotation.TestAspect"/>
        <aspect class="test.modifier.TestAspect"/>
        <aspect class="test.interfacesubtypebug.TestAspect"/>
        <aspect class="test.adviseonintroducedinterface.Aspect"/>
        <aspect class="test.implementsbug.TestModelObserver"/>
        <aspect class="test.inheritedmixinbug.Baspect">
            <pointcut name="autonamed_pointcut" expression="within(test.inheritedmixinbug.Target)"/>
            <introduce class="test.inheritedmixinbug.Baspect$Bimpl" bind-to="autonamed_pointcut" deployment-model="perInstance"/>
        </aspect>
        <aspect class="test.aspectutilmethodbug.DemoAspect" deployment-model="perThread"/>
        <aspect class="test.ComplexCFlowTest$Aspect"/>
        <aspect class="test.advisetostringbug.Aspect"/>
        <aspect class="test.rtti.RttiTarget$TestAspect"/>
        <aspect class="test.thistarget.ThisTargetAspect"/>
        <aspect class="test.thistarget.TargetReferencedAndRuntimeCheckTest$Aspect"/>
        <aspect class="test.optimizations.OptimizeAspect"/>

        <aspect class="test.args.ArgsAspect">
            <!-- This an annotation def aspect, with some extension in XML -->
            <pointcut name="xml_matchAll"
                expression="within(test.args.ArgsAdviceTest) AND execution(* matchAllXML(..)) AND args(String, String, long)"/>
            <advice type="before" bind-to="xml_matchAll" name="matchAllBefore"/>
            <advice type="around" bind-to="xml_matchAll" name="matchAllAround"/>
            <advice type="after" bind-to="xml_matchAll" name="matchAllAfter"/>
            <pointcut name="xml_getFirst(String s)"
                expression="within(test.args.ArgsAdviceTest) AND execution(* getFirstXML(..)) AND args(s, ..)"/>
            <!-- we can make use of abbreviations for JP and java.lang.* -->
            <!-- todo: test for array params -->
            <advice type="before" bind-to="xml_getFirst(as)" name="getFirstBefore(JoinPoint jp, String as)"/>
            <advice type="around" bind-to="xml_getFirst(as)" name="getFirstAround(org.codehaus.aspectwerkz.joinpoint.JoinPoint jp,java.lang.String as)"/>
            <advice type="after" bind-to="xml_getFirst(as)" name="getFirstAfter(String as, JoinPoint jp)"/>
            <!-- anonymous pointcut IS NOT (yet) SUPPORTED IN XML -->
            <!-- since we can not figure in args(s) if s is a type or links to a String -->
            <!-- we could fix it using something like args(String s) but this is not a common syntax -->
            <!--<advice type="before" bind-to="execution(* test.args.*.getFirstXML(..)) AND args(s, ..)" name="getFirstAnonymousBefore(JoinPoint jp, String as)"/>-->
            <!--<advice type="around" bind-to="execution(* test.args.*.getFirstXML(..)) AND args(s, ..)" name="getFirstAnonymousAround(org.codehaus.aspectwerkz.joinpoint.JoinPoint jp,java.lang.String as)"/>-->
            <!--<advice type="after" bind-to="execution(* test.args.*.getFirstXML(..)) AND args(s, ..)" name="getFirstAnonymousAfter(String as, JoinPoint jp)"/>-->
            <pointcut name="xml_orderChangedInPointcutAndAdviceSignature(String s1, String s0)"
                expression="within(test.args.ArgsAdviceTest) AND execution(* orderChangedInPointcutAndAdviceSignatureXML(..)) AND args(s0, s1, Object[])"/>
            <advice type="before" bind-to="xml_orderChangedInPointcutAndAdviceSignature(a1, a0)"
                name="orderChangedInPointcutAndAdviceSignatureBefore(JoinPoint jp, String a0, String a1)"/>
            <advice type="around" bind-to="xml_orderChangedInPointcutAndAdviceSignature(a1, a0)"
                name="orderChangedInPointcutAndAdviceSignatureAround(org.codehaus.aspectwerkz.joinpoint.JoinPoint jp,java.lang.String a0, String a1)"/>
            <advice type="after" bind-to="xml_orderChangedInPointcutAndAdviceSignature(a1, a0)"
                name="orderChangedInPointcutAndAdviceSignatureAfter(JoinPoint jp, String a0, String a1)"/>
            <!-- method call pointcut -->
            <pointcut name="xml_callGetFirstAndSecond(long l, String[] s)"
                expression="within(test.args.ArgsAdviceTest) AND call(* callGetFirstAndSecondXML(..)) AND args(l, s, String[])"/>
            <advice type="before" bind-to="xml_callGetFirstAndSecond(a0, a1)"
                name="callGetFirstAndSecondBefore(JoinPoint jp, long a0, String[] a1)"/>
            <advice type="around" bind-to="xml_callGetFirstAndSecond(a0, a1)"
                name="callGetFirstAndSecondAround(org.codehaus.aspectwerkz.joinpoint.JoinPoint jp,long a0, java.lang.String[] a1)"/>
            <advice type="after" bind-to="xml_callGetFirstAndSecond(a0, a1)"
                name="callGetFirstAndSecondAfter(JoinPoint jp, long a0, String[] a1)"/>
            <!-- ctor execution pointcut -->
            <pointcut name="xml_ctorExecutionGetFirst(String s)"
                expression="execution(test.args.ArgsAdviceTest$CtorExecutionXML.new(..)) AND args(test.args.ArgsAdviceTest,s)"/>
            <advice type="before" bind-to="xml_ctorExecutionGetFirst(a0)"
                name="ctorExecutionGetFirstBefore(JoinPoint jp, String a0)"/>
            <advice type="around" bind-to="xml_ctorExecutionGetFirst(a0)"
                name="ctorExecutionGetFirstAround(org.codehaus.aspectwerkz.joinpoint.JoinPoint jp,java.lang.String a0)"/>
            <advice type="after" bind-to="xml_ctorExecutionGetFirst(a0)"
                name="ctorExecutionGetFirstAfter(JoinPoint jp, String a0)"/>
            <!-- ctor call pointcut -->
            <pointcut name="xml_ctorCallGetFirst(String s)"
                expression="within(test.args.ArgsAdviceTest) AND call(test.args.ArgsAdviceTest$CtorCallXML.new(..)) AND args(test.args.ArgsAdviceTest, s)"/>
            <advice type="before" bind-to="xml_ctorCallGetFirst(a0)"
                name="ctorCallGetFirstBefore(JoinPoint jp, String a0)"/>
            <advice type="around" bind-to="xml_ctorCallGetFirst(a0)"
                name="ctorCallGetFirstAround(org.codehaus.aspectwerkz.joinpoint.JoinPoint jp,java.lang.String a0)"/>
            <advice type="after" bind-to="xml_ctorCallGetFirst(a0)"
                name="ctorCallGetFirstAfter(JoinPoint jp, String a0)"/>

        </aspect>

        <!-- The following tests different forms of precedence -->
        <!-- * advice order -->
        <!-- * pointcut order -->
        <!-- * aspect order -->
        <!-- Nomenclature: A and RA: RA is the reversed precedence of A -->
        <!-- Binding syntax - two advices. Precdence differs in both aspects -->
        <aspect class="test.bindingsyntax.TestAspect" name="BindingSyntaxA">
            <pointcut name="test" expression="execution(* test.bindingsyntax.*.doA*(..))"/>
            <advice bind-to="test" type="around" name="advice1"/>
            <advice bind-to="test" type="around" name="advice2"/>
        </aspect>
        <aspect class="test.bindingsyntax.TestAspect" name="BindingSyntaxRA">
            <pointcut name="test" expression="execution(* test.bindingsyntax.*.doRA*(..))"/>
            <advice bind-to="test" type="around" name="advice2"/>
            <advice bind-to="test" type="around" name="advice1"/>
        </aspect>
        <aspect class="test.bindingsyntax.TestAspect" name="BindingSyntaxC">
            <pointcut name="test2" expression="execution(* test.bindingsyntax.*.doC*(..))"/>
            <pointcut name="test" expression="execution(* test.bindingsyntax.*.doC*(..))"/>
            <advice bind-to="test" type="around" name="advice1"/>
            <advice bind-to="test2" type="around" name="advice2"/>
        </aspect>
        <aspect class="test.bindingsyntax.TestAspect" name="BindingSyntaxRC">
            <pointcut name="test2" expression="execution(* test.bindingsyntax.*.doRC*(..))"/>
            <pointcut name="test" expression="execution(* test.bindingsyntax.*.doRC*(..))"/>
            <advice bind-to="test2" type="around" name="advice2"/>
            <advice bind-to="test" type="around" name="advice1"/>
        </aspect>
        <aspect class="test.bindingsyntax.TestAspect" name="BindingSyntaxD_1">
            <pointcut name="test" expression="execution(* test.bindingsyntax.*.doD*(..))"/>
            <advice bind-to="test" type="around" name="advice1"/>
        </aspect>
        <aspect class="test.bindingsyntax.TestAspect" name="BindingSyntaxD_2">
            <pointcut name="test" expression="execution(* test.bindingsyntax.*.doD*(..))"/>
            <advice bind-to="test" type="around" name="advice2"/>
        </aspect>
        <aspect class="test.bindingsyntax.TestAspect" name="BindingSyntaxRD_2">
            <pointcut name="test" expression="execution(* test.bindingsyntax.*.doRD*(..))"/>
            <advice bind-to="test" type="around" name="advice2"/>
        </aspect>
        <aspect class="test.bindingsyntax.TestAspect" name="BindingSyntaxRD_1">
            <pointcut name="test" expression="execution(* test.bindingsyntax.*.doRD*(..))"/>
            <advice bind-to="test" type="around" name="advice1"/>
        </aspect>

    </system>

    <!--    The advices below are using Rtti, so the name must reflect that (can use abbreviations)-->
    <!--    and advice parameter name is optional if not used for a binding-->
    <system id="polymorphic">
        <aspect class="test.polymorphic.PolymorphicTest$TestAspect">
            <pointcut name="in" expression="within(test.polymorphic..*)"/>
            <advice name="method1Advise(JoinPoint)" type="before" bind-to="in AND call(* test.polymorphic.*.methodTest(..))"/>
            <advice name="ctor1Advise(JoinPoint)" type="before" bind-to="execution(test.polymorphic.*.new(int))"/>
            <advice name="ctor2Advise(JoinPoint foo)" type="before" bind-to="in AND call(test.polymorphic.*.new(String))"/>
        </aspect>
    </system>
</aspectwerkz>
