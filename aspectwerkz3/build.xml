<?xml version="1.0"?>

<!-- ============================================================== -->
<!-- Ant build file for the AspectWerkz project -->
<!-- ============================================================== -->
<project name="AspectWerkz" default="jar" basedir=".">
	<path id="project.class.path">
		<pathelement path="${java.class.path}" />
		<pathelement path="${build.core.dir}" />
		<fileset dir="${basedir}/lib">
			<include name="*.jar" />
		</fileset>
		<pathelement location="${basedir}/src/samples" />
	</path>
	<path id="aspectwerkz.classpath">
		<fileset dir="${basedir}/lib">
			<include name="${basedir}/target/classes" />
			<include name="*.jar" />
		</fileset>
	</path>
	<property name="aspectwerkz.classpath" refid="aspectwerkz.classpath" />

	<!-- =================================================== -->
	<!--  initializes parameters  -->
	<!-- =================================================== -->
	<target name="init">
		<property name="name" value="aspectwerkz" />
		<property name="version" value="1.0-beta1" />
		<property name="basedir" value="." />
		<property name="src.dir" value="${basedir}/src" />
		<property name="test.src.dir" value="${basedir}/src/test" />
		<property name="build.dir" value="${basedir}/target" />
		<property name="build.core.dir" value="${build.dir}/classes" />
		<property name="build.test.dir" value="${build.dir}/test-classes" />
		<property name="lib.dir" value="${basedir}/lib" />
		<property name="dist.dir" value="${basedir}/dist" />
		<property name="config.dir" value="${basedir}/config" />
		<property name="javac.debug" value="on" />
		<property name="javac.deprecation" value="on" />
		<property name="javac.optimize" value="off" />
		<property name="javac.depend" value="off" />
		<property name="javac.verbose" value="off" />
		<mkdir dir="${dist.dir}" />

		<!-- os specific -->
		<condition property="pathseparator" value=";">
			<os family="dos" />
		</condition>
		<condition property="executableSuffix" value=".bat">
			<os family="dos" />
		</condition>
		<!-- os specific -->
		<condition property="pathseparator" value=":">
			<not>
				<os family="dos" />
			</not>
		</condition>
		<condition property="executableSuffix" value="">
			<not>
				<os family="dos" />
			</not>
		</condition>
		<property name="target.dir" value="${basedir}/target" />
		<property name="lib.dir" value="${basedir}/lib" />
		<property name="bin.dir" value="${basedir}/bin" />
		<property name="dist.dir" value="${basedir}/dist" />
		<property name="main.classes" value="${target.dir}/classes" />
		<property name="test.classes" value="${target.dir}/test-classes" />
		<property name="samples.classes" value="${target.dir}/samples-classes" />
		<property name="extensions.classes" value="${target.dir}/extensions-classes" />
		<property name="project.name" value="aspectwerkz" />
		<property environment="env" />
		<condition property="jdk15" value="yes">
			<contains string="${java.version}" substring="1.5" />
		</condition>
	</target>

	<!-- ============================================================== -->
	<!-- clean -->
	<!-- ============================================================== -->
	<target name="clean" depends="init">
		<delete dir="${build.core.dir}" />
		<delete dir="${build.test.dir}" />
		<delete dir="${samples.classes}" />
		<delete dir="${extensions.classes}" />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.core.dir}" />
		<mkdir dir="${build.test.dir}" />
		<mkdir dir="${samples.classes}" />
		<mkdir dir="${extensions.classes}" />
		<mkdir dir="${dist.dir}" />
	</target>

	<!-- ============================================================== -->
	<!-- compilation targets -->
	<!-- ============================================================== -->
	<target name="compile" depends="init, java:compile">
		<antcall target="jar" />
		<antcall target="jdk15:compile" />
		<antcall target="extensions:compile" />
		<antcall target="samples:compile" />
	</target>
	<target name="java:compile" depends="init">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.core.dir}" />
		<javac destdir="${build.core.dir}" debug="on">
			<src path="${src.dir}/main" />
			<classpath>
				<pathelement path="${java.class.path}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
		<mkdir dir="${build.test.dir}" />
		<javac destdir="${build.test.dir}" debug="off">
			<src path="${test.src.dir}" />
			<classpath>
				<pathelement path="${java.class.path}" />
				<pathelement path="${build.core.dir}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javac>
	</target>
	<target name="jdk15:compile" if="jdk15">
		<echo message="** Found jdk15 specific compilation..." />
		<javac destdir="${main.classes}" deprecation="true" debug="true" optimize="false">
			<src>
				<pathelement location="src/jdk15">
				</pathelement>
			</src>
			<classpath>
				<pathelement path="${main.classes}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar">
					</include>
				</fileset>
			</classpath>
		</javac>
	</target>

	<!-- =================================================== -->
	<!--  offline transformation of the samples -->
	<!-- =================================================== -->
	<target name="transform" depends="clean, init, compile, samples:annotationc">
		<exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
			<arg line="-offline ${basedir}/src/samples/samples-attribdef.xml -verbose -verify -cp ${extensions.classes} ${samples.classes}" />
		</exec>
	</target>


	<!-- ============================================================== -->
	<!-- create distribution -->
	<!-- ============================================================== -->
	<target name="jar" depends="java:compile">
		<mkdir dir="${dist.dir}" />
		<copy file="${src.dir}/main/aspectwerkz.dtd" todir="${build.core.dir}" />
		<jar destfile="${build.dir}/aspectwerkz-${version}.jar" manifest="${lib.dir}/manifest.mf">
			<fileset dir="${build.core.dir}">
				<exclude name="**/aspectwerkz/hook/**/*" />
			</fileset>
		</jar>
		<copy tofile="${lib.dir}/aspectwerkz-${version}.jar" file="${build.dir}/aspectwerkz-${version}.jar" overwrite="true" />
		<!-- split dist for layer 1 separation -->
		<jar destfile="${build.dir}/aspectwerkz-core-${version}.jar">
			<fileset dir="${build.core.dir}">
				<include name="**/aspectwerkz/hook/**/*" />
			</fileset>
		</jar>
		<copy tofile="${lib.dir}/aspectwerkz-core-${version}.jar" file="${build.dir}/aspectwerkz-core-${version}.jar" overwrite="true" />
		<antcall target="extensions:compile" />
		<copy tofile="${lib.dir}/aspectwerkz-extensions-${version}.jar" file="${target.dir}/extensions.jar" overwrite="true" />
	</target>

	<!-- ============================================================== -->
	<!-- javacc compilation -->
	<!-- ============================================================== -->
	<target name="jjtree" depends="init">
		<jjtree target="${src.dir}/main/org/codehaus/aspectwerkz/expression/ast/grammar.jjt" outputdirectory="${src.dir}/main/org/codehaus/aspectwerkz/expression/ast" javacchome="${env.JAVACC_HOME}" />
		<javacc target="${src.dir}/main/org/codehaus/aspectwerkz/expression/ast/grammar.jj" outputdirectory="${src.dir}/main/org/codehaus/aspectwerkz/expression/ast" javacchome="${env.JAVACC_HOME}" />
	</target>

	<!-- =================================================== -->
	<!--  compiles the samples -->
	<!-- =================================================== -->
	<target name="samples:compile" depends="init">
		<mkdir dir="${samples.classes}" />
		<javac destdir="${samples.classes}" deprecation="true" debug="true" optimize="false" excludes="**/samples.xml">
			<src>
				<pathelement location="src/samples">
				</pathelement>
			</src>
			<classpath>
				<pathelement path="${main.classes}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar">
					</include>
				</fileset>
				<fileset dir="${dist.dir}">
					<include name="*.jar">
					</include>
				</fileset>
			</classpath>
		</javac>
		<!-- run AspectC on the samples Aspects -->
		<exec executable="java">
			<arg line="-cp ${java.home}/../lib/tools.jar${pathseparator}${samples.classes}${pathseparator}${lib.dir}/aspectwerkz-${version}.jar${pathseparator}${lib.dir}/bcel-patch.jar${pathseparator}${lib.dir}/bcel.jar${pathseparator}${lib.dir}/piccolo-1.03.jar${pathseparator}${lib.dir}/qdox-1.4.jar${pathseparator}${lib.dir}/dom4j-1.4.jar{pathseparator}${lib.dir}/asm-attrs-1.4.3.jar{pathseparator}${lib.dir}/asm-1.4.3.jar org.codehaus.aspectwerkz.annotation.AnnotationC -verbose -src ${basedir}/src/samples -classes ${basedir}/target/samples-classes -custom ${basedir}/src/samples/annotation.properties" />
		</exec>
		<jar jarfile="${target.dir}/aspectwerkz-samples.jar" basedir="${samples.classes}" />
		<copy tofile="${dist.dir}/aspectwerkz-samples.jar" file="${target.dir}/aspectwerkz-samples.jar" overwrite="true" />
	</target>

	<!-- =================================================== -->
	<!--  compiles the extensions -->
	<!-- =================================================== -->
	<target name="extensions:compile" depends="init">
		<mkdir dir="${extensions.classes}" />
		<javac destdir="${extensions.classes}" deprecation="true" debug="true" optimize="false" excludes="**/*.xml">
			<src>
				<pathelement location="src/extensions">
				</pathelement>
			</src>
			<classpath>
				<pathelement path="${main.classes}" />
				<fileset dir="${lib.dir}">
					<include name="*.jar">
					</include>
				</fileset>
				<fileset dir="${dist.dir}">
					<include name="*.jar">
					</include>
				</fileset>
			</classpath>
		</javac>
		<jar jarfile="${target.dir}/extensions.jar" basedir="${extensions.classes}" />
		<copy tofile="${dist.dir}/extensions.jar" file="${target.dir}/extensions.jar" overwrite="true" />
	</target>

	<!-- =================================================== -->
	<!--  all tests -->
	<!-- =================================================== -->
	<target name="test" depends="init, jar, test:annotationc">
		<exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
			<arg line="-cp ${test.classes}${pathseparator}${samples.classes}${pathseparator}${lib.dir}/junit-3.8.1.jar${pathseparator}${lib.dir}/junitperf.jar -Daspectwerkz.transform.dump=* -Daspectwerkz.definition.file=${src.dir}/test/test-attribdef.xml test.AllTests" />
		</exec>
	</target>

	<!-- =================================================== -->
	<!--  compiles aspects for the tests -->
	<!-- =================================================== -->
	<target name="test:annotationc" depends="clean, compile">
		<exec executable="java">
			<arg line="-cp ${java.home}/../lib/tools.jar${pathseparator}${test.classes}${pathseparator}${lib.dir}/aspectwerkz-${version}.jar${pathseparator}${lib.dir}/bcel-patch.jar${pathseparator}${lib.dir}/bcel.jar${pathseparator}${lib.dir}/piccolo-1.03.jar${pathseparator}${lib.dir}/qdox-1.4.jar${pathseparator}${lib.dir}/junit-3.8.1.jar${pathseparator}${lib.dir}/dom4j-1.4.jar{pathseparator}${lib.dir}/asm-attrs-1.4.3.jar org.codehaus.aspectwerkz.annotation.AnnotationC -verbose -src ${basedir}/src/test -classes ${basedir}/target/test-classes -custom ${basedir}/src/test/annotation.properties" />
		</exec>
	</target>

	<!-- =================================================== -->
	<!--  compiles aspects for the samples -->
	<!-- =================================================== -->
	<target name="samples:annotationc" depends="clean, compile">
		<exec executable="java">
			<arg line="-cp ${java.home}/../lib/tools.jar${pathseparator}${samples.classes}${pathseparator}${lib.dir}/aspectwerkz-${version}.jar${pathseparator}${lib.dir}/bcel-patch.jar${pathseparator}${lib.dir}/bcel.jar${pathseparator}${lib.dir}/piccolo-1.03.jar${pathseparator}${lib.dir}/qdox-1.4.jar${pathseparator}${lib.dir}/dom4j-1.4.jar{pathseparator}${lib.dir}/asm-attrs-1.4.3.jar{pathseparator}${lib.dir}/asm-1.4.3.jar org.codehaus.aspectwerkz.annotation.AnnotationC -verbose -src ${basedir}/src/samples -classes ${basedir}/target/samples-classes -custom ${basedir}/src/samples/annotation.properties" />
		</exec>
	</target>

	<!-- =================================================== -->
	<!--  runs perf tests -->
	<!-- =================================================== -->
	<target name="test:perf" depends="init, jar">
		<exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
			<arg line="-cp ${test.classes}${pathseparator}${samples.classes}${pathseparator}${lib.dir}/junit-3.8.1.jar${pathseparator}${lib.dir}/junitperf.jar -Daspectwerkz.definition.file=${src.dir}/test/test-attribdef.xml test.xmldef.AllPerfTests" />
		</exec>
	</target>

	<!-- =================================================== -->
	<!--  multithreaded custom classloader tests -->
	<!--  thread number and loops can be passed as argument -->
	<!--  refer to test.xmldef.clapp javadoc -->
	<!-- =================================================== -->
	<target name="test:clapp" depends="init, compile">
		<!-- run the application in regular mode -->
		<java classname="test.clapp.CrazyClassLoaderApp" fork="true">
			<classpath>
				<pathelement path="${test.classes}" />
			</classpath>
			<jvmarg value="-DDummyClass=${test.classes}" />
		</java>
		<!-- run the application thru AspectWerkz -->
		<exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
			<arg line="-cp ${test.classes} -Daspectwerkz.definition.file=${basedir}/src/test/test-attribdef.xml -DDummyClass=${test.classes} test.clapp.CrazyClassLoaderApp" />
		</exec>
	</target>

	<!-- =================================================== -->
	<!--  JDWP interactive Plug -->
	<!-- =================================================== -->
	<target name="samples:plug" depends="init, compile">
		<input message="Input args ? (-info .., -resume .., -hotswap .., -target file.jar)" addproperty="input.args" />
		<java classname="org.codehaus.aspectwerkz.hook.Plug" fork="true">
			<classpath>
				<pathelement path="${main.classes}" />
				<pathelement path="${java.home}/../lib/tools.jar" />
				<fileset dir="${lib.dir}">
					<include name="*.jar" />
				</fileset>
			</classpath>
			<arg line="${input.args}" />
		</java>
	</target>

	<!-- =================================================== -->
	<!--  runs the logging test -->
	<!-- =================================================== -->
	<target name="samples:logging" depends="samples:annotationc">
		<exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
			<arg line="-cp ${samples.classes} -Daspectwerkz.definition.file=${src.dir}/samples/samples-attribdef.xml -Daspectwerkz.transform.dump=* examples.logging.Target" />
		</exec>
	</target>

	<!-- =================================================== -->
	<!--  runs the caching test -->
	<!-- =================================================== -->
	<target name="samples:caching" depends="samples:annotationc">
		<exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
			<arg line="-cp ${samples.classes} -Daspectwerkz.definition.file=${src.dir}/samples/samples-attribdef.xml -Daspectwerkz.transform.dump=* examples.caching.CacheTest" />
		</exec>
	</target>

	<!-- =================================================== -->
	<!--  runs the cflow test -->
	<!-- =================================================== -->
	<target name="samples:cflow" depends="samples:annotationc">
		<exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
			<arg line="-cp ${samples.classes} -Daspectwerkz.definition.file=${src.dir}/samples/samples-attribdef.xml -Daspectwerkz.transform.dump=* examples.cflow.Target" />
		</exec>
	</target>

	<!-- =================================================== -->
	<!--  runs the introduction test -->
	<!-- =================================================== -->
	<target name="samples:introduction" depends="samples:annotationc">
		<exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
			<arg line="-cp ${samples.classes} -Daspectwerkz.definition.file=${src.dir}/samples/samples-attribdef.xml -Daspectwerkz.transform.dump=* examples.introduction.Target" />
		</exec>
	</target>

	<!-- =================================================== -->
	<!--  runs the exception handling test -->
	<!-- =================================================== -->
	<target name="samples:exception" depends="samples:annotationc">
		<exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
			<arg line="-cp ${samples.classes} -Daspectwerkz.definition.file=${src.dir}/samples/samples-attribdef.xml -Daspectwerkz.transform.dump=* examples.exception.Target" />
		</exec>
	</target>

	<!-- =================================================== -->
	<!--  runs the remote test - client side -->
	<!-- =================================================== -->
	<target name="samples:remote:client" depends="init, compile">
		<exec executable="java">
			<arg line="-cp ${pathseparator}${lib.dir}/aspectwerkz-${version}.jar${pathseparator}${samples.classes} examples.connectivity.Client" />
		</exec>
	</target>

	<!-- =================================================== -->
	<!--  runs the remote test - server side -->
	<!-- =================================================== -->
	<target name="samples:remote:server" depends="init, compile">
		<exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
			<arg line="-cp ${basedir}${pathseparator}${dist.dir}/extensions.jar${pathseparator}${lib.dir}/ant-1.5.2.jar${pathseparator}${samples.classes} -Daspectwerkz.transform.dump=* -Daspectwerkz.resource.bundle=${src.dir}/samples/aspectwerkz.properties -Daspectwerkz.remote.server.run=true -Daspectwerkz.definition.file=${src.dir}/samples/aspectwerkz.xml examples.connectivity.Server" />
		</exec>
	</target>

	<!-- =================================================== -->
	<!--  runs the logging sample in offline mode -->
	<!-- =================================================== -->
	<target name="samples:offlinelogging" depends="transform">
		<java classname="examples.logging.Target" fork="true">
			<classpath>
				<pathelement path="${java.home}/../lib/tools.jar" />
				<fileset dir="${lib.dir}" includes="*.jar" />
				<pathelement path="${main.classes}" />
				<pathelement path="${samples.classes}" />
			</classpath>
			<jvmarg value="-Daspectwerkz.definition.file=${basedir}/src/samples/samples-attribdef.xml" />
		</java>
	</target>

	<!-- =================================================== -->
	<!--  runs the introduction sample in offline mode -->
	<!-- =================================================== -->
	<target name="samples:offlineintroduction" depends="transform">
		<java classname="examples.introduction.Target" fork="true">
			<classpath>
				<pathelement path="${java.home}/../lib/tools.jar" />
				<fileset dir="${lib.dir}" includes="*.jar" />
				<pathelement path="${main.classes}" />
				<pathelement path="${samples.classes}" />
			</classpath>
			<jvmarg value="-Daspectwerkz.definition.file=${basedir}/src/samples/samples-attribdef.xml" />
		</java>
	</target>

</project>

