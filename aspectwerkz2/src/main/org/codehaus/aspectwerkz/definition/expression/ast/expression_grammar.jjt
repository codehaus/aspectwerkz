/**************************************************************************************
 * Copyright (c) Jonas Bonér, Alexandre Vasseur. All rights reserved.                 *
 * http://aspectwerkz.codehaus.org                                                    *
 * ---------------------------------------------------------------------------------- *
 * The software in this package is published under the terms of the LGPL license      *
 * a copy of which has been included with this distribution in the license.txt file.  *
 **************************************************************************************/

/**
 * JJTree Grammar for pointcut expression
 * Support boolean things and special cflow handling
 *
 * a AND b = a && b = a and b
 * OR = or = ||
 * NOT = not = !
 * standard operator priority and parenthesis grouping
 * IN = in
 * NOT IN = ! IN = ...
 * true = TRUE (literal), false = FALSE
 *
 *
 * Note: after regeneration, add public String name to generated Identifier
 
 * @author <a href="mailto:alex@gnilux.com">Alexandre Vasseur</a>
 */
options
{
	MULTI=true;
	NODE_DEFAULT_VOID=false;
	STATIC=false;
	NODE_PREFIX="";
	VISITOR=true;
	NODE_USES_PARSER=true;
	
	//LOOKAHEAD=2;
}


//---------------------------------------------------------------------
PARSER_BEGIN( ExpressionParser )

package org.codehaus.aspectwerkz.definition.expression.ast;
import java.io.Reader;
import java.io.StringReader;
public class ExpressionParser {

	public SimpleNode parse(Reader reader) throws ParseException {
		ReInit(reader);
		SimpleNode tree = ExpressionScript();
		return tree;
	}

	public SimpleNode parse(String expression) throws ParseException {
		return parse(new StringReader(expression));
	}
}
PARSER_END( ExpressionParser )
//---------------------------------------------------------------------


/**
 * Syntax entry
 */
SimpleNode ExpressionScript() :
{
}
{
	Expression()
	<EOF>
   	{ return jjtThis;}
}


/**
 * Expression
 * NOT > AND > OR priority
 */
void Expression() #void :
{}
{
	AndExpression()
	( <OR> AndExpression() #OrNode(2) )*
}
void AndExpression() #void :
{}
{
	UnaryExpression()
	( LOOKAHEAD(2) <AND> AndExpression() #AndNode(2) )*
}
void UnaryExpression() #void :
{}
{
	<NOT> UnaryExpression() #NotNode(1)
	|
	PrimaryExpression()
}
void PrimaryExpression() #void :
{}
{
	BooleanLiteral()
	|
	Identifier()
	|
	Anonymous()
	|
	"(" Expression() ")"
}


//---------------------------------------------------------------------
/**
 * Identifier
 */
void Identifier() :
{
   Token t;
}
{
    t=<IDENTIFIER>
    {
       jjtThis.name = t.image;
    }
}

/**
 * 
 */
void Anonymous() :
{
   Token t;
}
{
    t=<ANONYMOUS>
    {
       jjtThis.name = t.image;
    }
}

/**
 * CflowPattern
 *
void CflowPattern() :
{
   Token t;
}
{
    t=<ENTITY> "(" <ENTITY_LIST> ")"
    {
       jjtThis.pattern = t.image;
    }
}
**/


/**
 * Boolean literal - only lower case is supported for now
 */
void BooleanLiteral() :
{}
{
	"true" #TrueNode
	|
	"false" #FalseNode
}


SKIP : /* WHITE SPACE */
{
	" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
}

//---------------------------------------------------------------------
/* OPERATORS */
/* Operators must be declared before Identifiers so that they don't coallesce */
TOKEN : {
	< AND : "&&" | "and" | "AND" | "&" >
}
TOKEN : {
	< OR  : "||" | "or"  | "OR"  | "|" >
}
TOKEN : {
	< NOT : "!"  | "not" | "NOT" >
}

//---------------------------------------------------------------------
TOKEN : /* IDENTIFIERS */
{
	< ANONYMOUS: <ANONYMOUS_TYPE> "(" <ANONYMOUS_PATTERN> ")" >
	|
	< IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
	|
	< #LETTER: [ "a"-"z", "A"-"Z", "_", "$" ] >
	|
  	< #DIGIT: [ "0"-"9"] >
  	|
	< #ANONYMOUS_TYPE: "call" | "execution" | "get" | "set" | "class" | "cflow" | "handler" | "attribute" >
	|
	< #ANONYMOUS_PATTERN: <WORDS> ("(" (<WORDS>)? ")")? >
	|
	< #WORDS: <CHAR> (<CHAR>)* >
	|
  	< #CHAR: [ "a"-"z", "A"-"Z", "0"-"9", "_", "$", ".", "-", ">", ",",  " ", "*", "[", "]", "+" ] >
}





