<?xml version="1.0" encoding="UTF-8"?>
<!--*****************************************************************************************************************************
	AspectWerkz DTD 0.10

This DTD is provided as is. Some elements might have been deprecated since 0.7.4  (see comments)

This DTD might be incomplete - drop a mail on the user / dev mailing list

This DTD might clash with some of existing XML files since it imposes for some elements an order
(see aspect: introductions then pointcuts then advices)

The "unspecified" order of the aspectwerkz childs might change to the one similar of aspects
(transformation scope, introduction-def, advice-def, advices-def, abstract-aspect, aspect, package)

To use this DTD, start your defintion file with
	<!DOCTYPE aspectwerkz PUBLIC
	    "-//AspectWerkz//DTD 0.10//EN"
	    "http://aspectwerkz.codehaus.org/dtd/aspectwerkz_0_10.dtd">

You can also use the "aliasing DTD" that matchs always the latest release of AspectWerkz
<!DOCTYPE aspectwerkz PUBLIC
    "-//AspectWerkz//DTD//EN"
    "http://aspectwerkz.codehaus.org/dtd/aspectwerkz.dtd">

To not use this DTD, start your definition file with
	<?xml version="1.0"?>

Change from 0.8.1 to 0.9
    Removed "id" attribute from "aspectwerkz" element
    Added "<system id=...>" element
    "system" element can be wether a xml defined, wether and attribute defined one
    "system" element does not support mixin of xml aspects and attributes defined aspects
    "advice-def advice" attribute removed, use "class" instead
    "aspect/pointcut" removed, use "aspect/pointcut-def"
    "aspect/introduction" removed, use "aspect/bind-introduction"
    "abstract-aspect/introduction" removed, use "abstract-aspect/bind-introduction"
    "aspect/advice" removed, use "aspect/bind-advice"
    "abstract-aspect/advice" removed, use "abstract-aspect/bind-advice"
    (introduction-def | advice-def | advices-def | abstract-aspect | aspect | package)*
    add "exclude" and "include" element in "system" element
    "system/transformation-scope" removed, use "include" and "exclude"
    add "param" for "use-aspect"

Change from 0.9 to 0.10
    DTD refactored for Aspect as java class model
******************************************************************************************************************************-->


<!--*****************************************************************************************************************************
aspectwerkz
*********************************************************************************************************************************
Aspectwerkz defines the root element
For now a single system is supported.
******************************************************************************************************************************-->
<!ELEMENT aspectwerkz (system)>
<!--*****************************************************************************************************************************
system
*********************************************************************************************************************************
System allows isolation of AspectWerkz model
For now we only support a single system.
A system contains use-aspect syntax OR *-def *-ref syntax. The DTD cannot represent that.
Attributes:
    id: unique name of the AspectWerkz system (replaces <aspectwerkz id=..> in 0.8.1 DTD)
    base-package: provides the global package prefix
Notes:
    Due to package nesting, we cannot define an order here
******************************************************************************************************************************-->
<!ELEMENT system (
    (exclude | include | prepare)*,
    (aspect | package )*
)>
<!ATTLIST system
id CDATA #REQUIRED
base-package CDATA #IMPLIED
>
<!--*****************************************************************************************************************************
exclude
*********************************************************************************************************************************
Declares one global package prefix. Any class in the scope cannot have aspects on it within this system
Attributes:
	package: package prefix
Note: package does not support pattern, excepted ending ".*" like "foo.*", which is equivalent to "foo."
During weaving, a class is considered to be in the transformation scope with a classFQN.startsWith( ) test.
Note: if a class is both in exclude and include, it is considered excluded.
******************************************************************************************************************************-->
<!ELEMENT exclude EMPTY>
<!ATTLIST exclude
package CDATA #REQUIRED
>
<!--*****************************************************************************************************************************
include
*********************************************************************************************************************************
Declares one global package prefix. Any class not in the scope cannot have aspects on it within this system
Attributes:
	package: package prefix
Note: package does not support pattern, excepted ending ".*" like "foo.*", which is equivalent to "foo."
During weaving, a class is considered to be in the transformation scope with a classFQN.startsWith( ) test.
******************************************************************************************************************************-->
<!ELEMENT include EMPTY>
<!ATTLIST include
package CDATA #REQUIRED
>



<!ELEMENT prepare EMPTY>
<!ATTLIST prepare
package CDATA #REQUIRED
>
<!--*****************************************************************************************************************************
package
*********************************************************************************************************************************
Declares a package prefix which applies to all FQN (aspect) and patterns (pointcuts, class)
contained in the package element.
TODO REMOVE or IMPL - Package elements can be nested to ease writing of package and subpackage
TODO REMOVE or IMPL - (package@name "bar" nested in package@name "foo" means "foo.bar").
Attributes:
	name: package prefix
Notes:
    Does not support pattern, excepted ending ".*" like "foo.*" which is equivalent to "foo." and to "foo"
******************************************************************************************************************************-->
<!ELEMENT package (
    aspect*
)>
<!ATTLIST package
name CDATA #REQUIRED
>
<!--*****************************************************************************************************************************
aspect
*********************************************************************************************************************************
Declares aspect.
Attributes:
    name: unique name of the aspect in the system. Defaults to FQN (see class)
    class: FQN of Aspect (can have metdata or not)
    deployment-model: aspect life cycle, defaults to perJVM

******************************************************************************************************************************-->
<!ELEMENT aspect (
    param*,
    pointcut*,
    advice*
 )>
<!ATTLIST aspect
name CDATA #IMPLIED
class CDATA #REQUIRED
deployment-model (perJVM | perClass | perInstance | perThread) #IMPLIED
>
<!--*****************************************************************************************************************************
param
*********************************************************************************************************************************
Declares param for a aspect element
******************************************************************************************************************************-->
<!ELEMENT param EMPTY>
<!ATTLIST param
name CDATA #REQUIRED
value CDATA #REQUIRED
>
<!--*****************************************************************************************************************************
pointcut
*********************************************************************************************************************************
Attributes:
	name
	type
	pattern
******************************************************************************************************************************-->
<!ELEMENT pointcut EMPTY>
<!ATTLIST pointcut
name CDATA #REQUIRED
type (execution | call | get | set | cflow | class | handler | catch-clause | attribute) #REQUIRED
pattern CDATA #REQUIRED
>
<!--*****************************************************************************************************************************
advice
*********************************************************************************************************************************
Allow for advice declaration for use in several aspects
Use nested bind-to element for multiple binding
Attributes:
	name: method name implementing the advice
	type: advice type (orthogonal)
    bind-to: pointcut expression
******************************************************************************************************************************-->
<!ELEMENT advice (
    bind-to*
)>
<!ATTLIST advice
name CDATA #REQUIRED
type (around | before | after | afterFinally | afterReturning | afterThrowing) #REQUIRED
bind-to CDATA #IMPLIED
attribute CDATA #IMPLIED
>
<!--*****************************************************************************************************************************
bind-to
*********************************************************************************************************************************
Allow to bind an advice several times instead of using an OR expression
******************************************************************************************************************************-->
<!ELEMENT bind-to EMPTY>
<!ATTLIST bind-to
pointcut CDATA #REQUIRED
>
