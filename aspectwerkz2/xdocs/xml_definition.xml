<?xml version="1.0"?>

<document>

    <properties>
        <author email="jboner at codehaus dot org">jonas bon&#233;r</author>
        <author email="alex at gnilux dot com">alexandre vasseur</author>
        <title>XML definition</title>
    </properties>

    <body>
       <section name="XML definition">
            <p>
                What is important to understand is that both the Attribute and the XML definition are both just
                different views of the same underlying model. This means that they can easily co-exist and can
                succesfully be used together. The XML definition can be used as a replacement to the Attribute definition
                or as a complement. It can be used to refine and override definitions made in attributes as well as
                resolve missing pieces (for example pointcut definitions referenced but not defined) in the attribute
                definition. See the <a href="implementation.html#Choosing a definition model">Choosing a definition model</a>
                section for best practices.
            </p>
        </section>

        <section name="Table of Contents">
            <p>
                <ol>
                    <li>
                        <a href="#Aspects">Aspects</a>
                    </li>
                    <li>
                        <a href="#Pointcuts">Pointcuts</a>
                    </li>
                     <li>
                        <a href="#Advice">Advice</a>
                    </li>
                    <li>
                        <a href="#Introductions">Introductions</a>
                    </li>
                    <li>
                        <a href="#Passing parameters to aspects">Passing parameters to aspects</a>
                    </li>
                    <li>
                        <a href="#Example of an XML definition">Example of an XML definition</a>
                    </li>
                </ol>
            </p>
        </section>

        <section name="Aspects">
            <p>
                An aspect is defined in XML using the <code>aspect</code> element, which has two attributes:
                <ul>
                    <li>
                        <code>class</code> - specifies a fully qualified class name for the aspect implementation class.
                    </li>
                    <br/>
                    <li>
                        <code>deployment-model</code> - specifies the depoyment model for the aspect. The default is
                         <code>perJVM</code> if not specified
                        <ul>
                            <li>
                                <code>perJVM</code> - deploys the aspect as perJVM.
                            </li>
                            <li>
                                <code>perClass</code> - deploys the aspect as perClass.
                            </li>
                            <li>
                                <code>perInstance</code> - deploys the aspect as perInstance.
                            </li>
                            <li>
                                <code>perThread</code> - deploys the aspect as perThread.
                            </li>
                        </ul>
                    </li>
                </ul>
            </p>
            <p>
                Inside the <code>aspect</code> elements you then define the poincuts, advice and introductions.
            </p>
        </section>

        <section name="Pointcuts">
            <p>
                The pointcut is the construct that picks out join points, i.e. selects sets of well-defined points in the program flow.
                In the XML defintion pointcuts are defined using the <code>pointcut</code> element.
            </p>

            <p>
                When defining a <code>pointcut</code> there are two attributes that needs to be specified:
                <ul>
                    <li>
                        <code>name</code> -
                        specifies the name of the pointcut. Needs to be a unique
                        name throughout the aspect definintion.
                        <p/>
                        Caution: names must only consist of these characters:
                        <code>[A-Z]</code>, <code>[a-z]</code>, <code>[0-9]</code> and the characters <code>$</code> and
                        <code>_</code> (not for example <code>-</code> or <code>/</code>).
                    </li>
                    <br/>
                    <li>
                        <code>pattern</code> - specifies the pattern for the pointcut. This is the
                        pattern that picks out the join points that should be included in the pointcut.
                        <p>
                            See the
                            <a href="definition_issues.html#Join point selection pattern language">Join point selection pattern language</a>
                            section for a detailed description on how these patterns are written and see the
                            <a href="definition_issues.html#Pointcut definition">Pointcut definition</a> and
                            <a href="definition_issues.html#Pointcut composition">Pointcut composition</a> sections for details on
                            how pointcuts are defined and composed.
                        </p>
                    </li>
                    <br/>
                </ul>
            </p>

            <p>
                Example of some <code>pointcut</code> definitions:
                    <source><![CDATA[
<aspect ...>
    <pointcut name="pc1" pattern="execution(* foo.Bar.method(..))"/>
    <pointcut name="pc2" pattern="set(* foo.Bar.m_field)"/>
    <pointcut name="pc3" pattern="get(* foo.Bar.m_field)"/>
    <pointcut name="pc4" pattern="handler(java.lang.Exception)"/>
    <pointcut name="pc5" pattern="call(foo.Caller->String foo.Callee.method())"/>
    <pointcut name="pc6" pattern="cflow(* Transaction.begin(..))"/>
    ...
</aspect>
                    ]]></source>
            </p>

        </section>

        <section name="Advice">
            <p>
                In the XML defintion advice are defined using the <code>advice</code> element.
            </p>

            <p>
                When defining the <code>advice</code> there are three attributes that
                needs to be specified:
                <ul>
                    <li>
                        <code>name</code> - the name of the advice is the name of the method in the
                        aspect class that implements the advice.
                    </li>
                    <br/>
                    <li>
                        <code>type</code> - the type defines the type of the advice. Valid types are:
                         <ul>
                            <li>
                                <code>around</code> - defines an around advice
                            </li>
                            <li>
                                <code>before</code> - defines an before advice
                            </li>
                            <li>
                                <code>after</code> - defines an after advice
                            </li>
                        </ul>
                    </li>
                    <br/>
                    <li>
                        <code>bind-to</code> - binds the advice to a <code>pointcut</code> by referencing the name
                         of the <code>pointcut</code>.
                    </li>
                    <br/>
                </ul>
            </p>
        </section>

        <section name="Introductions">

            <p> TODO </p>

            <!---->
<!--            <p>-->
<!--                When defining the introductions there are four attributes-->
<!--                that needs to be specified:-->
<!--            </p>-->
<!--            <p>-->
<!--                <ul>-->
<!--                    <li>-->
<!--                        <code>name</code> - -->
<!--                        each introduction needs to have a unique name that will work-->
<!--                        as a handle to the advice to be used when referencing the-->
<!--                        introduction in the system.-->
<!--                    </li>-->
<!--                    <br/>-->
<!--                    <li>-->
<!--                        <code>interface</code> - -->
<!--                        this attribute specifies the full name of the interface class-->
<!--                        to use.-->
<!--                    </li>-->
<!--                    <br/>-->
<!--                    <li>-->
<!--                        <code>implementation</code> - -->
<!--                        this attribute specifies the full name of the implementation-->
<!--                        class to use. (Is skipped when we are defining an interface-->
<!--                        introduction).-->
<!--                    </li>-->
<!--                    <br/>-->
<!--                    <li>-->
<!--                        <code>deployment-model</code> - -->
<!--                        is an optional attribute specifying the deployment model-->
<!--                        to use. If no deployment model is defined the default perJVM-->
<!--                        (singleton) will be used. (For more information about-->
<!--                        the deployment model types available see the-->
<!--                        <a href="definition_issues.html#Deployment models">Deployment models section</a>).-->
<!--                    </li>-->
<!--                </ul>-->
<!--            </p>-->
<!---->
<!--            <p>-->
<!--                <b>XML definition</b>-->
<!--            </p>-->
<!--            <p>-->
<!--                    <source><![CDATA[-->
<!--<introduction-def name="java/io/Serializable"-->
<!--                  interface="java.io.Serializable"/>-->
<!---->
<!--<introduction-def name="mixins/Mixin"-->
<!--                  interface="mixins.Mixin"-->
<!--                  implementation="mixins.MixinImpl"-->
<!--                  deployment-model="perThread"/>-->
<!--                    ]]></source>-->
<!--            </p>-->
<!--            <p>-->
<!--                (These examples only shows how to define the-->
<!--                <code>Introduction</code>, for examples how to add them see-->
<!--                the-->
<!--                <a href="#Aspects">Aspects section</a>.)-->
<!--            </p>-->
        </section>


        <section name="Passing parameters to aspects">
            <p>
                You also have the option of passing parameters to your aspects.
                This can be very convenient if you want to reuse the same
                aspect but with a different configuration without using aspect inheritance.
                To pass a parameter to the aspect you simply add a
                <code>param</code> tag to the
                <code>aspect</code> definition, like this:
            </p>
            <p>
                <source><![CDATA[
<aspect ... >
    <param name="timeout" value="10"/>
</aspect>
                ]]></source>
            </p>
            <p>
                From within an <code>Aspect</code> subclass use the method <code>___AW_getParameter("timeout")</code> to retrieve
                the parameter value as a String.
            </p>
        </section>

        <section name="Example of an XML definition">
            <p>
                Here is an example where all the definitions are put together into a single
                <code>AspectWerkz</code> XML definition file.
            </p>
            <source><![CDATA[
<aspectwerkz>
    <system id="sample">
        <package name="examples">

            <aspect class="caching.CachingAspect" deployment-model="perInstance">
                <param name="timeout" value="10"/>

                <pointcut name="callee"
                          pattern="execution(int examples.caching.Pi.getPiDecimal(int))"/>

                <pointcut name="caller"
                          pattern="call(examples.caching.*->int examples.caching.Pi.getPiDecimal(int))"/>

                <advice name="invocationCounter"
                        type="before"
                        bind-to="caller"/>

                <advice name="cache"
                        type="around"
                        bind-to="callee"/>
            </aspect>
        </package>
    </system>
</aspectwerkz>
            ]]></source>
        </section>

    </body>

</document>
