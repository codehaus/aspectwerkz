<?xml version="1.0"?>

<document>

    <properties>
        <author email="jboner at codehaus dot org">jonas bon&#233;r</author>
        <author email="alex at gnilux dot com">alexandre vasseur</author>
        <title>General definition issues</title>
    </properties>

    <body>
        <section name="Table of Contents">
            <p>
                <ol>
                    <b>General definition issues</b>
                    <br/>
                    <li>
                        <a href="#Join point selection pattern language">Join point selection pattern language</a>
                    </li>
                    <li>
                        <a href="#AOP system">AOP system</a>
                    </li>
                    <li>
                        <a href="#Deployment models">Deployment models</a>
                    </li>
                    <li>
                        <a href="#Package namespaces">Package namespaces</a>
                    </li>
                    <li>
                        <a href="#Transformation scopes">Transformation scopes</a>
                    </li>
                    <li>
                        <a href="#DTD for XML definition">DTD for XML definition</a>
                    </li>
                    <li>
                        <a href="#Custom metadata compilation">Custom metadata compilation (JSR-175 support)</a>
                    </li>
                </ol>
            </p>

        </section>

        <section name="Join point selection pattern language">
            <p>
                <code>AspectWerkz</code> support a fine-grained pattern
                language for picking out join points.
            </p>

            <p>
                You can utilize two types of wildcards when constructing your
                patterns:
            </p>
            <p>
                <ul>
                    <li>
                        <code>*</code> - which is used as a regular wildcard.
                         Matches for example only one package level or one method parameter.
                         When used to match a package name, matches
                        <b>at least one</b> character. Else match
                        <b>zero or more</b> character.
                    </li>
                    <br/>
                    <li>
                        <code>..</code> - matches any sequence of characters that
                         start and end with a ".", so it can be used to pick out all
                         types in any subpackage. For example
                        <code>org.codehaus..*</code>
                         will match all classes in all subpackages starting from
                        <code>org.codehaus</code>.
                    </li>
                </ul>
                 Note: you can only use the
                <code>..</code> wildcard as the
                 "last" thing specified. I.e. this is
                <b>not</b> possible:
                <code>foo.bar..test.MyClass</code>, but this is:
                <code>foo.bar..</code>. The same thing holds for method
                 parameters.
            </p>

            <subsection name="Combining the patterns">
                <p>
                    The patterns normally consists of a combination of a class and a method
                    pattern or a class and a field pattern.
                </p>
                <p>
                    Example of a full method pattern:
                    <br/>
                    <code>&lt;return_type_pattern&gt; &lt;package_and_class_pattern&gt;.&lt;method_name_pattern&gt;(&lt;parameter_type_patterns&gt;)</code>
                </p>
                <p>
                    Example of a full field pattern:
                    <br/>
                    <code>&lt;field_type_pattern&gt; &lt;package_and_class_pattern&gt;.&lt;field_name_pattern&gt;</code>
                </p>
            </subsection>

            <subsection name="Class selections">
                <p>
                    For the class selections specify the full package name of
                    the class along with some wildcards.
                </p>
                <p>
                    <b>Examples:</b>
                </p>
                <p>
                    <ul>
                        <li>
                            <code>foo.bar.*</code> - will match
                            <br/>
                            <code>foo.bar.FooBar2</code> as well as
                            <br/>
                            <code>foo.bar.FooBear</code>.
                        </li>
                        <br/>
                        <li>
                            <code>foo.*.FooBar</code> - will match
                            <br/>
                            <code>foo.bar.FooBar2</code> as well as
                            <br/>
                            <code>foo.bear.FooBar</code> but not
                            <br/>
                            <code>foo.bear.FooBear</code>.
                        </li>
                        <br/>
                        <li>
                            <code>foo.*.FooB*</code> - will match
                            <br/>
                            <code>foo.bar.FooBar2</code> as well as
                            <br/>
                            <code>foo.bear.FooBear</code> as well as
                            <br/>
                            <code>foo.bear.FooB</code>.
                        </li>
                        <br/>
                        <li>
                            <code>foo..</code> - will match
                            <br/>
                            all classes in all packages starting with foo.
                        </li>
                    </ul>
                </p>
            </subsection>

            <subsection name="Method selections">
                <p>
                    The methods are selected by specifying a pattern that
                    consists of:
                </p>
                <p>
                    <ul>
                        <li>
                            return type
                        </li>
                        <li>
                            full name of method (including class and package)
                        </li>
                        <li>
                            parameter types
                        </li>
                    </ul>
                </p>
                <p>
                    All method patterns must follow this structure:
                    <br/>
                    <code>&lt;return_type&gt; &lt;full_method_name&gt;(&lt;parameter_types&gt;)</code>
                </p>
                <p>
                    <b>Examples</b>
                </p>
                <p>
                    <ul>
                        <li>
                            <code>int foo.*.Bar.method()</code> - will match
                            <br/>
                            <code>int method()</code> but not
                            <br/>
                            <code>int method(int i)</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int *.method(*)</code> - will match
                            <br/>
                            <code>int Foo.method(int i)</code> but not
                            <br/>
                            <code>int Foo.method()</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int foo.*.*.method(*,int)</code> - will match
                            <br/>
                            <code>int method(String s, int i)</code> as well as
                            <br/>
                            <code>int method(int i1, int i2)</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int foo.*.Bar.method(..)</code> - will match
                            <br/>
                            <code>int method()</code> as well as
                            <br/>
                            <code>int method(String s, int i)</code> as well as
                            <br/>
                            <code>int method(int i, double d, String s, Object o)</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int foo.*.Bar.method(int,..)</code> - will match
                            <br/>
                            <code>int method(int)</code> as well as
                            <br/>
                            <code>int method(int i, String s)</code> as well as
                            <br/>
                            <code>int method(int i, double d, String s, Object o)</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int foo.*.Bar.method(java.lang.*)</code> - will match
                            <br/>
                            <code>int method(String s)</code> as well as
                            <br/>
                            <code>int method(StringBuffer sb)</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int foo.*.Bar.me*o*()</code> - will match
                            <br/>
                            <code>int method()</code> as well as
                            <br/>
                            <code>int metamorphosis()</code> and
                            <code>int meo()</code> but not
                            <br/>
                            <code>int me()</code>.
                        </li>
                        <br/>
                        <li>
                            <code>* foo.*.Bar.method()</code> - will match
                            <br/>
                            <code>int method()</code> as well as
                            <br/>
                            <code>java.lang.String method()</code>.
                        </li>
                        <br/>
                        <li>
                            <code>java.lang.* foo.*.Bar.method()</code> - will match
                            <br/>
                            <code>java.lang.String Bar.method()</code> as well as
                            <br/>
                            <code>java.lang.StringBuffer Bar.method()</code>.
                        </li>
                    </ul>
                </p>
            </subsection>

            <subsection name="Field selections">
                <p>
                    The fields are selected by specifying a pattern that
                    consists of:
                </p>
                <p>
                    <ul>
                        <li>
                            field type
                        </li>
                        <li>
                            full name of field (including class and package)
                        </li>
                    </ul>
                </p>
                <p>
                    All field patterns must follow this structure:
                    <br/>
                    <code>&lt;field_type&gt; &lt;full_field_name&gt;</code>
                </p>
                <p>
                    <b>Examples</b>
                </p>
                <p>
                    <ul>
                        <li>
                            <code>int foo.*.Bar.m_foo</code> - will match
                            <br/>
                            <code>int m_foo</code> but not
                            <br/>
                            <code>int s_foo</code> or
                            <br/>
                            <code>long m_foo</code>.
                        </li>
                        <br/>
                        <li>
                            <code>* foo.*.Bar.m_foo</code> - will match
                            <br/>
                            <code>int m_foo</code> as well as
                            <br/>
                            <code>java.lang.String m_foo</code>.
                        </li>
                        <br/>
                        <li>
                            <code>java.lang.* foo.*.Bar.m_foo</code> - will match
                            <br/>
                            <code>java.lang.String m_foo</code> as well as
                            <br/>
                            <code>java.lang.StringBuffer m_foo</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int foo.*.Bar.m_*</code> - will match
                            <br/>
                            <code>int m_foo</code> as well as
                            <br/>
                            <code>int m_bar</code>.
                        </li>
                        <br/>
                        <li>
                            <code>int foo.*.Bar.m_*oo*</code> - will match
                            <br/>
                            <code>int m_foo</code> as well as
                            <br/>
                            <code>int m_looser</code> as well as
                            <br/>
                            <code>int m_oo</code>.
                        </li>
                    </ul>
                </p>

            </subsection>

            <subsection name="Subtype patterns">
                <p>
                    It is possible to pick out all subtypes of a type with the "+" wildcard.
                    The "+" wildcard follows immediately a type name pattern. So, while
                </p>
                <p>
                    <code>* foo.Bar.*(..)</code>
                </p>
                <p>
                    picks out all method call join points where an instance of exactly type Foo is
                    constructed,
                </p>
                <p>
                    <code>* foo.Bar+.*(..)</code>
                </p>
                <p>
                    picks out all method call join points where an instance of any subtype of
                    Foo (including Foo itself) is constructed.
                </p>
            </subsection>

            <subsection name="Array type patterns">
                <p>
                    A type name pattern or subtype pattern can be followed by one or more sets of
                    square brackets to make array type patterns. So Object[] is an array type
                    pattern, and so is foo.bar.*[][].
                </p>
            </subsection>

            <subsection name="Abbreviations">
                <p>
                    When picking out the return and parameter types it is
                    possible to use predefined abbreviations for the classes
                    in the
                    <code>java.lang.*</code> and
                    <code>java.util.*</code>
                    packages. If you specify only the class name it will be
                    mapped to the full class name for the class (you cannot use patterns in abbreviations).
                </p>
                <p>
                    <b>Examples</b>
                </p>
                <p>
                    You can use:
                    <ul>
                        <li>
                            <code>String</code> instead of
                            <code>java.lang.String</code>
                        </li>
                        <li>
                            <code>List</code> instead of
                            <code>java.util.List</code>
                        </li>
                        <li>
                            but not
                            <code>String*</code> instead of
                            <code>java.lang.String</code> or
                            <code>java.lang.StringBuffer</code>
                        </li>
                        <li>
                            and so on...
                        </li>
                    </ul>
                </p>
                <p>
                    Apart from these abbreviations you always have to specify
                    the fully qualified name of the class (along with the
                    wildcards).
                </p>
            </subsection>

            <subsection name="Expression">
                <p>
                    It is possible to combine patterns selection together using algebraic expressions. The following operators are supported:
                    <ul>
                        <li>
                            <code>AND</code> or
                            <code>&amp;&amp;</code>
                        </li>
                        <li>
                            <code>OR</code> or
                            <code>||</code>
                        </li>
                        <li>
                            <code>NOT</code> or
                            <code>!</code>
                        </li>
                        <li>
                            <code>IN</code> (use for cflow expressions, e.g.
                            <code>executionPointcut IN cflowPointcut</code>
                        </li>
                        <li>parenthesis for grouping</li>
                    </ul>
                    For model 1 deployed aspects, since the expression is defined in an XML file, the operator AND is more convient (else &amp; should be escaped).
                </p>
            </subsection>
        </section>

        <section name="AOP system">
            <p>
                Aspects deployed belong to a <code>system</code>. For now <code>AspectWerkz</code> support only a
                single system in the whole JVM. Aspect systems are named in the XML definition file and each system
                must have a unique name.
                The system name (
                <code>id</code>) is used when accessing system at runtime, for example when redefining the aspect system.
            </p>
            <p>
               Example:
                <source><![CDATA[
<aspectwerkz>
    <system id="system name">
        <aspect name="MyAspect1"/>
        <aspect name="MyAspect2"/>
        ...
    </system>
</aspectwerkz>
                ]]></source>
            </p>

            <p>
                Sample to access a system at runtime
                <source><![CDATA[
SystemLoader.getSystem("system name")
                ]]></source>
            </p>
        </section>

        <section name="Deployment models">
            <p>
                <code>AspectWerkz</code> supports four different deployment models, which defines the scope of the <code>Aspect</code>.
            </p>
            <p>
                The four different deployment models are:
                <ul>
                    <li>
                        <code>perJVM</code> - one sole instance per JVM.
                        Basically the same thing as a singleton class.
                    </li>
                    <br/>
                    <li>
                        <code>perClass</code> - one instance per class.
                    </li>
                    <br/>
                    <li>
                        <code>perInstance</code> - one instance per class instance.
                    </li>
                    <br/>
                    <li>
                        <code>perThread</code> - one instance per thread.
                    </li>
                </ul>
            </p>
            <p>
                Since introduction implementation are inner classes, they have to follow a subset of the aspect's
                deployment model. If not specified, the introduction is deployed as the aspect that defines it.
                Else the following applies:
                <table>
                    <tr>
                        <th>Introduction depl. model</th>
                        <th>required Aspect depl. model</th>
                    </tr>
                    <tr>
                        <td>perJVM</td>
                        <td>perJVM (default for Aspect)</td>
                    </tr>
                    <tr>
                        <td>perClass</td>
                        <td>perJVM or perClass</td>
                    </tr>
                    <tr>
                        <td>perInstance</td>
                        <td>perinstance or perClass or perJVM</td>
                    </tr>
                    <tr>
                        <td>perThread</td>
                        <td>perThread</td>
                    </tr>
                </table>
            </p>
        </section>

        <section name="Transformation scopes">
            <p>
                Using transformation scopes you can choose to perform the transformation within
                certain packages only. E.g. filter out all classes from all other packages in
                the transformation process. This can speed up the transformation process a lot as
                well as assure you that only classes within the packages you have defined is
                getting transformed no matter how freely you define your pointcut patterns.
            </p>
            <p>
                A transformation scope is defined using the
                <code>exclude</code> and
                <code>include</code>
                element which have one attribute
                <code>package</code> where you define the package
                name. You can define as many transformation scopes as you want.
                <br/>
                The
                <code>package</code> attribute supports only
                <code>.*</code> as an ending pattern (package and all sub package).
            </p>

            <p>
                During the transformation process (online or offline), a class might be transformed (depending on the pointcuts) if
                <ol>
                    <li>the class does not belongs to any
                        <code>exclude</code> packages if any
                    </li>
                    and
                    <li>the class belongs to
                        <b>at least one</b>
                        <code>include</code> packages if any
                    </li>
                </ol>
                Note that when
                <code>include</code> is used the selection is much more restrictive.
                This selection mechanism should be used as most as possible especially in online mode since it enables an ealry filtering.
            </p>
            <p>
                <b>Example</b>
                <source><![CDATA[
<aspectwerkz>
    <system id="sample">
        <!-- Transformations will only take place within the 'org.codehaus.package'
             package and its subpackages -->
        <include package="org.codehaus"/>
        <include package="org.codehaus.*"/> <!-- synonymous of org.codehaus -->
        <exclude package="com.oracle.*"/>
        ...
    </system>
</aspectwerkz>
                ]]></source>
            </p>
        </section>

        <section name="Package namespaces">
            <p>
                Package namespaces provide a way to simplify the edition of the XML definition file so that it is not necessary
                to prefix all
                <code>class</code> with the complete package information.
                <br/>
                You have two ways of defining a package namespace:
                <ul>
                    <li>
                        using the
                        <code>base-package</code> attribute in the
                        <code>system</code>
                        element. This defines a global package namespace for all elements defined within the
                        <code>system</code> element.
                    </li>
                    <br/>
                    <li>
                        using the
                        <code>package</code> element. This element has one attribute;
                        <code>name</code>, which defines the package namespace.
                    </li>
                </ul>
                The package name will be used as a prefix for all nested elements.
            </p>
            <p>
                <b>Example</b>
            </p>
            <p>
                <source><![CDATA[
<aspectwerkz>
    <system id="foodemo" base-package="foo">
        <!-- All classes are prefixed by 'foo' -->

        <package name="bar">
            <!-- All classes within these 'package' tags are prefixed by 'foo.bar' -->
        </package>

        <package name="baz.buzz">
            <!-- All classes within these 'package' tags are prefixed by 'foo.baz.buzz' -->
        </package>
    </system>
</aspectwerkz>
                ]]></source>
            </p>
        </section>

        <section name="DTD for XML definition">
            <p>
                Each distribution comes with a bundled DTD so that it is not looked
                for on the web at runtime. The XML is not validated against its DTD at runtime so be cautious
                to provide a valid XML defintion.
            </p>
            <p>
                When you write your XML definition file, add the following at the top of your XML to reference the latest release:
                <source><![CDATA[
<!DOCTYPE aspectwerkz PUBLIC
    "-//AspectWerkz//DTD//EN"
    "http://aspectwerkz.codehaus.org/dtd/aspectwerkz.dtd">
            ]]></source>
            </p>
            <p>
                It is possible to specify a specific released version number as well (starting with 0.8)
                <source><![CDATA[
<!DOCTYPE aspectwerkz PUBLIC
    "-//AspectWerkz//DTD 0.9//EN"
    "http://aspectwerkz.codehaus.org/dtd/aspectwerkz_0_9.dtd">
                ]]></source>
            </p>
        </section>

        <section name="Custom metadata compilation">
            <p>
                Custom metadata compilation allows to turn
                <code>@Attribute.&lt;name&gt; [&lt;value&gt;]</code> from source files to
                <code>.class</code> files by incorporating
                them into bytecode. This can be used f.e. to implement declarative transaction demarcation for POJO.
            </p>
            <p>
                The
                <code>AspectC</code> utility can be used to compile custom metadata to the class bytecode.
                Custom metadata is marked with
                <a href="attribute_definition.html#Attribute reference">
                    <code>@Attribute.</code>
                </a>.
                See <code>AspectC</code> <a href="attribute_definition.html#Attribute compilation">usage notes</a>.
            </p>
        </section>

    </body>

</document>
