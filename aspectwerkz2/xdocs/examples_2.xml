<?xml version="1.0"?>
<document>

    <properties>
        <title>Examples</title>
        <author email="jboner at codehaus dot org">jonas bon&#233;r</author>
        <author email="alex at gnilux dot com">alexandre vasseur</author>
    </properties>

    <body>

        <section name="Table of Contents">
            <p>
                <ol>
                    <li>
                        <a href="#Introduction">Introduction</a>
                    </li>
                    <li>
                        <a href="#Call and Execution pointcuts + Around and Before advice">Call and Execution pointcuts + Around advice</a>
                    </li>
                    <li>
                        <a href="#Set and Get pointcuts + Aspect inheritance">Set and Get pointcuts + Aspect inheritance</a>
                    </li>
                    <li>
                        <a href="#Implementation introductions">Implementation introductions</a>
                    </li>
                    <li>
                        <a href="#Control flow (cflow) pointcuts">Control flow (cflow) pointcuts</a>
                    </li>
                    <li>
                        <a href="#Handler pointcuts">Handler pointcuts (catch clauses)</a>
                    </li>
                    <li>
                        <a href="#XML definition file for the examples">XML definition file for the examples</a>
                    </li>
                </ol>
            </p>
        </section>

        <section name="Introduction">
            <p>
                Here are some simple examples to get you going with the 'Attribute definition - Self defined Aspects' approach.
                All examples together with ready to execute tests are to be found in the
                source distribution under <code>src/samples/examples</code>. They are all defined using the same definition file
                <code>samples-attribdef.xml</code>
            </p>
        </section>

        <section name="Call and Execution pointcuts + Around advice">
            <p>
                This aspect implements a simple caching service. It caches
                the results from the method invocations that are picked out
                by the pointcuts mapped to the advice.
            </p>
            <p>
                To run the example type:
                <code>maven aspectwerkz:samples:caching</code>
            </p>
            <source><![CDATA[
 /**
  * @Aspect perInstance
  */
 public class CachingAspect extends Aspect {

     /**
      * @Before call(examples.caching.*->int examples.caching.Pi.getPiDecimal(int))
      */
     public void invocationCounter(final JoinPoint joinPoint) throws Throwable {
         MethodSignature signature = (MethodSignature)joinPoint.getSignature();
         CacheStatistics.addMethodInvocation(
                 signature.getName(),
                 signature.getParameterTypes()
         );
     }

     /**
      * @Around execution(int examples.caching.Pi.getPiDecimal(int))
      */
     public Object cache(final JoinPoint joinPoint) throws Throwable {
         MethodSignature signature = (MethodSignature)joinPoint.getSignature();

         final Long hash = new Long(calculateHash(signature));
         final Object cachedResult = m_cache.get(hash);

         if (cachedResult != null) {
             System.out.println("using cache");
             CacheStatistics.addCacheInvocation(signature.getName(), signature.getParameterTypes());
             System.out.println("parameter: timeout = " + ___AW_getParameter("timeout"));
             return cachedResult;
         }
         final Object result = joinPoint.proceed();

         m_cache.put(hash, result);
         return result;
     }

    // ============ Utility methods ============

    ...

    protected Map m_cache = new HashMap();
}
            ]]></source>
        </section>

        <section name="Set and Get pointcuts + Aspect inheritance">
            <p>
                This aspect implements a simple logging service.
                It logs the entry and exit of the methods that are picked
                out by the pointcuts mapped to the advice. In this simple
                example we are only using a small subset of all the metadata
                available from the join point.
            </p>
            <p>
                To run the example type:
                <code>maven aspectwerkz:samples:logging</code>
            </p>
            <p>
                An abstract aspect is provided. By extending the abstract aspect we just need to define the pointcuts
                to refine the metadata that defines the pointcuts where logging concern has to be bounded.
                Note that no pointcut needs to be defined in the abstract aspect.
            </p>
            <source><![CDATA[
public abstract class AbstractLoggingAspect extends Aspect {

    private int m_level = 0;

    /**
     * @Around methodsToLog1 || methodsToLog2 || methodsToLog3
     */
    public Object logMethod(final JoinPoint joinPoint) throws Throwable {
        MemberSignature signature = (MemberSignature)joinPoint.getSignature();
        indent();
        System.out.println("--> " + joinPoint.getTargetClass().getName() + "::" + signature.getName());
        m_level++;
        final Object result = joinPoint.proceed();
        m_level--;
        indent();
        System.out.println("<-- " + joinPoint.getTargetClass().getName() + "::" + signature.getName());
        return result;
    }

    /**
     * @Before logSet || logGet
     */
    public void logEntry(final JoinPoint joinPoint) throws Throwable {
        MemberSignature signature = (MemberSignature)joinPoint.getSignature();
        System.out.println("ENTER: " + joinPoint.getTargetClass().getName() + "::" + signature.getName());
    }

    /**
     * @After logSet || logGet
     */
    public void logExit(final JoinPoint joinPoint) throws Throwable {
        MemberSignature signature = (MemberSignature)joinPoint.getSignature();
        System.out.println("EXIT: " + joinPoint.getTargetClass().getName() + "::" + signature.getName());
    }

    private void indent() {
        for (int i = 0; i < m_level; i++) {
            System.out.print("  ");
        }
    }
}

/**
 * The concrete Aspect just defines the pointcut following the naming convention
 * the abstract Aspect has defined.
 */
public class LoggingAspect extends AbstractLoggingAspect {

    // ============ Pointcuts ============

    /**
     * @Expression execution(* examples.attribdef.logging.Target.toLog1(..))
     */
    Pointcut methodsToLog1;

    /**
     * @Expression execution(* examples.attribdef.logging.Target.toLog2(..))
     */
    Pointcut methodsToLog2;

    /**
     * @Expression execution(* examples.attribdef.logging.Target.toLog3(..))
     */
    Pointcut methodsToLog3;

    /**
     * @Expression get(int examples.attribdef.logging.Target.m_*)
     */
    Pointcut logGet;

    /**
     * @Expression set(int examples.attribdef.logging.Target.m_*)
     */
    Pointcut logSet;
}
            ]]></source>
        </section>

        <section name="Implementation introductions">
            <p>
                This example shows both how implementation introductions (Mixins) are implemented.
            </p>
            <p>
                To run the example type:
                <code>maven aspectwerkz:samples:introduction</code>
                <br/>
                The example makes use of mixin inheritance within aspect
                inheritance. Moreover, the concrete aspect hides the introduced interface by using
                the
                <i>implicit</i> interface lookup (introduced interface are looked for in the mixin
                implementation hierarchy).
                <br/>
                You can also note the deployment models. The mixin is perInstance whereas the aspect is perClass,
                thus you have to call the right methods to retrieve the target instance (since there is none attached to the aspect).
            </p>
            <p>
                Note: if you add more than one
                <code>Introduction</code> to a class
                then
                <b>you</b> have to make sure that the names of the methods
                do not collide.
                <source><![CDATA[
/**
 * @Aspect perClass
 */
public class IntroductionAspect extends AbstractIntroductionAspect {

    /**
     * Here we have an anonymous pointcut instead of using [AT]Class metadata at Pointcut fields level.
     *
     * @Introduce class(examples.introduction.Target) deploymentModel=perInstance
     */
    public static class Mixin extends MyImpl implements Serializable {
        public String sayHello2() {
            System.out.println("aspect target class: " +    ___AW_getTargetClass());
            System.out.println("aspect target instance: " + ___AW_getTargetInstance());
            System.out.println("mixin target class: " +     ___AW_getMixinTargetClass(this.getClass().getName(), this));
            System.out.println("mixin target instance: " +  ___AW_getMixinTargetInstance(this.getClass().getName(), this));
            return "Hello World! Hello World!";
        }
    }
}
}]]></source>
                As you can see neither the interface nor the implementation class
                needs to implement a certain interface or extend a certain class.
            </p>
            <p>
                Now you will be able to invoke your
                <code>Introduction</code>
                like this:
                <source><![CDATA[
public class Target {
    ...
    System.out.println("The mixin says: " + ((Mixin)this).sayHello2());
    ...
}]]></source>
            </p>
        </section>

        <section name="Control flow (cflow) pointcuts">
            <p>
                This example shows how control flow (cflow) pointcuts are implemented.
            </p>
            <p>
                To run the example type:
                <code>maven aspectwerkz:samples:cflow</code>
                <br/>
            </p>
            <p>
                In this example we have two methods
                <code>step1</code> and
                <code>step2</code>
                in which
                <code>step1</code> calls
                <code>step2</code>.
            </p>
            <p>
                The advices at the step2
                <code>@Execution</code> pointcut will only be triggered if we are in the
                control flow of the
                <code>@cflow</code> pointcut called cflowPointcut, e.g. the
                method
                <code>step1</code>. Otherwise the advice should be skipped.
                <br/>
                Note the
                <code>&amp;&amp;</code> expression to express the cflow algebraic.
            </p>
            <p>
                <source><![CDATA[
public class CFlowAspect extends Aspect {

    /**
     * @Around cflow(void examples.attribdef.cflow.Target.step1()) && execution(void examples.attribdef.cflow.Target.step2())
     */
    public Object logMethod(final JoinPoint joinPoint) throws Throwable {
        Object result = joinPoint.proceed();
        System.out.println("  --> invoking advice triggered by step2");
        return result;
    }
}]]></source>
            </p>
        </section>

        <section name="Handler pointcuts">
            <p>
                This example shows how catch clauses be intercepted with <code>@Handler</code> pointcut.
            </p>
            <p>
                To run the example type:
                <code>maven aspectwerkz:samples:exception</code>
                <br/>
            </p>
            <p>
                <source><![CDATA[
public class ExceptionHandler extends Aspect {

    /**
     * @Before handler(java.lang.Exception+)
     */
    public void handleException(final JoinPoint joinPoint) throws Throwable {
        // handle the exception
        ...
    }
}
                ]]></source>
            </p>
        </section>

        <section name="XML definition file for the examples">
            <p>
                Here is the XML deployment descriptor file for the aspect examples above.
            </p>
            <source><![CDATA[
<!DOCTYPE aspectwerkz PUBLIC
    "-//AspectWerkz//DTD//EN"
    "http://aspectwerkz.codehaus.org/dtd/aspectwerkz.dtd">

<aspectwerkz>
    <system id="samples">
        <package name="examples">
            <aspect class="caching.CachingAspect">
                <param name="timeout" value="10"/>
            </aspect>
            <aspect class="logging.LoggingAspect"/>
            <aspect class="introduction.IntroductionAspect"/>
            <aspect class="cflow.CFlowAspect"/>
            <aspect class="exception.ExceptionHandlingAspect"/>
        </package>
    </system>
</aspectwerkz>
            ]]></source>
        </section>
    </body>

</document>

