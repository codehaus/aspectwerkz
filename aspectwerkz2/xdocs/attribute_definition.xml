<?xml version="1.0"?>

<document>

    <properties>
        <author email="jboner at codehaus dot org">jonas bon&#233;r</author>
        <author email="alex at gnilux dot com">alexandre vasseur</author>
        <title>Attribute definition</title>
    </properties>

    <body>

        <section name="Table of Contents">
            <p>
                <ol>
                    <b>Attribute definition - Self-defined Aspects</b>
                    <br/>
                    <li>
                        <a href="#Aspects">Aspects</a>
                    </li>
                    <li>
                        <a href="#Pointcuts">Pointcuts</a>
                    </li>
                    <li>
                        <a href="#Advice">Advice</a>
                    </li>
                    <li>
                        <a href="#Introductions">Introductions</a>
                    </li>
                    <li>
                        <a href="#Attribute reference">Attribute reference</a>
                    </li>
                    <li>
                        <a href="#Attribute compilation">Attribute compilation</a>
                    </li>
                    <li>
                        <a href="#Passing parameters to aspects">Passing parameters to aspects</a>
                    </li>
                    <li>
                        <a href="#XML deployment descriptor">XML deployment descriptor</a>
                    </li>
                </ol>
            </p>

        </section>

         <section name="Aspects">
                <p>
                    Even if all definition is made using attribute (and nothing in XML) an tiny deployment descriptor in
                    XML still has to be written. This is needed for the runtime system to know which aspects it should
                    load. See the <a href="#XML deployment descriptor">XML deployment descriptor</a> section for more
                    information on how to write such a deployment descriptor.
                </p>

                <p>
                    When defining an aspect using attributes, the deployment model is specified as metadata argument
                    of the metadata tag <code>@Aspect</code>. (The current implementation uses a doclet syntax.
                    <code>AspectWerkz</code> will support JSR-175 syntax as well, as soon as it is available.)
                </p>
                <p>
                    <code>@Aspect</code> class level metadata has an optional anonymous parameter which specifies the
                    deployment model. The default is <code>perJVM</code> if not specified.
<!--                        <li>an optional-->
<!--                            <code>name=</code> named parameter which specify the name of the aspect.-->
<!--                            The default is the aspect class name if not specified.-->
<!--                        </li>-->
                    <ul>
                        <li>
                            <code>@Aspect perJVM</code> - deploys the aspect as perJVM. This is the default if only
                            <code>@Aspect</code> is specified.
                        </li>
                        <br/>
                        <li>
                            <code>@Aspect perClass</code> - deploys the aspect as perClass.
                        </li>
                        <br/>
                        <li>
                            <code>@Aspect perInstance</code> - deploys the aspect as perInstance.
                        </li>
                        <br/>
                        <li>
                            <code>@Aspect perThread</code> - deploys the aspect as perThread.
                        </li>
                        <br/>
                    </ul>
                    It is also possible to not declare the <code>@Aspect</code> and define the deployment model in the
                    XML descriptor.
                </p>

             <subsection name="Define the pointcuts">

                <p>
                    In the aspect class you put the pointcut definitions as fields of the type
                    <code>org.codehaus.aspectwerkz.Pointcut</code>
                    along with metadata attributes which specifies the type of pointcut (execution, call, set, get, cflow or handler).
                    See
                    <a href="#Pointcuts">Pointcuts section</a>.
                </p>

            </subsection>

             <subsection name="Define the introductions">
                <p>
                    In the aspect class you specify the introduction to add as field for pure interface introduction
                    (marker interface with no required method)
                    or as public inner-class for interface and implementation introduction.
                </p>
                <p>
                    Pure interface introduction are added by adding a field to the aspect. The field type has to be the
                    interface that you want to introduce. The
                    <code>@Introduce</code> metadata is then used to specify
                    the pattern matching the classes you want the introduction to be applied to.
                    See
                    <a href="#Introductions">Introductions section</a>.
                </p>
                <p>
                    Interface introduction with implementation, also known as mixins, are added by adding a public inner-class to the aspect class.
                    The inner-class is then the default introduction/mixin implementation. It can extend any class you want, just like any other regular java class.
                    The
                    <code>@Implements</code> metadata specifies the pattern matching the classes you want the introduction/mixin to be applied to.
                    The interface(s) introduced can be whether be set explicitly by letting the inner-class implement the interface(s), whether implicitly
                    by inheriting another class which is itself implementing the interface(s).
                    This can be handy when distributing reusable aspects.
                    See
                    <a href="#Introductions">Introductions section</a>.
                </p>

             </subsection>

             <subsection name="Define the advice">
                <p>
                    Define the type of the advice using metadata for the method along with the method or field pattern
                    or pattern expression to which it the advice should be bound.
                </p>
                <p>
                    One of <code>@Around</code>, <code>@Before</code> or <code>@After</code> needs to be is specified.
                    See the <a href="#Advice">Advice section</a>
                </p>
                <p>
                    These expression can be any (almost) kind of algebraic expression.
                    The operators
                    <code>||</code>,
                    <code>OR</code>,
                    <code>&amp;&amp;</code>,
                    <code>AND</code> are supported.
                </p>
                <p>
                    Here you also define if the pointcut/expression should be a part of a control flow using an algebraic
                    <code>AND</code> expression mixing one or more pointcut names with one or more poincut names of type
                    <code>CFlow</code> i.e. whose matching <code>Pointcut</code> fields are marked with <code>@CFlow</code> metadata.
                </p>

                <p>
                    <b>Source sample</b>
                </p>
                <p>
                    The following source sample gives the main ideas of the self-defined Aspect.
                    Please remember that the metadata markers are inserted in the bytecode through a post-compilation step
                    which won't be needed under java 1.5.
                    <source><![CDATA[
/**
 * @Aspect perInstance
 */
public class MyAspect extends Aspect {

    /**
     * @Implements com.mypackage.*
     */
    MarkerInterface anIntroduction;

    /**
     * @Execution * com.mypackage.Target.*(..)
     */
    Pointcut pc1;

    /**
     * @Around pc1
     */
    public Object advice1(final JoinPoint joinPoint) throws Throwable {
        // do some stuff
        Object result = joinPoint.proceed();
        // do some other stuff
        return result;
    }

    /**
     * @Introduce com.mypackage.*
     */
    public static class MyIntroduction extends SuperMixin implements ContractualInterface {
        ... // introduced methods and fields
    }
}
                        ]]></source>
                </p>
            </subsection>
        </section>

        <section name="Pointcuts">
            <p>
                The
                <code>Pointcut</code> class implements the pointcut concept.
                A Pointcut picks out join points, i.e. selects well-defined points in the program flow.
            </p>

            <subsection name="Implementation">
                <p>
                    The Pointcuts are implemented as fields in the Aspect class and they have to follow the following requirements:
                    <ol>
                        <li>
                            The field is of type
                            <code>org.codehaus.aspectwerkz.Pointcut</code> and should be
                            declared in the aspect class or hierarchy.
                        </li>
                        <br/>
                        <li>
                            The metadata markers at the field level allows to define the type of Pointcut
                        </li>
                    </ol>
                </p>

                <p>
                    The name of the pointcut is the field name.
                </p>

                <p>
                    The following types of pointcuts are currently supported and type is specified as metadata at the field level:
                    <ul>
                        <li>
                            <code>@Execution &lt;methodPattern&gt;</code> - picks out join points defining method execution.
                            <br/>
                            Valid advice method metadata for this pointcut are
                            <code>@Around</code>, <code>@Before</code> and <code>@After</code>.
                        </li>
                        <br/>
                        <li>
                            <code>@Call &lt;callerSidePattern&gt;</code> - picks out join points defining method invocation
                            on the caller side.
                            <br/>
                            Valid advice method metadata for this pointcut are
                            <code>@Around</code>, <code>@Before</code> and <code>@After</code>.
                        </li>
                        <br/>
                        <li>
                            <code>@Set &lt;fieldPattern&gt;</code> - picks out join points defining field modification.
                            <br/>
                            Valid advice method metadata for this pointcut are
                            <code>@Around</code>, <code>@Before</code> and <code>@After</code>.
                        </li>
                        <br/>
                        <li>
                            <code>@Get &lt;fieldPattern&gt;</code> - picks out join points defining field access.
                            <br/>
                            Valid advice method metadata for this pointcut are
                            <code>@Around</code>, <code>@Before</code> and <code>@After</code>.
                        </li>
                        <br/>
                        <li>
                            <code>@Handler &lt;exceptionPattern&gt;</code> - picks out join points
                            definining where an exception is thrown out of a method.
                            <br/>
                            Valid advice method metadata for this pointcut is <code>@Before</code>.
                        </li>
                        <br/>
                        <li>
                            <code>@CFlow &lt;methodPattern&gt;</code> - picks out join points defining a control flow (cflow).
                            <br/>
                            This pointcut can only be used on conjunction with other pointcut types in an algebraic <code>AND</code> expression.
                        </li>
                        <br/>
                        <li>
                            <code>@Class &lt;classPattern&gt;</code> - picks out class names.
                            To be used with mixin
                            <code>@Implements</code> and
                            <code>@Introduce</code> metadata.
                        </li>
                        <br/>
                    </ul>
                </p>
                <p>
                    <source><![CDATA[
    /**
     * @Execution * com.package..*.*(..)
     */
    Poincut allMethods;

    /**
     * @Set * com.package.Constants.*
     */
    Pointcut allConstantAccess;
                        ]]></source>
                </p>
                <p>
                    These metadata attributes are followed by the pattern.
                    The exact syntax depends of the type of the Advice itself.
                    This is the pattern that picks out the join points that should be
                    included in the pointcut.
                    <p/>
                    For the
                    <code>@Handler</code> the pattern is defined like this:
                    <code>fullyQualifiedNameOfException</code>.
                    <p/>
                    For the
                    <code>@Call</code> the pattern is defined like this:
                    <code>callerSideClassPattern->calleeSideMethodPattern</code>.
                    <p/>
                    See the
                    <a href="definition_issues.html#Join point selection pattern language">Join point selection pattern language</a>
                    section for a detailed description on how these patterns work and are used.
                </p>
            </subsection>
        </section>

        <section name="Advice">
            <p>
                The advice are implemented as regular methods in the Aspect class with the following requirements:
                <ol>
                    <li>
                        The signature of the method is
                        <code>public Object &lt;name of method&gt;(JoinPoint joinPoint) throws Throwable</code>
                        (the public modifier is not mandatory, choose according to your needs).
                    </li>
                    <br/>
                    <li>
                        The method has a metadata that specifies the advice type and the matching joinpoints through a pointcut expression.
                        The matching joinpoints are whether defined as an anonymous pointcut (and not a as a field)
                        whether as an algebraic expression composed by other poincuts, whose type matches the advice type.
                    </li>
                    <br/>
                </ol>
            </p>

                <p>
                    The supported types of advice are the following.
<!--                    Each type is a metadata marker at the method level with:-->
<!--                    <ol>-->
<!--                        <li>a mandatory anonymous parameter to specify the expression for matching joinpoints.</li>-->
<!--                        <li>an optional-->
<!--                            <code>name=</code> parameter which specify the advice name.-->
<!--                            Defaults to the &lt;aspect class name&gt;.&lt;method name&gt; if not specified.-->
<!--                        </li>-->
<!--                    </ol>-->
                    <ul>
                        <li>
                            <code>@Around &lt;expression&gt;</code> - is invoked "around" the
                            join point. Can be used to intercept method invocations on the 'callee' side.
                        </li>
                        <br/>
                        <li>
                            <code>@Before &lt;expression&gt;</code> - is invoked before the join
                            point. Can be used for advising fields or method invocations on the 'caller' side.
                        </li>
                        <br/>
                        <li>
                            <code>@After &lt;expression&gt;</code> - is invoked after the join
                            point. Can be used for advising fields or method invocations on the 'caller' side.
                        </li>
                        <br/>
                    </ul>
                </p>
                <p>
                    Here is a simple example of an <code>Around</code> advice.
                    (For more examples see the <a href="examples_2.html">Examples section</a>.)
                </p>
                <p>
                    <source><![CDATA[
    /**
     * Non anonymous expression (pc1 and pc2 are fields of type Pointcut with metadata).
     *
     * @Around pc1 && pc2
     */
    public Object myAroundAdvice1(JoinPoint joinPoint) throws Throwable {
        // do some stuff
        Object result = joinPoint.proceed();
        // do some more stuff
        return result;
    }

    /**
     * Anonymous pointcut.
     *
     * @Around * com.package.Target.*(..)
     */
    public Object myAroundAdvice2(JoinPoint joinPoint) throws Throwable {
        // do some stuff
        Object result = joinPoint.proceed();
        // do some more stuff
        return result;
    }
]]></source>
                </p>

        </section>

        <section name="Introductions">
            <p>
                The Introduction class implements the concept of Mixins or Open Classes.
                I.e. an Introduction makes it possible to extend a class with a new interface
                and/or a new implementation (methods and fields).
            </p>
            <p>
               Using attributes, introductions are defined as:
                <ul>
                    <li>Fields of the aspect class whose type is the interface to introduce.
                        <br/>
                        Use if the interface does not require any implementation (marker interface).
                        <br/>
                        Fields are marked with metadata <code>@Implements &lt;classPattern&gt;</code>.
                    </li>
                    <br/>
                    <li>Public inner class of the aspect class.
                        <br/>
                        The inner class declares to implement the interface(s) to introduce and effectively implements it.
                        The inner class is marked with metadata <code>@Introduce &lt;classPattern&gt;</code>.
                    </li>
                </ul>
            </p>
            <subsection name="Interface introductions">
                <p>
                    Interface introductions (introduction of marker interfaces) are defined as fields in the aspect class.
                    The type of the field is the interface to introduce.
                    <br/>
                    The field is marked with metadata <code>@Implements &lt;classPattern&gt;</code> to specify to which
                    classes the introduction applies.
                    <br/>
                    The name of the introduction is the field name.
                </p>
                <p>
                    When using abstract aspects or aspect inheritance, the aspect's super class can define interface
                    introductions without specifying a <code>@Implements &lt;classPattern&gt;</code> metadata.
                    The concrete aspect should thus override the fields and specify the metadata defining to which
                    classes the introduction applies.
                </p>
                <p>
                    <source><![CDATA[
    /**
     * @Implements com.package.*
     */
    protected Serializable introduction1;

    /**
     * @Implements com.package.*
     */
    public OtherMarkerInterface introduction2;
                    ]]></source>
                </p>

            </subsection>

            <subsection name="Implementation introductions">
                <p>
                    The inner mixin class is marked with metadata <code>@Introduce &lt;classPattern&gt;</code>
                    to specify to which classes the introduction applies.
                    <br/>
                    The
                    <code>@Introduce</code> attribute accepts an optional <code>deploymentModel=</code> parameter to specify the
                    introduction deployment model. If not specified the aspect deployment model applies.
                    See <a href="definition_issues.html#Deployment models">deployment model section</a>.
                    <br/>
                    The name of the introduction is the fully qualified inner class name e.g.
                    <code>&lt;aspectClassName&gt;$&lt;innerClassName&gt;</code>.
                </p>
                <p>
                    When using abstract aspects or aspect inheritance, the aspect's super class can define introductions without
                    specifying a <code>@Introduce &lt;classPattern&gt;</code> metadata.
                    The concrete aspect shtrould thus declare an inner class that extends the super class aspect one's and
                    specify through metadata to which classes the introduction applies.
                </p>
                <p>
                    <source><![CDATA[
    /**
     * Anonymous pointcut.
     *
     * @Introduce com.package.*
     */
    public class MyIntroduction extends SuperIntroduction implements ToBeIntroduced {
        // introduced methods implementation
        ...
    }

    /**
     * @Class com.package.Foo
     */
    Pointcut pc1;

    /**
     * Named pointcut(s) in expression.
     *
     * @Introduce pc1
     */
    public class AnotherIntroduction implements AnotherToBeIntroduced {
        // introduced methods implementation
        ...
    }
                    ]]></source>
                </p>

            </subsection>
        </section>

        <section name="Attribute reference">
            <p>
                This section references all attributes used in the attribute definition.
            </p>
            <p>
                <table>
                    <tr>
                        <th>meta</th>
                        <th>level</th>
                        <th>component</th>
                        <th>anonymous parameter</th>
                        <th>parameter(s)</th>
                    </tr>
                    <tr>
                        <th colspan="5">[O:defaultValue] for optional parameter with default value</th>
                    </tr>
                    <tr>
                        <td>@Aspect</td>
                        <td>class</td>
                        <td>Aspect</td>
                        <td>perJVM | perClass | perInstance | perThread [O:perJVM]</td>
                        <td>name [0:&lt;aspectClassName&gt;]</td>
                    </tr>
                    <tr>
                        <td>@Implements</td>
                        <td>field</td>
                        <td>Interface Introduction</td>
                        <td>&lt;classPattern&gt;</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>@Introduce</td>
                        <td>inner class, class level</td>
                        <td>Implementation Introduction</td>
                        <td>&lt;classPattern&gt;</td>
                        <td>deploymentModel=perJVM | perClass | perInstance | perThread [O: aspect'one]</td>
                    </tr>
                    <tr>
                        <td>@Execution</td>
                        <td>Pointcut field</td>
                        <td>Pointcut, method execution</td>
                        <td>&lt;methodPattern&gt;</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>@Call</td>
                        <td>Pointcut field</td>
                        <td>Pointcut, method call</td>
                        <td>&lt;callerSidePattern&gt;</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>@Set</td>
                        <td>Pointcut field</td>
                        <td>Pointcut, field modification / access</td>
                        <td>&lt;fieldPattern&gt;</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>@Handler</td>
                        <td>Pointcut field</td>
                        <td>Pointcut, catch clause</td>
                        <td>&lt;exceptionClassPattern&gt;</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>@Get</td>
                        <td>Pointcut field</td>
                        <td>Pointcut, field modification / access</td>
                        <td>&lt;fieldPattern&gt;</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>@CFlow</td>
                        <td>Pointcut field</td>
                        <td>Pointcut, in cflow of</td>
                        <td>&lt;methodPattern&gt;</td>
                        <td></td>
                    </tr>
                    <tr>
                        <td>@Class</td>
                        <td>Pointcut field</td>
                        <td>Pointcut, class selection</td>
                        <td>&lt;classPattern&gt;</td>
                        <td></td>
                    </tr>                    <tr>
                        <td>@Around</td>
                        <td>Method</td>
                        <td>Advice for @Around, @Throws</td>
                        <td>&lt;expression&gt;</td>
                        <td>name [0:&lt;aspectClassName&gt;.&lt;methodName&gt;</td>
                    </tr>
                    <tr>
                        <td>@Before</td>
                        <td>Method</td>
                        <td>Advice for @Call, @Set, @Get</td>
                        <td>&lt;expression&gt;</td>
                        <td>name [0:&lt;aspectClassName&gt;.&lt;methodName&gt;</td>
                    </tr>
                    <tr>
                        <td>@After</td>
                        <td>Method</td>
                        <td>Advice for @Call, @Set, @Get</td>
                        <td>&lt;expression&gt;</td>
                        <td>name [0:&lt;aspectClassName&gt;.&lt;methodName&gt;</td>
                    </tr>
                    <tr>
                        <td>@Throws</td>
                        <td>Method</td>
                        <td>Advice for @Throws</td>
                        <td>&lt;expression&gt;</td>
                        <td>name [0:&lt;aspectClassName&gt;.&lt;methodName&gt;</td>
                    </tr>
                    <tr>
                        <td>@Attribute.&lt;name&gt;</td>
                        <td>any</td>
                        <td>custom runtime accessible attribute</td>
                        <td></td>
                        <td></td>
                    </tr>
                </table>
            </p>
        </section>

        <section name="Attribute compilation">
            <p>
                Attribute defined aspects have to be post-compiled to incorporate the metadata into the class file bytecode.
                This post-compilation step will not be needed with java 1.5 and JSR-175. For now you need to first compile
                the aspect classes with javac compiler and then post compile the
                <code>.class</code> files with the aspect source code as input.
                </p>
                <p>
                    To post-compile the aspect's <code>.class</code> files you have to use the <code>AspectC</code>
                    compiler, which needs both the regular <code>.class</code> files and the aspect sources files
                    containing the attributes metadata. You can run the <code>AspectC</code> from the command line.
                    (It might be useful to run the <code>ASPECTWERKZ_HOME/bin/setEnv.{bat|sh}</code> script first.)
                </p>
                <p>
                    <code>java [options...] org.codehaus.aspectwerkz.definition.AspectC [-verbose] &lt;path to src dir&gt; &lt;path to classes dir&gt; [&lt;path to destination dir&gt;]</code>
                </p>
                <p>
                    <ul>
                        <li>
                            <code>-verbose</code> - (optional) to activate verbose logging of compilation
                        </li>
                        <li>
                            <code>&lt;path to src dir&gt;</code> - the path directory
                            for the source files (not mandatory; it is not needed to point to the root package directory
                            since package name is extracted from the source file itself)
                        </li>
                        <br/>
                        <li>
                            <code>&lt;path to classes dir&gt;</code> - the path to the root directory of the regular
                            <code>.class</code> files for the aspects
                        </li>
                        <br/>
                        <li>
                            <code>&lt;path to destination dir&gt;</code> - (optional)
                            - the path to the root directory to write the new
                            <code>.class</code> files for the self-defined aspects.
                            If not specified, the initial
                            <code>.class</code> files are overridden.
                        </li>
                    </ul>
                </p>

                <p>
                    <code>AspectC</code> can also be used to handle custom metadata as described
                    <a href="definition_issues.html#Custom metadata compilation">here</a>.
                </p>

        </section>

        <section name="Passing parameters to aspects">
            <p>
                You also have the option of passing parameters to your aspects.
                This can be very convenient if you want to reuse the same
                aspect but with a different configuration without using aspect inheritance.
                To pass a parameter to the aspect you simply add a
                <code>param</code> tag to the
                <code>aspect</code> definition, like this:
            </p>
            <p>
                <source><![CDATA[
<aspect ... >
    <param name="timeout" value="10"/>
</aspect>
                ]]></source>
            </p>
            <p>
                From within an <code>Aspect</code> subclass use the method <code>___AW_getParameter("timeout")</code> to retrieve
                the parameter value as a String.
            </p>
        </section>

        <section name="XML deployment descriptor">
            <p>
                The deployment descriptor is needed for the runtime system to know which aspects it should load.
                It always has to be specified even though all definition is made in attributes.
            </p>

            <p>
               Example:
            </p>
            <source><![CDATA[
<aspectwerkz>
    <system id="tests">
        <package name="foo.bar">
            <aspect class="MyAspect1"/>
            <aspect class="MyAspect2"/>
            ...
        </package>
    </system>
</aspectwerkz>
            ]]></source>
        </section>

    </body>

</document>
