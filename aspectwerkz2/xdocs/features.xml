<?xml version="1.0"?>

<document>

    <properties>
        <title>AspectWerkz</title>
        <author email="jboner at codehaus dot org">jonas bon&#233;r</author>
    </properties>

    <body>

        <section name="Features">

            <subsection name="AspectWerkz supports the following features">
                <ul>
                    <li>
                        Runtime bytecode modification.
                        Hooks in and transforms classes loaded by
                        <b>any</b> class loader
                        except the bootstrap class loader. Which basically means that
                        you can easily transform any (legacy) application or external
                        library apart from rt.jar both at runtime and compile time.
                    </li>
                    <br/>
                    <li>
                        The join point model supports advising of static and
                        member fields, static and member methods (public, private,
                        protected, and package protected). It also supports
                        advising of exceptions and caller side pointcuts.
                    </li>
                    <br/>
                    <li>
                        Introductions (Mixins/Open Classes), i.e. the possibility
                        to add interfaces and implementations to existing classes.
                    </li>
                    <br/>
                    <li>
                        Runtime attributes. You have the possibility to define
                        <b>everything</b> using runtime attributes (and skip the
                        XML definition completely).
                    </li>
                    <br/>
                    <li>
                        Four different deployment models (scope) for both advices
                        and introductions: perJVM (singleton), perClass, perInstance
                        and perThread.
                    </li>
                    <br/>
                    <li>
                        Hot deployment, advices and introductions can be
                        dynamically deployed, undeployed or rearranged (without
                        reloading or retransforming the target classes).
                    </li>
                    <br/>
                    <li>
                        Very high-performant. An
                        <code>Advice</code> or
                        <code>Introduction</code> adds an overhead of only
                        ~0.00025 ms/call (on my Pentium 4 2.56 Mhz, 512 RAM).
                    </li>
                    <br/>
                    <li>
                        Fine-grained pattern language for selecting the join points.
                    </li>
                    <br/>
                    <li>
                        Uses the same semantics as AspectJ and AOP Alliance.
                        I.e. aspects, advices, pointcuts, join points and introductions.
                    </li>
                    <br/>
                    <li>
                        "Offline" transformation (can be used as a post-processor).
                    </li>
                    <br/>
                    <li>
                        Aspects, advices and introductions are written in plain old
                        Java code. I.e. no new language to learn, no new compilation
                        phases, no need to tell your manager ;-)
                    </li>
                    <br/>
                    <li>
                        The target classes can be regular POJOs (Plain Old Java
                        Objects), i.e. do not need to have an interface.
                    </li>
                    <br/>
                    <li>
                        Support for passing parameters to the advices through
                        the definition and for defining advice stacks which can
                        be reused.
                    </li>
                    <br/>
                    <li>
                        Multiple AspectWerkz systems can be used in the same JVM concurrently.
                    </li>
                    <br/>
                    <li>
                        Advice and Introduction container implementation is pluggable.
                    </li>
                    <br/>
                    <li>
                        External configuration using an XML config file.
                    </li>
                    <br/>
                    <li>
                        Meta-data additions to classes. Possibilities to add
                        meta-data to all loaded classes.
                    </li>
                    <br/>
                    <li>
                        Simple usage and configuration.
                    </li>
                    <br/>
                </ul>
            </subsection>
        </section>

    </body>
</document>

