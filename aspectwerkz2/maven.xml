<project default="aspectwerkz:site" xmlns:m="maven" xmlns:jxr="jxr" xmlns:j="jelly:core" xmlns:u="jelly:util">

    <!-- =================================================== -->
    <!--  set properties -->
    <!-- =================================================== -->
    <property name="pathseparator" value=""/>
    <property name="executableSuffix" value=""/>

    <property name="target.dir" value="${basedir}/target"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="bin.dir" value="${basedir}/bin"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="src.dir" value="${basedir}/src"/>

    <property name="main.classes" value="${target.dir}/classes"/>
    <property name="test.classes" value="${target.dir}/test-classes"/>
    <property name="samples.classes" value="${target.dir}/samples-classes"/>
    <property name="extensions.classes" value="${target.dir}/extensions-classes"/>

    <!-- =================================================== -->
    <!--  initializes parameters  -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:init">
        <mkdir dir="${dist.dir}"/>
        <j:choose>
            <j:when test="${systemScope['os.name'].startsWith('Windows')}">
                <j:set var="pathseparator" value=";"/>
                <j:set var="executableSuffix" value=".bat"/>
            </j:when>
            <j:otherwise>
                <j:set var="pathseparator" value=":"/>
                <j:set var="executableSuffix" value=""/>
            </j:otherwise>
        </j:choose>
    </goal>

    <!-- =================================================== -->
    <!--  generates reports and deploys site -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:site">
        <attainGoal name="clean"/>
        <attainGoal name="aspectwerkz:init"/>
        <attainGoal name="site:deploy"/>
    </goal>

    <!-- =================================================== -->
    <!--  compiles the core distribution and makes a jar file including all the libraries -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:jar">
        <attainGoal name="aspectwerkz:init"/>
        <attainGoal name="java:compile"/>
        <copy file="${src.dir}/main/aspectwerkz.dtd" todir="${main.classes}"/>
        <jar jarfile="${target.dir}/aspectwerkz-${pom.currentVersion}.jar" manifest="${lib.dir}/manifest.mf">
            <fileset dir="${main.classes}">
                <exclude name="**/aspectwerkz/hook/**/*"/>
            </fileset>
        </jar>
        <copy tofile="${lib.dir}/aspectwerkz-${pom.currentVersion}.jar" file="${target.dir}/aspectwerkz-${pom.currentVersion}.jar" overwrite="true"/>

        <!-- split dist for layer 1 separation -->
        <jar jarfile="${target.dir}/aspectwerkz-core-${pom.currentVersion}.jar">
            <fileset dir="${main.classes}">
                <include name="**/aspectwerkz/hook/**/*"/>
            </fileset>
        </jar>
        <copy tofile="${lib.dir}/aspectwerkz-core-${pom.currentVersion}.jar" file="${target.dir}/aspectwerkz-core-${pom.currentVersion}.jar" overwrite="true"/>
        <attainGoal name="aspectwerkz:extensions:compile"/>
        <copy tofile="${lib.dir}/aspectwerkz-extensions-${pom.currentVersion}.jar" file="${target.dir}/extensions.jar" overwrite="true"/>
    </goal>

    <!-- =================================================== -->
    <!--  compiles everything -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:compile">
        <attainGoal name="aspectwerkz:init"/>
        <attainGoal name="aspectwerkz:jar"/>
        <attainGoal name="aspectwerkz:extensions:compile"/>
        <attainGoal name="aspectwerkz:samples:compile"/>
        <attainGoal name="test:compile"/>
    </goal>

    <!-- =================================================== -->
    <!--  offline transformation of the samples -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:transform">
        <attainGoal name="clean"/>
        <attainGoal name="aspectwerkz:init"/>
        <attainGoal name="aspectwerkz:compile"/>
        <exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
            <arg line="-offline ${src.dir}/samples/aspectwerkz.xml -verify -cp ${extensions.classes} ${samples.classes}"/>
        </exec>
    </goal>

    <!-- =================================================== -->
    <!--  compiles the samples -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:samples:compile">
        <attainGoal name="aspectwerkz:init"/>
        <mkdir dir="${samples.classes}"/>
        <javac destdir="${samples.classes}" deprecation="true"
            debug="true" optimize="false" excludes="**/samples.xml">
            <src>
                <pathelement location="src/samples"></pathelement>
            </src>
            <classpath>
                <pathelement path="${main.classes}"/>
                <fileset dir="${lib.dir}">
                    <include name="*.jar"></include>
                </fileset>
                <fileset dir="${dist.dir}">
                    <include name="*.jar"></include>
                </fileset>
            </classpath>
        </javac>
        <jar jarfile="${target.dir}/samples.jar" basedir="${samples.classes}"/>
        <copy tofile="${dist.dir}/samples.jar" file="${target.dir}/samples.jar" overwrite="true"/>
    </goal>

    <!-- =================================================== -->
    <!--  compiles the extensions -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:extensions:compile">
        <attainGoal name="aspectwerkz:init"/>
        <mkdir dir="${extensions.classes}"/>
        <javac destdir="${extensions.classes}" deprecation="true"
            debug="true" optimize="false" excludes="**/*.xml">
            <src>
                <pathelement location="src/extensions"></pathelement>
            </src>
            <classpath>
                <pathelement path="${main.classes}"/>
                <fileset dir="${lib.dir}">
                    <include name="*.jar"></include>
                </fileset>
                <fileset dir="${dist.dir}">
                    <include name="*.jar"></include>
                </fileset>
            </classpath>
        </javac>
        <jar jarfile="${target.dir}/extensions.jar" basedir="${extensions.classes}"/>
        <copy tofile="${dist.dir}/extensions.jar" file="${target.dir}/extensions.jar" overwrite="true"/>
    </goal>

    <!-- =================================================== -->
    <!--  JDWP interactive Plug -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:samples:plug">
        <attainGoal name="aspectwerkz:init"/>
        <attainGoal name="aspectwerkz:compile"/>
        <input message="Input args ? (-info .., -resume .., -hotswap .., -target file.jar)" addproperty="input.args"/>
        <java classname="org.codehaus.aspectwerkz.hook.Plug" fork="true">
            <classpath>
                <pathelement path="${main.classes}"/>
                <pathelement path="${java.home}/../lib/tools.jar"/>
                <fileset dir="${lib.dir}" includes="*.jar"/>
            </classpath>
            <arg line="${input.args}"/>
        </java>
    </goal>

    <!-- =================================================== -->
    <!--  all tests -->
    <!-- =================================================== -->
    <!-- TODO : enhance this for jira AW-93 -->
    <goal name="aspectwerkz:test">
        <attainGoal name="aspectwerkz:test:aspectc"/>
        <exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
            <arg line="-Daspectwerkz.jit.boundry=1 -cp ${test.classes}${pathseparator}${samples.classes}${pathseparator}${lib.dir}/junit-3.8.1.jar${pathseparator}${lib.dir}/junitperf.jar -Daspectwerkz.transform.dump=* -Daspectwerkz.definition.file=${src.dir}/test/test-attribdef.xml test.AllTests"/>
        </exec>
    </goal>

    <goal name="aspectwerkz:test:nojit">
        <attainGoal name="aspectwerkz:test:aspectc"/>
        <exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
            <arg line="-Daspectwerkz.jit.off=true -cp ${test.classes}${pathseparator}${samples.classes}${pathseparator}${lib.dir}/junit-3.8.1.jar${pathseparator}${lib.dir}/junitperf.jar -Daspectwerkz.transform.dump=* -Daspectwerkz.definition.file=${src.dir}/test/test-attribdef.xml test.AllTests"/>
        </exec>
    </goal>

    <goal name="aspectwerkz:test:bootcl">
        <attainGoal name="aspectwerkz:test:aspectc"/>
        <exec executable="java">
            <arg line="-Daspectwerkz.classloader.clbootclasspath=./_boot -cp c:\java\hotspot\j2sdk1.4.2_01\lib\tools.jar;.\lib\aspectwerkz-core-0.10.RC1.jar;.\lib\javassist-2.6.jar org.codehaus.aspectwerkz.hook.ProcessStarter -Xbootclasspath/p:.\lib\aspectwerkz-core-0.10.RC1.jar;.\lib\javassist-2.6.jar -Daspectwerkz.jit.boundry=1 -cp .\lib\aspectwerkz-0.10.RC1.jar;.\lib\asm-1.4.2.jar;.\lib\bcel.jar;.\lib\dom4j-1.4.jar;.\lib\qdox-1.3.jar;.\lib\concurrent-1.3.1.jar;.\lib\trove-1.0.2.jar;.\lib\piccolo-1.03.jar;.\lib\jrexx-1.1.1.jar;${test.classes}${pathseparator}${samples.classes}${pathseparator}${lib.dir}/junit-3.8.1.jar${pathseparator}${lib.dir}/junitperf.jar -Daspectwerkz.transform.dump=* -Daspectwerkz.definition.file=${src.dir}/test/test-attribdef.xml test.AllTests"/>
        </exec>
    </goal>

    <!-- =================================================== -->
    <!--  runs perf tests -->
    <!--    TODO: port the perf tests  + port the tests in xmldef that are not duplicated in attribdef (most of them) -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:xmldef:test:perf">
        <attainGoal name="aspectwerkz:test:aspectc"/>
        <exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
            <arg line=" -Daspectwerkz.jit.off=true -cp ${test.classes}${pathseparator}${samples.classes}${pathseparator}${lib.dir}/junit-3.8.1.jar${pathseparator}${lib.dir}/junitperf.jar -Daspectwerkz.definition.file=${src.dir}/test/test-attribdef.xml test.AllPerfTests"/>
        </exec>
    </goal>

    <!-- =================================================== -->
    <!--  multithreaded custom classloader tests -->
    <!--  thread number and loops can be passed as argument -->
    <!--  refer to test.xmldef.clapp javadoc -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:test:clapp">
        <attainGoal name="aspectwerkz:test:aspectc"/>
        <java classname="test.clapp.CrazyClassLoaderApp" fork="true">
            <classpath>
                <pathelement path="${test.classes}"/>
            </classpath>
            <jvmarg value="-DDummyClass=${test.classes}"/>
        </java>
        <exec executable="${bin.dir}/aspectwerkz${executableSuffix}" fork="true">
            <arg line="-Daspectwerkz.jit.off=true -cp ${test.classes} -Daspectwerkz.definition.file=${basedir}/src/test/test-attribdef.xml -DDummyClass=${test.classes} test.clapp.CrazyClassLoaderApp"/>
        </exec>
    </goal>

    <!-- =================================================== -->
    <!--  runs the logging test -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:samples:logging">
        <attainGoal name="aspectwerkz:samples:aspectc"/>
        <exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
            <arg line="-cp ${samples.classes} -Daspectwerkz.definition.file=${src.dir}/samples/samples-attribdef.xml -Daspectwerkz.transform.dump=* examples.logging.Target"/>
        </exec>
    </goal>

    <!-- =================================================== -->
    <!--  runs the runtime weaving logging test -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:samples:hotswaplogging">
        <attainGoal name="aspectwerkz:samples:aspectc"/>
        <exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
            <arg line="-Daspectwerkz.transform.verbose=false -Daspectwerkz.jit.off=true -cp ${samples.classes} -cp ${lib.dir}/aspectwerkz-extensions-${pom.currentVersion}.jar -Daspectwerkz.definition.file=${src.dir}/samples/samples-hotswap.xml -Daspectwerkz.transform.dump=* examples.logging.HotSwapTarget"/>
        </exec>
    </goal>
    <goal name="aa">
        <attainGoal name="aspectwerkz:compile"/>
        <exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
            <arg line="-Daspectwerkz.transform.verbose=false -Daspectwerkz.jit.off=true -cp ${samples.classes} -cp ${lib.dir}/aspectwerkz-extensions-${pom.currentVersion}.jar -Daspectwerkz.definition.file=${src.dir}/samples/samples-hotswap.xml -Daspectwerkz.transform.dump=* examples.logging.HotSwapTarget"/>
        </exec>
    </goal>

    <!-- =================================================== -->
    <!--  runs the fibonacci test -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:samples:fibonacci">
        <attainGoal name="aspectwerkz:samples:aspectc"/>
        <exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
            <arg line="-cp ${samples.classes} -Daspectwerkz.definition.file=${src.dir}/samples/samples-attribdef.xml -Daspectwerkz.transform.dump=* examples.caching.Fibonacci"/>
        </exec>
    </goal>

    <!-- =================================================== -->
    <!--  runs the caching test -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:samples:caching">
        <attainGoal name="aspectwerkz:samples:aspectc"/>
        <exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
            <arg line="-cp ${samples.classes} -Daspectwerkz.definition.file=${src.dir}/samples/samples-attribdef.xml -Daspectwerkz.transform.dump=* examples.caching.CacheTest"/>
        </exec>
    </goal>

    <!-- =================================================== -->
    <!--  runs the cflow test -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:samples:cflow">
        <attainGoal name="aspectwerkz:samples:aspectc"/>
        <exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
            <arg line="-cp ${samples.classes} -Daspectwerkz.definition.file=${src.dir}/samples/samples-attribdef.xml -Daspectwerkz.transform.dump=* examples.cflow.Target"/>
        </exec>
    </goal>

    <!-- =================================================== -->
    <!--  runs the introduction test -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:samples:introduction">
        <attainGoal name="aspectwerkz:samples:aspectc"/>
        <exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
            <arg line="-cp ${samples.classes} -Daspectwerkz.definition.file=${src.dir}/samples/samples-attribdef.xml -Daspectwerkz.transform.dump=* examples.introduction.Target"/>
        </exec>
    </goal>

    <!-- =================================================== -->
    <!--  runs the exception handling test -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:samples:exception">
        <attainGoal name="aspectwerkz:samples:aspectc"/>
        <exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
            <arg line="-cp ${samples.classes} -Daspectwerkz.definition.file=${src.dir}/samples/samples-attribdef.xml -Daspectwerkz.transform.dump=* examples.exception.Target"/>
        </exec>
    </goal>

    <!-- =================================================== -->
    <!--  runs the remote test - client side -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:samples:remote:client">
        <attainGoal name="clean"/>
        <attainGoal name="aspectwerkz:init"/>
        <attainGoal name="aspectwerkz:compile"/>
        <exec executable="java">
            <arg line="-cp ${pathseparator}${lib.dir}/aspectwerkz-${pom.currentVersion}.jar${pathseparator}${samples.classes} examples.connectivity.Client"/>
        </exec>
    </goal>

    <!-- =================================================== -->
    <!--  runs the remote test - server side -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:samples:remote:server">
        <attainGoal name="clean"/>
        <attainGoal name="aspectwerkz:init"/>
        <attainGoal name="aspectwerkz:compile"/>
        <exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
            <arg line="-cp ${basedir}${pathseparator}${dist.dir}/extensions.jar${pathseparator}${lib.dir}/ant-1.5.2.jar${pathseparator}${samples.classes} -Daspectwerkz.transform.dump=* -Daspectwerkz.resource.bundle=${src.dir}/samples/aspectwerkz.properties -Daspectwerkz.remote.server.run=true -Daspectwerkz.definition.file=${src.dir}/samples/aspectwerkz.xml examples.connectivity.Server"/>
        </exec>
    </goal>

    <!-- =================================================== -->
    <!--  compiles aspects for the attribdef samples -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:samples:aspectc">
        <attainGoal name="clean"/>
        <attainGoal name="aspectwerkz:init"/>
        <attainGoal name="aspectwerkz:compile"/>
        <exec executable="java">
            <arg line="-cp ${samples.classes}${pathseparator}${lib.dir}/aspectwerkz-${pom.currentVersion}.jar${pathseparator}${lib.dir}/bcel-patch.jar${pathseparator}${lib.dir}/bcel.jar${pathseparator}${lib.dir}/piccolo-1.03.jar${pathseparator}${lib.dir}/qdox-1.3.jar${pathseparator}${lib.dir}/dom4j-1.4.jar org.codehaus.aspectwerkz.definition.AspectC -verbose ${basedir}/src/samples ${basedir}/target/samples-classes"/>
        </exec>
    </goal>

    <!-- =================================================== -->
    <!--  compiles aspects for the attribdef tests -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:test:aspectc">
        <attainGoal name="clean"/>
        <attainGoal name="aspectwerkz:init"/>
        <attainGoal name="aspectwerkz:compile"/>
        <exec executable="java">
            <arg line="-cp ${test.classes}${pathseparator}${lib.dir}/aspectwerkz-${pom.currentVersion}.jar${pathseparator}${lib.dir}/bcel-patch.jar${pathseparator}${lib.dir}/bcel.jar${pathseparator}${lib.dir}/piccolo-1.03.jar${pathseparator}${lib.dir}/qdox-1.3.jar${pathseparator}${lib.dir}/dom4j-1.4.jar org.codehaus.aspectwerkz.definition.AspectC ${basedir}/src/test ${basedir}/target/test-classes"/>
        </exec>
    </goal>

    <!-- =================================================== -->
    <!--  downloads dependencies -->
    <!-- =================================================== -->
    <goal name="aspectwerkz:getdeps">
        <attainGoal name="aspectwerkz:init"/>
        <mkdir dir="${lib.dir}"/>
        <copy todir="${lib.dir}" flatten="true">
            <fileset dir="${maven.repo.local}">
                <j:forEach var="dep" items="${pom.dependencies}">
                    <include name="${dep.projectId}/jars/${dep.jar}"/>
                </j:forEach>
            </fileset>
        </copy>
    </goal>

    <!-- =================================================== -->
    <!--  creates a patch of your changes -->
    <!-- =================================================== -->
    <goal name="cvs:make-patch" description="Creates a patch of *your* changes">
        <cvs command="-q diff -b -u -N" output="patch.txt"/>
        <echo>
            Please create a new issue in AspectWerkz's JIRA:
            http://jira.codehaus.org/secure/BrowseProject.jspa?id=10105
            Then attach the patch.txt file.
            If your patch consists of entirely new files too, please zip them
            up and attach them too.

            If your patch includes JUnit tests and a decent description,
            you increase the chance of having the patch applied by some
            of the committers.
        </echo>
    </goal>

    <!-- =================================================== -->
    <!--  preGoal for xdoc FAQ -->
    <!-- =================================================== -->
    <preGoal name="xdoc:jelly-transform">
        <attainGoal name="faq"/>
    </preGoal>

    <goal name="aspectwerkz:aroundbench">
        <attainGoal name="aspectwerkz:test:aspectc"/>
        <exec executable="${bin.dir}/aspectwerkz${executableSuffix}">
            <arg line="-Daspectwerkz.jit.boundry=1 -cp ${test.classes} -Daspectwerkz.definition.file=${src.dir}/test/aroundbench.xml -Daspectwerkz.transform.dump=* test.aroundbench.AroundTestRun"/>
        </exec>
    </goal>

</project>


