/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. D:/aw/cvs_aw/aspectwerkz4_stable/src/main/org/codehaus/aspectwerkz/annotation/expression/ast\grammar.jj */
/*@egen

PARSER_BEGIN(AnnotationParser)
/**************************************************************************************
 * Copyright (c) Jonas Bon\u00e9r, Alexandre Vasseur. All rights reserved.                 *
 * http://aspectwerkz.codehaus.org                                                    *
 * ---------------------------------------------------------------------------------- *
 * The software in this package is published under the terms of the LGPL license      *
 * a copy of which has been included with this distribution in the license.txt file.  *
 **************************************************************************************/
package org.codehaus.aspectwerkz.annotation.expression.ast;

import java.lang.reflect.Modifier;
import java.io.Reader;
import java.io.StringReader;

/**
 * The annotation parser.
 *
 * @author <a href="mailto:jboner@codehaus.org">Jonas Bon\u00e9r</a>
 */
public class AnnotationParser/*@bgen(jjtree)*/implements AnnotationParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTAnnotationParserState jjtree = new JJTAnnotationParserState();

/*@egen*/

    public ASTRoot parse(String annotation) throws ParseException {
        return parse(new StringReader(annotation));
    }

    public ASTRoot parse(Reader reader) throws ParseException {
        ReInit(reader);
        return Root();
    }
}
PARSER_END(AnnotationParser)

//------------------ Global lexical scope ------------------

SKIP : /* WHITE SPACE */
{ " " | "\t" }

TOKEN :
{
  < DOT : "." >
| < INTEGER: ("-")? ["1"-"9"] (["0"-"9"])* (["l", "L"])? | "0" >
| < HEXNUMBER: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ (["l","L"])? >
| < OCTNUMBER: "0" (["0"-"7"])* (["l","L"])? >
| < FLOAT: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]>
| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < #DIGIT: ["0"-"9"] >
| < BOOLEAN : "true" | "false" | "TRUE" | "FALSE" >
| < STRING : "\"" (<CHAR_LETTER>)* "\"" >
| < CHAR : "'" <CHAR_LETTER> "'" >
| < NEWLINE : "\n" >
| < LEFT_PARENTHEZIS : "(" >
| < RIGHT_PARENTHEZIS : ")" >
| < LEFT_BRACKET : "{" >
| < RIGHT_BRACKET : "}" >
| < COMMA : "," >
| < EQUALS : "=" >
| < #AT : "@" >
| < ANNOTATION : <AT> <JAVA_TYPE> >
| < JAVA_TYPE: <JAVA_NAME> (<DOT> <JAVA_NAME>)* >
| < #JAVA_NAME: (<JAVA_LETTER>)+ >
| < #JAVA_LETTER: ["a"-"z", "A"-"Z", "_", "$", "+", "#", "0"-"9"] >
| < #CHAR_LETTER : (~["\n","\r", "\\", "\""]) >
}

/**
 * Entry point.
 */
ASTRoot Root()       : {/*@bgen(jjtree) Root */
  ASTRoot jjtn000 = new ASTRoot(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Root */
    try {
/*@egen*/
    Annotation() (<EOF> | "\r\n" | "\n")/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { return jjtn000; }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
 * Annotation.
 */
void Annotation()             : {/*@bgen(jjtree) Annotation */
  ASTAnnotation jjtn000 = new ASTAnnotation(JJTANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Annotation */
    try {
/*@egen*/
    LOOKAHEAD(3)
    <ANNOTATION> <LEFT_PARENTHEZIS> (LOOKAHEAD(4) KeyValuePairList() | Value()) <RIGHT_PARENTHEZIS>
    |
    LOOKAHEAD(2)
    <ANNOTATION> <LEFT_PARENTHEZIS> <RIGHT_PARENTHEZIS>
    |
    <ANNOTATION>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

/**
 * KeyValuePairList.
 */
void KeyValuePairList() : {}
{
    KeyValuePair()
    ( (<COMMA>)? KeyValuePair() )*
}

/**
 * KeyValuePair.
 */
void KeyValuePair()               :
{/*@bgen(jjtree) KeyValuePair */
    ASTKeyValuePair jjtn000 = new ASTKeyValuePair(JJTKEYVALUEPAIR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token key, value;
}
{/*@bgen(jjtree) KeyValuePair */
    try {
/*@egen*/
    key=<JAVA_TYPE>
    {
        jjtn000.setKey(key.image);
    }
    <EQUALS>
    Value()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
 * Value.
 *
 * @TODO: nested annotations
 */
void Value() : {}
{
// Annotation() |
      Char()
    | String()
    | Array()
    | Identifier()
    | Boolean()
    | Integer()
    | Float()
    | Hex()
    | Oct()
}

/**
 * Identifier.
 */
void Identifier()             :
{/*@bgen(jjtree) Identifier */
    ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token value;
}
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    value=<JAVA_TYPE>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setValue(value.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
 * Boolean.
 */
void Boolean()          :
{/*@bgen(jjtree) Boolean */
    ASTBoolean jjtn000 = new ASTBoolean(JJTBOOLEAN);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token value;
}
{/*@bgen(jjtree) Boolean */
    try {
/*@egen*/
    value=<BOOLEAN>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setValue(value.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
 * Char.
 */
void Char()       :
{/*@bgen(jjtree) Char */
    ASTChar jjtn000 = new ASTChar(JJTCHAR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token value;
}
{/*@bgen(jjtree) Char */
    try {
/*@egen*/
    value=<CHAR>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setValue(value.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
 * String.
 */
void String()         :
{/*@bgen(jjtree) String */
    ASTString jjtn000 = new ASTString(JJTSTRING);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token value;
}
{/*@bgen(jjtree) String */
    try {
/*@egen*/
    value=<STRING>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setValue(value.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
 * Array.
 */
void Array()        : {/*@bgen(jjtree) Array */
  ASTArray jjtn000 = new ASTArray(JJTARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Array */
    try {
/*@egen*/
    <LEFT_BRACKET> [Value() (LOOKAHEAD(2) <COMMA> Value())* ] <RIGHT_BRACKET>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
 * Integer.
 */
void Integer()          :
{/*@bgen(jjtree) Integer */
    ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token value;
}
{/*@bgen(jjtree) Integer */
    try {
/*@egen*/
    value=<INTEGER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setValue(value.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
 * Float.
 */
void Float()        :
{/*@bgen(jjtree) Float */
    ASTFloat jjtn000 = new ASTFloat(JJTFLOAT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token value;
}
{/*@bgen(jjtree) Float */
    try {
/*@egen*/
    value=<FLOAT>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setValue(value.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
 * Hex.
 */
void Hex()      :
{/*@bgen(jjtree) Hex */
    ASTHex jjtn000 = new ASTHex(JJTHEX);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token value;
}
{/*@bgen(jjtree) Hex */
    try {
/*@egen*/
    value=<HEXNUMBER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setValue(value.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/**
 * Oct.
 */
void Oct()      :
{/*@bgen(jjtree) Oct */
    ASTOct jjtn000 = new ASTOct(JJTOCT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token value;
}
{/*@bgen(jjtree) Oct */
    try {
/*@egen*/
    value=<OCTNUMBER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
        jjtn000.setValue(value.image);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
